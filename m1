

'---------------------------------------------------------------------------------------

Public conn  As ADODB.Connection
Public AirlineName As String
Public AirlineNameForInClause As String
Public aircraftType As String
Public EngineModel As String
Public DateFrom As String
Public DateTo As String
Public AirlineCode As String
Public EngineSeries As String
Public ACcount As Integer
Public NumEngines As Integer
Public UpdateDate As Date
Public RateEndDate As Date
Public RateStartDate As Date
Public SparesCount As Integer

Public TDUsername As String
Public TDPassword As String
Public SQLUsername As String
Public SQLPassword As String
Public SQLDataSource As String

Public MF As Workbook
Public OParray As Variant
Public SBarray As Variant
Public CESarray As Variant
Public SS1array As Variant
Public SS2array As Variant
Public OldData As Variant
Public ColorData As Variant
Public TPP_ID As Integer    'Updated on  04/30/2015

Public Disabler As Integer
Public ErrorFlag As Boolean
Public ErrorDesc As String
Public AirlineNameForCG As String 'Updated on  09/05/2015

Public Sub GetDataByDotNetDLL(EngineModel As String, EngineSeries As String, aircraftType As String, AirlineName1 As String, AirlineName2 As String, AirlineName3 As String, AirlineName4 As String, AirlineName5 As String, DateFrom As String, DateTo As String, UserName As String, Password As String, IsFleetCheckEnabled As Boolean, AirlineNameForCG As String)

 ' =====================================================
    '   Last updated: 03/26/2018
    '   Code by TCS
 ' =====================================================

    Application.DisplayAlerts = False
    
    ReadConnectionXML
    
    '*** Need to change airline name for 5 airlines ***
    
    AirlineName1 = Replace(AirlineName1, "'", "''")
    AirlineName2 = Replace(AirlineName2, "'", "''")
    AirlineName3 = Replace(AirlineName3, "'", "''")
    AirlineName4 = Replace(AirlineName4, "'", "''")
    AirlineName5 = Replace(AirlineName5, "'", "''")
    
    
    'Save Current Inputs
    AirlineNameForInClause = AirlineName1
    If AirlineName2 <> "" Then
        AirlineNameForInClause = AirlineNameForInClause & ";" & AirlineName2
    End If
    If AirlineName3 <> "" Then
        AirlineNameForInClause = AirlineNameForInClause & ";" & AirlineName3
    End If
    If AirlineName4 <> "" Then
        AirlineNameForInClause = AirlineNameForInClause & ";" & AirlineName4
    End If
    If AirlineName5 <> "" Then
        AirlineNameForInClause = AirlineNameForInClause & ";" & AirlineName5
    End If
    
    SetInputParameters EngineModel, EngineSeries, aircraftType, AirlineNameForInClause, DateFrom, DateTo

    Dim tppObj As Object
    Set tppObj = CreateObject("TPPLibrary.TPPLibraryV8")
    
    Dim result As Long
    result = tppObj.MainTDImport(EngineModel, EngineSeries, aircraftType, AirlineName1, AirlineName2, AirlineName3, AirlineName4, AirlineName5, DateFrom, DateTo, UserName, Password, TPP_ID, IsFleetCheckEnabled, AirlineNameForCG)
    If result = 0 Then
        MsgBox "User does not have access to Diagnostic Data"
    ElseIf result < 0 Then
        MsgBox "There is some error in downloading data. Please contact Administrator !"
    End If
    
    
End Sub

'To Get Data from Tera Data Server
Public Sub GetLookupData()
    
    ReadConnectionXML
    
    Dim tppObj As Object
    Set tppObj = CreateObject("TPPLibrary.TPPLibraryV8")

    tppObj.GetLookupData (TDPassword)
    
End Sub

Public Sub RunUpdate(Optional DateFrom As String, Optional DateTo As String, Optional Airline As String, Optional EngineModel As String, Optional MONTHS As Variant, Optional AirlineNameForCG As String, Optional EngineSeries As String)
    
    ' =====================================================
    '   Last updated: 11/23/2020
    '   Code by Asko Soimakallio & TCS
    '
    '   Primary subroutine that executes data imports and
    '   subsequent analysis updates
    '======================================================
        
    S0 = "Supporting Data"
    S1 = "FLEET PROG Raw Data"
    S3 = "MPD Raw Data"
    S2 = "Fleet Programs"
    S4 = "Fleet Program Data"
    S5 = "Analytics Over Time"
               
    Sheets("Temp").Rows("1:" & Rows.Count).Clear
               
    ReadConnectionXML
    OpenSQLConnection

'========================================
'   PSE Cause / Workscope table
'========================================
    
    Get_EngMdl_PSE_Cause_Data EngineModel
    
'========================================
'   Fleet programs
'========================================
    Sheets(S2).Range(Sheets(S2).Columns(1), Sheets(S2).Columns(Columns.Count)).EntireColumn.Hidden = False
       
    Get_FLEET_PROGRAM_Data EngineModel
        
    FPrc = Sheets(S1).Cells(Rows.Count, 1).End(xlUp).Row
    FPcc = Sheets(S1).Cells(1, Columns.Count).End(xlToLeft).Column
    
    Dim ProgramArray
    If FPcc > 1 Then
        ProgramArray = Sheets(S1).Range(Sheets(S1).Cells(1, 1), Sheets(S1).Cells(FPrc, 100)).Value
        Sheets(S1).Rows("1:" & FPrc).Clear
    Else
        ProgramArray = Sheets(S1).Range(Sheets(S1).Cells(1, 1), Sheets(S1).Cells(FPrc, 100)).Value
        Sheets(S1).Rows("1:" & FPrc).Clear
    End If
    
    Dim NewProgs
    NewProgs = ProgramTransform(ProgramArray)
    Dummy = ProgramCompare(NewProgs, 1, "", "")
    ProgramBackgroundUpdater
    
    ' Update Dropdown
    RC4 = Sheets(S4).Cells(Rows.Count, 4).End(xlUp).Row
    
    If RC4 > 10 Then
        With Sheets(S2).Cells(6, 1).Validation
            .Delete
            .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:= _
            xlBetween, Formula1:="='" & S4 & "'!" & Sheets(S4).Range(Sheets(S4).Cells(11, 4), Sheets(S4).Cells(RC4, 4)).Address
            .IgnoreBlank = True
            .InCellDropdown = True
            .InputTitle = ""
            .ErrorTitle = ""
            .InputMessage = ""
            .ErrorMessage = ""
            .ShowInput = True
            .ShowError = True
        End With
    Else
        With Sheets(S2).Cells(6, 1).Validation
            .Delete
            .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:= _
            xlBetween, Formula1:="='" & S4 & "'!" & Sheets(S4).Range(Sheets(S4).Cells(11, 4), Sheets(S4).Cells(11, 4)).Address
            .IgnoreBlank = True
            .InCellDropdown = True
            .InputTitle = ""
            .ErrorTitle = ""
            .InputMessage = ""
            .ErrorMessage = ""
            .ShowInput = True
            .ShowError = True
        End With
    End If
    
'========================================
'   Analytics data
'========================================
    
    Get_ANALYTICS_Data

'========================================
'   FDM data
'========================================

    CalculateRGChartData DateFrom, DateTo, EngineModel
    GetDataFor_IFSD_FDM_EVENTS_T MONTHS, AirlineNameForCG
    GetDataFor_TOA_FDM_EVENTS_T MONTHS, AirlineNameForCG
    GetDataFor_INT_FDM_EVENTS_T MONTHS, AirlineNameForCG
    GetDataFor_UER_FDM_EVENTS_T MONTHS, AirlineNameForCG
    GetDataFor_DEPREL_FDM_EVENTS_T MONTHS, AirlineNameForCG
    GetDataFor_REM_FDM_EVENTS_T MONTHS, AirlineNameForCG
    GetDataFor_SVR_FDM_EVENTS_T MONTHS, AirlineNameForCG
    GetDataFor_SE_FDM_EVENTS_T MONTHS, AirlineNameForCG
    
    GetEng_Schedule_Data EngineSeries
    GetSupportData Airline
    ResetHeadingsOnAllTabs
    GetFleetSummaryReportData Airline
    GetAirlineSimpleStatistics
    GetFleetSimpleStatistics
    GetFleetCurrentEngineStatus AirlineNameForCG
    GetAirlineCurrentEngineStatus
    GetOperationalEventsData
    
    GetEngine12MUtilization
    GetPSECauseData
    
    GetSBArrayData
    
    FDMupdate
    
    '========================================
    '   Diagnostics data
    '========================================
    
    IsRun = False
    IsRun = IsProcessRunning("DiagnosticDataDownloader.exe")
    If (IsRun) Then
        MsgBox ("Diagnostic download process is still under way so the diagnostics update was skipped." & Chr(10) & Chr(10) & "The rest of your update process will continue normally. Please follow the guidance in the diagnostics download complete message once it appears.")
    Else
        GetDiagnosticGenxValues Airline, EngineModel
        GetDiagnosticNonGenxValues Airline, EngineModel
        GetDerateDataArray Airline, EngineModel
        GetDiagnosticDataArray Airline, EngineModel
        
        S2 = "Diagnostics Data"
        RC = Sheets(S2).Cells(Rows.Count, 1).End(xlUp).Row
        CC = Sheets(S2).Cells(3, Columns.Count).End(xlToLeft).Column
        
        If RC > 3 Then
            Dim DiagData
            DiagData = Sheets(S2).Range(Sheets(S2).Cells(4, 1), Sheets(S2).Cells(RC, CC)).Value
    
            Sheets(S2).Range(Sheets(S2).Cells(4, 1), Sheets(S2).Cells(RC, CC)).Value = DiagData
            Sheets(S2).Range(Sheets(S2).Cells(4, 1), Sheets(S2).Cells(RC, CC)).Sort key1:=Sheets(S2).Range(Sheets(S2).Cells(4, 1), Sheets(S2).Cells(RC, 1)), order1:=xlAscending
            Erase DiagData
        End If
    
    End If
    '========================================
    '   MPD data
    '========================================
            
    Get_MPD_Data EngineModel

    MPrc = Sheets(S3).Cells(Rows.Count, 1).End(xlUp).Row
    MPcc = Sheets(S3).Cells(1, Columns.Count).End(xlToLeft).Column

    Dim MPDarray
    If MPcc > 1 Then
        MPDarray = Sheets(S3).Range(Sheets(S3).Cells(1, 1), Sheets(S3).Cells(MPrc, 100)).Value
        Sheets(S3).Rows("1:" & MPrc).Clear
    End If
    Dummy2 = MPDupdater(MPDarray)
        
    '=============================================================================================================
     MsgBox "Data download complete. Updating engine calculations."
    '=============================================================================================================
    ' Run calculation updates

    ' Calculate Engine details
    EngineAnalysis
    
    ' Optimizer
    OptCheck = Sheets("Calculation Source").Cells(6, 105).Value
    If OptCheck <> "" And IsNumeric(OptCheck) Then
        If OptCheck > 0 Then
            Answer = MsgBox("Would you like to refresh the optimizer results? Further updates have to be made on the optimizer page.", vbYesNo)
            If Answer = 6 Then
                RunOptimizer
                Dummy = OptimizerToCalc("")
            End If
        End If
    End If
    
    ' Update views
    
    EngineAgeDistribution
    SinceSVChart
    EngPlanUpdater
    DiagnosticsPageUpdate
    
    If InStr(EngineModel, "CFM") > 0 Or InStr(EngineModel, "LEAP") > 0 Then
        Sheets(S5).Cells(1, 7).Value = "This page is for CFM INTERNAL use only."
    Else
        If InStr(EngineModel, "GP") > 0 Then
            Sheets(S5).Cells(1, 7).Value = "This page is for EA INTERNAL use only."
        Else
            Sheets(S5).Cells(1, 7).Value = "This page is for GE INTERNAL use only."
        End If
    End If
    
    Sheets("Cover Page").Activate
    
    CloseSQLConnection
    
End Sub

Function IsProcessRunning(process As String) As Boolean

    Dim objList As Object
    IsProcessRunning = False
    
     #If Win64 Then
        Set objList = GetObject("winmgmts:").ExecQuery("select * from win64_process where name='" & process & "'")
        If objList.Count > 0 Then
            IsProcessRunning = True
            'MsgBox ("YES")
        Else
            IsProcessRunning = False
            'MsgBox ("NO")
        End If
    #ElseIf Win32 Then
        Set objList = GetObject("winmgmts:").ExecQuery("select * from win32_process where name='" & process & "'")
        If objList.Count > 0 Then
            IsProcessRunning = True
            'MsgBox ("YES")
        Else
            IsProcessRunning = False
            'MsgBox ("NO")
        End If
    #End If

End Function

Sub SetInputParameters(EngineModel As String, EngineSeries As String, aircraftType As String, AirlineName As String, DateFrom As String, DateTo As String)

    ' =================================
    '   Last updated: 05/19/2015
    '   Code by TCS
    ' =================================
    
    Dim sqlCmd As String
    OpenSQLConnection
    
     
    
    TPP_ID = GetExistingTPP_ID(EngineModel, AirlineName, EngineSeries, aircraftType)
    If TPP_ID = 0 Then
        TPP_ID = GetNewTPP_ID()
    End If
    
    'Put current TPP_ID in Support data
    Sheets("Supporting Data").Cells(19, 7) = TPP_ID
    
    'Delete existing records from local based on TPP ID
    
    sqlCmd = "DELETE FROM INPUT_PARAMETERS_T WHERE TPP_ID =" & TPP_ID
    conn.Execute sqlCmd
    
    'sqlCmd = " Delete from TABLE ALL_EVENTS;"
    
    sqlCmd = "DELETE FROM ALL_EVENTS WHERE TPP_ID =" & TPP_ID
    conn.Execute sqlCmd
    
    sqlCmd = " INSERT INTO [dbo].[INPUT_PARAMETERS_T] ([TPP_ID],[ENGINE_MODEL],[ENGINE_SERIES],[AIRCRAFT_TYPE],[AIRLINE_NAME],[DATE_FROM],[DATE_TO])"
    sqlCmd = sqlCmd & " VALUES('" & TPP_ID & "','" & EngineModel & "', '" & EngineSeries & "','" & aircraftType & "','" & AirlineName & "','" & DateFrom & "','" & DateTo & "') "
    conn.Execute sqlCmd
    
    Dim x As Variant
    x = Split(AirlineName, ";")
    

    For i = 0 To UBound(x)
    
        airln = x(i)
        
        sqlCmd = "INSERT INTO ALL_EVENTS VALUES(" & [TPP_ID] & ",'" & airln & "','" & EngineModel & "','IFSD');"
        conn.Execute sqlCmd
        sqlCmd = "INSERT INTO ALL_EVENTS VALUES(" & [TPP_ID] & ",'" & airln & "','" & EngineModel & "','TOA');"
        conn.Execute sqlCmd
        sqlCmd = "INSERT INTO ALL_EVENTS VALUES(" & [TPP_ID] & ",'" & airln & "','" & EngineModel & "','DC');"
        conn.Execute sqlCmd
        sqlCmd = "INSERT INTO ALL_EVENTS VALUES(" & [TPP_ID] & ",'" & airln & "','" & EngineModel & "','ITRR');"
        conn.Execute sqlCmd
        sqlCmd = "INSERT INTO ALL_EVENTS VALUES(" & [TPP_ID] & ",'" & airln & "','" & EngineModel & "','SE');"
        conn.Execute sqlCmd
        sqlCmd = "INSERT INTO ALL_EVENTS VALUES(" & [TPP_ID] & ",'" & airln & "','" & EngineModel & "','SVR');"
        conn.Execute sqlCmd
        sqlCmd = "INSERT INTO ALL_EVENTS VALUES(" & [TPP_ID] & ",'" & airln & "','" & EngineModel & "','UER');"
        conn.Execute sqlCmd
        sqlCmd = "INSERT INTO ALL_EVENTS VALUES(" & [TPP_ID] & ",'" & x(i) & "','" & EngineModel & "','REM');"
        conn.Execute sqlCmd
        
        airln = ""
       
   Next i

   conn.Close

   CloseSQLConnection
    
End Sub
Function CalculateRGChartData(DateFrom As String, DateTo As String, EngineModel As String)

    ' =====================================================
    '   Last updated: 06/26/2015
    '   Code by Asko Soimakallio & TCS
    ' =====================================================
 
        Dim cmd As New ADODB.Command
        Dim rs As New ADODB.RecordSet
        Dim prm As ADODB.Parameter
        
        Dim rollingMonths As Integer
        
        rollingMonths = DateDiff("m", CDate(DateFrom), CDate(DateTo))
            
        Set cmd = New ADODB.Command
        cmd.CommandTimeout = 0
        cmd.ActiveConnection = conn
        cmd.CommandType = adCmdStoredProc
        cmd.CommandText = "SP_RGChart_Data"
        
        Set prm = cmd.CreateParameter("RG_START_DATE", adDate, adParamInput, 50, DateFrom)
        cmd.Parameters.Append prm
       
        Set prm = cmd.CreateParameter("RG_END_DATE", adDate, adParamInput, 50, DateTo)
        cmd.Parameters.Append prm
        
        Set prm = cmd.CreateParameter("RG_DIG_ROLLING_MONTH", adInteger, adParamInput, 10, rollingMonths)
        cmd.Parameters.Append prm
        
        Set prm = cmd.CreateParameter("Engine_Model", adVarChar, adParamInput, 100, EngineModel)
        cmd.Parameters.Append prm
        
        Set prm = cmd.CreateParameter("TPP_ID", adInteger, adParamInput, 10, TPP_ID)
        cmd.Parameters.Append prm

        Set Rst = cmd.Execute(, , adCmdStoredProc)
        
       
End Function

Sub GetSupportData(Optional Airline As String)
'Sub GetSupportData()

    ' =================================
    '   Last updated: 9/3/2020
    '   Code by TCS & Asko Soimakallio
    ' =================================
        
    ReadConnectionXML
    OpenSQLConnection
    
    S0 = "Temp"
    S1 = "Supporting Data"
    Dim strAc As String
    Dim sqlCmd As String
    Dim RecordSet  As ADODB.RecordSet
    
    'All values in one sql
    
    sqlCmd = "SELECT DISTINCT P.AIRLINE_NAME,P.AIRCRAFT_TYPE,P.ENGINE_MODEL,P.ENGINE_SERIES ,"
    sqlCmd = sqlCmd & " STUFF((SELECT distinct ',' + p1.AIRLINE_SHORT_NAME FROM [AIRLINE_ENGINE_LOOKUP_T] p1 WHERE (CHARINDEX(','+ CAST(AIRLINE_NAME as nvarchar(1000)) +',',','+ '" & Airline & "' +',', 1) > 0 ) FOR XML PATH(''), TYPE ).value('.', 'NVARCHAR(MAX)')  ,1,1,'') AIRLINE_SHORT_NAME,"
    sqlCmd = sqlCmd & " (SELECT   COUNT (DISTINCT AIRCRAFT_TAIL_NUMBER) FROM [DBO].[AIRLINE_CURRENT_ENGINE_STATUS] WHERE TPP_ID = " & TPP_ID & ") ACcount,"
    sqlCmd = sqlCmd & " (SELECT   COUNT (DISTINCT ENGINE_SERIAL_NUMBER) FROM [DBO].[AIRLINE_CURRENT_ENGINE_STATUS] WHERE TPP_ID = " & TPP_ID & ") NumEngines"
    sqlCmd = sqlCmd & " FROM [INPUT_PARAMETERS_T] P,[AIRLINE_ENGINE_LOOKUP_T] L WHERE P.TPP_ID = " & TPP_ID & ""
    sqlCmd = sqlCmd & " AND  (CHARINDEX(','+ CAST(L.AIRLINE_NAME as nvarchar(1000)) +',',','+ '" & Airline & "' +',', 1) > 0 ) "
        
    'Dim cmd As New ADODB.Command
    'cmd.ActiveConnection = conn
    'cmd.CommandTimeout = 0
    'cmd.CommandType = adCmdText
    'cmd.CommandText = sqlCmd
    'Set RecordSet = cmd.Execute(, , adCmdText)
    
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    
    If RecordSet.RecordCount > 0 Then
        Sheets(S0).Cells(1, 1).CopyFromRecordset RecordSet
        
        'Read Values form Temp sheet in variables
        AirlineName = Sheets(S0).Cells(1, 1).Value
        aircraftType = Sheets(S0).Cells(1, 2).Value
        EngineModel = Sheets(S0).Cells(1, 3).Value
        EngineSeries = Sheets(S0).Cells(1, 4).Value
        AirlineCode = Sheets(S0).Cells(1, 5).Value
        
        Sheets(S1).Cells(15, 10).Value = AirlineCode
        
        ' Airline codes
        Sheets(S1).Range(Sheets(S1).Cells(15, 13), Sheets(S1).Cells(19, 13)).Clear
        
        If InStr(AirlineCode, ",") > 0 Then
            StringValue = AirlineCode
            MaxLength = Len(StringValue)
            
            Dim DstArray
            ReDim DstArray(MaxLength, 1)
            
            p = 0
            For i = 1 To MaxLength
                If InStr(StringValue, ",") > 0 Then
                    DstArray(p, 0) = Left(StringValue, InStr(StringValue, ",") - 1)
                    StringValue = Mid(StringValue, InStr(StringValue, ",") + 1, Len(StringValue))
                Else
                    DstArray(p, 0) = StringValue
                    StringValue = ""
                End If
                
                If StringValue <> "" Then
                    p = p + 1
                Else
                    Exit For
                End If
                    
            Next i
            
            Sheets(S1).Range(Sheets(S1).Cells(15, 13), Sheets(S1).Cells(15 + p, 13)).Value = DstArray
        Else
            Sheets(S1).Cells(15, 13).Value = AirlineCode
        End If
        
        Sheets(S1).Cells(5, 71).Value = Sheets(S0).Cells(1, 6).Value
        NumEngines = Sheets(S0).Cells(1, 7).Value
        UpdateDate = Date
        
        RCC = Sheets(S0).Cells(Rows.Count, 1).End(xlUp).Row
        Sheets(S1).Rows("1:" & RCC).Clear
        
    Else
        'Read Values form Temp sheet in variables
        AirlineName = ""
        aircraftType = ""
        EngineModel = ""
        EngineSeries = ""
        AirlineCode = ""
        Sheets(S1).Cells(5, 71).Value = ""
        NumEngines = 0
        UpdateDate = Date
    End If
        
    'Worksheets(S1).Visible = True
    RecordSet.Close
    
End Sub

Sub ReadConnectionXML()

    ' =================================
    '   Last updated: 03/30/2015
    '   Code by TCS
    ' =================================

    Dim xmlUrl As String
    Dim node As IXMLDOMNode
    Dim DataSource As String
    
    Set xmlDoc = CreateObject("Microsoft.XMLDOM")

    xmlUrl = "C:\\TPPConfig\\TPPConnections.xml"
    
    If Not xmlDoc.Load(xmlUrl) Then
        MsgBox "Connection XML load error. Please contact IT."
        Exit Sub
    Else
        For Each node In xmlDoc.SelectNodes("//TeraDataUser")
            If node.BaseName = "TeraDataUser" Then
                TDUsername = node.nodeTypedValue
                Exit For
            End If
        Next
        
        For Each node In xmlDoc.SelectNodes("//SQLSource")
            If node.BaseName = "SQLSource" Then
                SQLDataSource = node.nodeTypedValue
                Exit For
            End If
        Next
        
    End If
End Sub


Sub OpenSQLConnection()

    '=========================
    ' Last updated: 6/19/2015
    ' Code by TCS
    '=========================

   Set conn = New ADODB.Connection
    If conn.State = 1 Then conn.Close
    With conn
        .ConnectionTimeout = 0
        .Open "Provider = SQLOLEDB;" & "Data Source=" & SQLDataSource & ";" & _
                "Initial Catalog=TPPNX;" & "Trusted_connection=yes;"
                ' "User ID=" & SQLUsername & ";Password=" & SQLPassword & ";"""
        .CursorLocation = adUseClient

    End With

End Sub


Sub CloseSQLConnection()
    If conn.State <> 0 Then conn.Close
End Sub

Sub ClearCell(wsName As String, FirstRow As String)
    On Error GoTo errorhandler:
        Dim WS As Worksheet
        Set WS = Sheets(wsName)
        WS.Activate
        'Worksheets(Worksheet).Activate
        Dim LastRow As String
        If Range(Left(FirstRow, InStr(1, FirstRow, ":", vbTextCompare) - 1)).Text <> "" Then
            LastRow = (Range(FirstRow).End(xlDown).Address)
            Range(FirstRow, LastRow).ClearContents
        End If
        Exit Sub
errorhandler:
    MsgBox Err
        MsgBox ("Error in ClearCell Function: " & Err)
End Sub

Sub GetFleetSummaryReportData(Optional Airline As String)
    
    '================================
    '   Last updated: 9/3/2020
    ' Code by TCS & Asko Soimakallio
    '================================
    
    S1 = "Fleet Summary Report"
    
    Dim sqlCmd As String
    Dim RecordSet  As ADODB.RecordSet
    OpenSQLConnection
        
    'Dim cmd As New ADODB.Command
    'cmd.ActiveConnection = conn
    'cmd.CommandTimeout = 0
    'cmd.CommandType = adCmdText


    AIRLINE_NAME_SQL = ""
    
     x = Split(Airline, ";")
     For i = 0 To UBound(x)
        AIRLINE_NAME_SQL = AIRLINE_NAME_SQL + "'" + x(i) + "',"
     Next i
     AIRLINE_NAME_SQL = Left(AIRLINE_NAME_SQL, Len(AIRLINE_NAME_SQL) - 1)
       

    sqlCmd = " SELECT CUSTOMER,ENGINE_MODEL,ENGINE_SERIES,AIRCRAFT_TYPE,TOTAL_AIRCRAFT,TOTAL_AIRCRAFT_OPERATION,TOTAL_ENGINES,NUMBER_ENGINES_FLEET,PERCENT_ENGINESVFLEET, ENGINE_SERIES + ' / ' + AIRCRAFT_TYPE AS ST FROM FLEET_SUMMARY_REPORT WHERE TPP_ID = " & TPP_ID & " AND CUSTOMER IN (" & AIRLINE_NAME_SQL & ")"
    
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    
    'Set RecordSet = cmd.Execute(, , adCmdText)
    
    RCC = Sheets(S1).Cells(Rows.Count, 1).End(xlUp).Row
    If RCC > 3 Then Sheets(S1).Rows("4:" & RCC).Clear

    Sheets("Fleet Summary Report").Cells(4, 1).CopyFromRecordset RecordSet
    
    RecordSet.Close

End Sub
Sub GetAirlineSimpleStatistics()
    
    '================================
    '   Last updated: 11/08/2016
    ' Code by TCS & Asko Soimakallio
    '================================

    S0 = "Supporting Data"
    S1 = "Airline Simple Statistics"
    
    Dim sqlCmd As String
    Dim RecordSet  As ADODB.RecordSet
        
    sqlCmd = " SELECT CONVERT(VARCHAR,CAST([YEAR MONTH] + '01' AS DATE),101) as [YEAR MONTH],[Average Aircraft Count],[% of Hours/Cycles estimated],[Engine Model],[Engine Hours 12M],[Engine Cycles 12M],[Aircraft Departures 12M],[Flight Leg 12M],[Total Removal Count 12M],[Total Removal Rate 12M],[Total Planned Removal Count 12M],[Total Planned Removal Rate 12M],[Total Unplanned Removal Count 12M],[Total Unplanned Removal Rate 12M],[Total Removal Count w/o customer error 12M],[Total Removal Rate w/o customer error 12M],[Total Basic Removal Count 12M],[Total Basic Removal Rate 12M],[Basic Planned Removal Count 12M],[Basic Planned Removal Rate 12M],[Basic Unplanned Removal Count 12M],[Basic Unplanned Removal Rate 12M],[Total Shop Visit Count 12M],[Total Shop Visit Rate 12M],[Basic Shop Visit Count 12M],[Basic Shop Visit Rate 12M],[Basic Unplanned Shop Visit Count 12M],[Basic Unplanned Shop Visit Rate 12M],[Total Unplanned Shop Visit Count 12M], "
    sqlCmd = sqlCmd & " [Total Unplanned Shop Visit Rate 12M],[Total Avg Time since Shop Visit 12M],[Total Avg Cycles since Shop Visit 12M],[Total IFSD Count 12M],[Total IFSD Rate 12M],[Basic IFSD Count 12M],[Basic IFSD Rate 12M],[Total TOA Count 12M],[Total TOA Rate 12M],[Basic TOA Count 12M],[Basic TOA Rate 12M],[Total Del Canc Count 12M],[Total Dep Reliability 12M],[Basic Del Canc Count 12M],[Basic Dep Reliability 12M],[Total Interrupt Count 12M],[Total Interruption Rate 12M],[Basic Interrupt Count 12M],[Basic Interruption Rate 12M],[Total Significant Event Count 12M],[Total Significant Event Rate 12M],[Basic Significant Event Count 12M],[Basic Significant Event Rate 12M],[Total Flight Disruption Count 12M],[Total Flight Disruption Rate 12M],[Basic Flight Disruption Count 12M],[Basic Flight Disruption Rate 12M] FROM AIRLINE_SIMPLE_STATISTICS WHERE TPP_ID = " & TPP_ID & " order by YEAR(CONVERT(VARCHAR,CAST([YEAR MONTH] + '01' AS DATE),101)) DESC"
    
    Dim cmd As New ADODB.Command
    cmd.ActiveConnection = conn
    cmd.CommandTimeout = 0
    cmd.CommandType = adCmdText
    cmd.CommandText = sqlCmd
    Set RecordSet = cmd.Execute(, , adCmdText)
  
  
    RCC = Sheets(S1).Cells(Rows.Count, 1).End(xlUp).Row
    If RCC > 3 Then Sheets(S1).Rows("4:" & RCC).Clear
    
    Sheets(S1).Cells(4, 1).CopyFromRecordset RecordSet
    
    RecordSet.Close
    
    SS1rc = Sheets(S1).Cells(Rows.Count, 1).End(xlUp).Row
    SS1cc = Sheets(S1).Cells(3, Columns.Count).End(xlToLeft).Column
    
    If SS1rc > 3 Then
        SS1array = Sheets(S1).Range(Sheets(S1).Cells(3, 1), Sheets(S1).Cells(SS1rc, SS1cc)).Value
        Sheets(S1).Range(Sheets(S1).Cells(3, 1), Sheets(S1).Cells(SS1rc, SS1cc)).Value = SS1array
        Sheets(S1).Range(Sheets(S1).Cells(4, 1), Sheets(S1).Cells(SS1rc, SS1cc)).Sort key1:=Sheets(S1).Range(Sheets(S1).Cells(4, 1), Sheets(S1).Cells(SS1rc, 1)), order1:=xlDescending
        SS1array = Sheets(S1).Range(Sheets(S1).Cells(3, 1), Sheets(S1).Cells(SS1rc, SS1cc)).Value
        Sheets(S1).Range(Sheets(S1).Cells(3, 1), Sheets(S1).Cells(SS1rc, SS1cc)).EntireColumn.AutoFit
        Sheets(S1).Range(Sheets(S1).Cells(3, 1), Sheets(S1).Cells(SS1rc, SS1cc)).HorizontalAlignment = xlCenter
                        
        'IFSD
        Sheets(S0).Cells(20, 19).Value = SS1array(2, 33)
        Sheets(S0).Cells(20, 20).Value = SS1array(2, 34)
        Sheets(S0).Cells(20, 21).Value = SS1array(2, 35)
        Sheets(S0).Cells(20, 22).Value = SS1array(2, 36)
        
        'TOA
        Sheets(S0).Cells(21, 19).Value = SS1array(2, 37)
        Sheets(S0).Cells(21, 20).Value = SS1array(2, 38)
        Sheets(S0).Cells(21, 21).Value = SS1array(2, 39)
        Sheets(S0).Cells(21, 22).Value = SS1array(2, 40)
        
        'INT
        Sheets(S0).Cells(22, 19).Value = SS1array(2, 45)
        Sheets(S0).Cells(22, 20).Value = SS1array(2, 46)
        Sheets(S0).Cells(22, 21).Value = SS1array(2, 47)
        Sheets(S0).Cells(22, 22).Value = SS1array(2, 48)
        
        'UER
        Sheets(S0).Cells(23, 19).Value = SS1array(2, 13)
        Sheets(S0).Cells(23, 20).Value = SS1array(2, 14)
        Sheets(S0).Cells(23, 21).Value = SS1array(2, 21)
        Sheets(S0).Cells(23, 22).Value = SS1array(2, 22)
        
        'DEP REL
        Sheets(S0).Cells(24, 19).Value = SS1array(2, 41)
        Sheets(S0).Cells(24, 20).Value = SS1array(2, 42)
        Sheets(S0).Cells(24, 21).Value = SS1array(2, 43)
        Sheets(S0).Cells(24, 22).Value = SS1array(2, 44)
        ' Utilizations
        Sheets(S0).Cells(22, 16).Value = SS1array(2, 5)
        Sheets(S0).Cells(23, 16).Value = SS1array(2, 7)
        Sheets(S0).Cells(31, 9).Value = SS1array(2, 2)
        'SE
        Sheets(S0).Cells(25, 19).Value = SS1array(2, 49)
        Sheets(S0).Cells(25, 20).Value = SS1array(2, 50)
        Sheets(S0).Cells(25, 21).Value = SS1array(2, 51)
        Sheets(S0).Cells(25, 22).Value = SS1array(2, 52)
    Else
         'IFSD
        Sheets(S0).Cells(20, 19).Value = ""
        Sheets(S0).Cells(20, 20).Value = ""
        Sheets(S0).Cells(20, 21).Value = ""
        Sheets(S0).Cells(20, 22).Value = ""
        'TOA
        Sheets(S0).Cells(21, 19).Value = ""
        Sheets(S0).Cells(21, 20).Value = ""
        Sheets(S0).Cells(21, 21).Value = ""
        Sheets(S0).Cells(21, 22).Value = ""
        'INT
        Sheets(S0).Cells(22, 19).Value = ""
        Sheets(S0).Cells(22, 20).Value = ""
        Sheets(S0).Cells(22, 21).Value = ""
        Sheets(S0).Cells(22, 22).Value = ""
        'UER
        Sheets(S0).Cells(23, 19).Value = ""
        Sheets(S0).Cells(23, 20).Value = ""
        Sheets(S0).Cells(23, 21).Value = ""
        Sheets(S0).Cells(23, 22).Value = ""
        'DEP REL
        Sheets(S0).Cells(24, 19).Value = ""
        Sheets(S0).Cells(24, 20).Value = ""
        Sheets(S0).Cells(24, 21).Value = ""
        Sheets(S0).Cells(24, 22).Value = ""
        ' Utilizations
        Sheets(S0).Cells(22, 16).Value = ""
        Sheets(S0).Cells(23, 16).Value = ""
        Sheets(S0).Cells(31, 9).Value = ""
        'SE
        Sheets(S0).Cells(25, 19).Value = ""
        Sheets(S0).Cells(25, 20).Value = ""
        Sheets(S0).Cells(25, 21).Value = ""
        Sheets(S0).Cells(25, 22).Value = ""

    End If
    
End Sub

Sub GetFleetSimpleStatistics(Optional AirlineNameForCG As String)
    
    '================================
    '   Last updated: 10/04/2015
    ' Code by TCS & Asko Soimakallio
    '================================
    
    S0 = "Supporting Data"
    S1 = "Fleet Simple Statistics"
    
    Dim sqlCmd As String
    Dim RecordSet  As ADODB.RecordSet
    
    'Comparision grp changes included.
    If AirlineNameForCG = "" Then
        sqlCmd = " SELECT CONVERT(VARCHAR,CAST([YEAR MONTH] + '01' AS DATE),101) as [YEAR MONTH],[Average Aircraft Count],[% of Hours/Cycles estimated],[Engine Model]," _
                    & "[Engine Hours 12M],[Engine Cycles 12M],[Aircraft Departures 12M],[Flight Leg 12M],[Total Removal Count 12M]," _
                    & "[Total Removal Rate 12M] , [Total Planned Removal Count 12M], [Total Planned Removal Rate 12M], [Total Unplanned Removal Count 12M], [Total Unplanned Removal Rate 12M], [Total Removal Count w/o customer error 12M], [Total Removal Rate w/o customer error 12M], [Total Basic Removal Count 12M], [Total Basic Removal Rate 12M], [Basic Planned Removal Count 12M], [Basic Planned Removal Rate 12M], [Basic Unplanned Removal Count 12M], [Basic Unplanned Removal Rate 12M], [Total Shop Visit Count 12M], [Total Shop Visit Rate 12M], [Basic Shop Visit Count 12M], [Basic Shop Visit Rate 12M], [Basic Unplanned Shop Visit Count 12M], [Basic Unplanned Shop Visit Rate 12M], [Total Unplanned Shop Visit Count 12M]," _
                    & "[Total Unplanned Shop Visit Rate 12M],[Total Avg Time since Shop Visit 12M],[Total Avg Cycles since Shop Visit 12M],[Total IFSD Count 12M],[Total IFSD Rate 12M],[Basic IFSD Count 12M],[Basic IFSD Rate 12M],[Total TOA Count 12M],[Total TOA Rate 12M],[Basic TOA Count 12M],[Basic TOA Rate 12M],[Total Del Canc Count 12M],[Total Dep Reliability 12M],[Basic Del Canc Count 12M],[Basic Dep Reliability 12M],[Total Interrupt Count 12M],[Total Interruption Rate 12M],[Basic Interrupt Count 12M],[Basic Interruption Rate 12M],[Total Significant Event Count 12M],[Total Significant Event Rate 12M],[Basic Significant Event Count 12M],[Basic Significant Event Rate 12M],[Total Flight Disruption Count 12M],[Total Flight Disruption Rate 12M],[Basic Flight Disruption Count 12M],[Basic Flight Disruption Rate 12M] FROM FLEET_SIMPLE_STATISTICS  WHERE TPP_ID = " & TPP_ID & " order by YEAR(CONVERT(VARCHAR,CAST([YEAR MONTH] + '01' AS DATE),101)) DESC"
     Else
         sqlCmd = " SELECT CONVERT(VARCHAR,CAST([YEAR MONTH] + '01' AS DATE),101) as [YEAR MONTH],[Average Aircraft Count],[% of Hours/Cycles estimated],[Engine Model]," _
                    & "[Engine Hours 12M],[Engine Cycles 12M],[Aircraft Departures 12M],[Flight Leg 12M],[Total Removal Count 12M]," _
                    & "[Total Removal Rate 12M] , [Total Planned Removal Count 12M], [Total Planned Removal Rate 12M], [Total Unplanned Removal Count 12M], [Total Unplanned Removal Rate 12M], [Total Removal Count w/o customer error 12M], [Total Removal Rate w/o customer error 12M], [Total Basic Removal Count 12M], [Total Basic Removal Rate 12M], [Basic Planned Removal Count 12M], [Basic Planned Removal Rate 12M], [Basic Unplanned Removal Count 12M], [Basic Unplanned Removal Rate 12M], [Total Shop Visit Count 12M], [Total Shop Visit Rate 12M], [Basic Shop Visit Count 12M], [Basic Shop Visit Rate 12M], [Basic Unplanned Shop Visit Count 12M], [Basic Unplanned Shop Visit Rate 12M], [Total Unplanned Shop Visit Count 12M]," _
                    & "[Total Unplanned Shop Visit Rate 12M],[Total Avg Time since Shop Visit 12M],[Total Avg Cycles since Shop Visit 12M],[Total IFSD Count 12M],[Total IFSD Rate 12M],[Basic IFSD Count 12M],[Basic IFSD Rate 12M],[Total TOA Count 12M],[Total TOA Rate 12M],[Basic TOA Count 12M],[Basic TOA Rate 12M],[Total Del Canc Count 12M],[Total Dep Reliability 12M],[Basic Del Canc Count 12M],[Basic Dep Reliability 12M],[Total Interrupt Count 12M],[Total Interruption Rate 12M],[Basic Interrupt Count 12M],[Basic Interruption Rate 12M],[Total Significant Event Count 12M],[Total Significant Event Rate 12M],[Basic Significant Event Count 12M],[Basic Significant Event Rate 12M],[Total Flight Disruption Count 12M],[Total Flight Disruption Rate 12M],[Basic Flight Disruption Count 12M],[Basic Flight Disruption Rate 12M] FROM FLEET_SIMPLE_STATISTICS  WHERE TPP_ID = " & TPP_ID & " AND AIRLINE_NAME IN (" & AirlineNameForCG & ")  order by YEAR(CONVERT(VARCHAR,CAST([YEAR MONTH] + '01' AS DATE),101)) DESC"
    End If
    'Set RecordSet = New ADODB.RecordSet
    'RecordSet.Open sqlCmd, conn
    
    Dim cmd As New ADODB.Command
    cmd.ActiveConnection = conn
    cmd.CommandTimeout = 0
    cmd.CommandType = adCmdText
    cmd.CommandText = sqlCmd
    Set RecordSet = cmd.Execute(, , adCmdText)
    
    RCC = Sheets(S1).Cells(Rows.Count, 1).End(xlUp).Row
    If RCC > 3 Then Sheets(S1).Rows("4:" & RCC).Clear
    
    Sheets(S1).Cells(4, 1).CopyFromRecordset RecordSet
    
    RecordSet.Close
    
    SS2rc = Sheets(S1).Cells(Rows.Count, 1).End(xlUp).Row
    SS2cc = Sheets(S1).Cells(3, Columns.Count).End(xlToLeft).Column
    
    If SS2rc > 3 Then
        SS2array = Sheets(S1).Range(Sheets(S1).Cells(3, 1), Sheets(S1).Cells(SS2rc, SS2cc)).Value
        Sheets(S1).Range(Sheets(S1).Cells(3, 1), Sheets(S1).Cells(SS2rc, SS2cc)).Value = SS2array
        Sheets(S1).Range(Sheets(S1).Cells(4, 1), Sheets(S1).Cells(SS2rc, SS2cc)).Sort key1:=Sheets(S1).Range(Sheets(S1).Cells(4, 1), Sheets(S1).Cells(SS2rc, 1)), order1:=xlDescending
        SS2array = Sheets(S1).Range(Sheets(S1).Cells(3, 1), Sheets(S1).Cells(SS2rc, SS2cc)).Value
        Sheets(S1).Range(Sheets(S1).Cells(3, 1), Sheets(S1).Cells(SS2rc, SS2cc)).EntireColumn.AutoFit
        Sheets(S1).Range(Sheets(S1).Cells(3, 1), Sheets(S1).Cells(SS2rc, SS2cc)).HorizontalAlignment = xlCenter
        
        'IFSD
        Sheets(S0).Cells(13, 22).Value = SS2array(2, 33)
        Sheets(S0).Cells(20, 23).Value = SS2array(2, 34)
        Sheets(S0).Cells(13, 23).Value = SS2array(2, 35)
        Sheets(S0).Cells(20, 24).Value = SS2array(2, 36)
        
        'TOA
        Sheets(S0).Cells(14, 22).Value = SS2array(2, 37)
        Sheets(S0).Cells(21, 23).Value = SS2array(2, 38)
        Sheets(S0).Cells(14, 23).Value = SS2array(2, 39)
        Sheets(S0).Cells(21, 24).Value = SS2array(2, 40)
        
        'INT
        Sheets(S0).Cells(15, 22).Value = SS2array(2, 45)
        Sheets(S0).Cells(22, 23).Value = SS2array(2, 46)
        Sheets(S0).Cells(15, 23).Value = SS2array(2, 47)
        Sheets(S0).Cells(22, 24).Value = SS2array(2, 48)
        
        'UER
        Sheets(S0).Cells(16, 22).Value = SS2array(2, 13)
        Sheets(S0).Cells(23, 23).Value = SS2array(2, 14)
        Sheets(S0).Cells(16, 23).Value = SS2array(2, 21)
        Sheets(S0).Cells(23, 24).Value = SS2array(2, 22)
        
        'DEP REL
        Sheets(S0).Cells(17, 22).Value = SS2array(2, 41)
        Sheets(S0).Cells(24, 23).Value = SS2array(2, 42)
        Sheets(S0).Cells(17, 23).Value = SS2array(2, 43)
        Sheets(S0).Cells(24, 24).Value = SS2array(2, 44)
        
        ' Utilizations
        Sheets(S0).Cells(20, 16).Value = SS2array(2, 5)
        Sheets(S0).Cells(21, 16).Value = SS2array(2, 7)
                        
        'SE
        Sheets(S0).Cells(18, 22).Value = SS2array(2, 49)
        Sheets(S0).Cells(25, 23).Value = SS2array(2, 50)
        Sheets(S0).Cells(18, 23).Value = SS2array(2, 51)
        Sheets(S0).Cells(25, 24).Value = SS2array(2, 52)
                        
    Else
        'IFSD
        Sheets(S0).Cells(13, 22).Value = ""
        Sheets(S0).Cells(20, 23).Value = ""
        Sheets(S0).Cells(13, 23).Value = ""
        Sheets(S0).Cells(20, 24).Value = ""
        'TOA
        Sheets(S0).Cells(14, 22).Value = ""
        Sheets(S0).Cells(21, 23).Value = ""
        Sheets(S0).Cells(14, 23).Value = ""
        Sheets(S0).Cells(21, 24).Value = ""
        'INT
        Sheets(S0).Cells(15, 22).Value = ""
        Sheets(S0).Cells(22, 23).Value = ""
        Sheets(S0).Cells(15, 23).Value = ""
        Sheets(S0).Cells(22, 24).Value = ""
        'UER
        Sheets(S0).Cells(16, 22).Value = ""
        Sheets(S0).Cells(23, 23).Value = ""
        Sheets(S0).Cells(16, 23).Value = ""
        Sheets(S0).Cells(23, 24).Value = ""
        'DEP REL
        Sheets(S0).Cells(17, 22).Value = ""
        Sheets(S0).Cells(24, 23).Value = ""
        Sheets(S0).Cells(17, 23).Value = ""
        Sheets(S0).Cells(24, 24).Value = ""
        ' Utilizations
        Sheets(S0).Cells(20, 16).Value = ""
        Sheets(S0).Cells(21, 16).Value = ""
        'SE
        Sheets(S0).Cells(18, 22).Value = ""
        Sheets(S0).Cells(25, 23).Value = ""
        Sheets(S0).Cells(18, 23).Value = ""
        Sheets(S0).Cells(25, 24).Value = ""
    
    End If

End Sub

Sub GetFleetCurrentEngineStatus(Optional AirlineNameForCG As String)
    
    '================================
    '   Last updated: 02/28/2018
    ' Code by TCS & Asko Soimakallio
    '================================
    
    S1 = "Fleet Current Engine Status"
    
    Dim sqlCmd As String
    Dim RecordSet  As ADODB.RecordSet
    
    'Comparision grp changes included.
    If AirlineNameForCG = "" Then
        sqlCmd = " SELECT Engine_Serial_Number,Airline_Short_Name,[Sum(Engine_Time_Since_New)],[Sum(Engine_Cycles_Since_New)],Engine_Time_Since_Shop_Visit,Engine_Cycles_Since_Shop_Visit,Engine_Time_Since_Instal  , Engine_Cycles_Since_Instal  , Engine_Times_Since_FPR, Cycle_Times_Since_FPR FROM FLEET_CURRENT_ENGINE_STATUS  WHERE TPP_ID = " & TPP_ID
    Else
        sqlCmd = " SELECT Engine_Serial_Number,Airline_Short_Name,[Sum(Engine_Time_Since_New)],[Sum(Engine_Cycles_Since_New)],Engine_Time_Since_Shop_Visit,Engine_Cycles_Since_Shop_Visit,Engine_Time_Since_Instal  , Engine_Cycles_Since_Instal  , Engine_Times_Since_FPR, Cycle_Times_Since_FPR FROM FLEET_CURRENT_ENGINE_STATUS  WHERE TPP_ID = " & TPP_ID & " AND AIRLINE_NAME IN (" & AirlineNameForCG & ") "
    End If
    
    Dim cmd As New ADODB.Command
    cmd.ActiveConnection = conn
    cmd.CommandTimeout = 0
    cmd.CommandType = adCmdText
    cmd.CommandText = sqlCmd
    Set RecordSet = cmd.Execute(, , adCmdText)

    'Set RecordSet = New ADODB.RecordSet
    'RecordSet.Open sqlCmd, conn
    
    RCC = Sheets(S1).Cells(Rows.Count, 1).End(xlUp).Row
    If RCC > 4 Then Sheets(S1).Rows("1:" & RCC).Clear
    
    Sheets("Fleet Current Engine Status").Cells(5, 1).Columns(1).NumberFormat = "@"
    Sheets("Fleet Current Engine Status").Cells(5, 1).CopyFromRecordset RecordSet
    
    RecordSet.Close
    
End Sub

Sub GetAirlineCurrentEngineStatus()
    
    '================================
    '   Last updated: 02/28/2018
    ' Code by TCS & Asko Soimakallio
    '================================
    
    S0 = "Supporting Data"
    S1 = "Airline Current Engine Status"
    
    Dim sqlCmd As String
    Dim RecordSet  As ADODB.RecordSet
    
    sqlCmd = " SELECT [Engine_Serial_Number],[Airline_Short_Name],[Airline_Name],[Engine_Model],[Engine_Series],[Engine_Thrust],CONVERT(VARCHAR(10),Install_Removal_Date,101)[Install_Removal_Date],CONVERT(VARCHAR(10),Last_Installation_Date,101)[Last_Installation_Date],[Aircraft_Type],[Aircraft_Tail_Number], "
    sqlCmd = sqlCmd & " CONVERT(VARCHAR(10),Engine_Delivery_Date,101)[Engine_Delivery_Date],CONVERT(INT,ISNULL([Engine_Position],0))[Engine_Position],[Engine_Status],CONVERT(INT,ISNULL([Sum(Engine_Time_Since_New)],0))[Sum(Engine_Time_Since_New)],CONVERT(INT,ISNULL([Sum(Engine_Cycles_Since_New)],0))[Sum(Engine_Cycles_Since_New)], "
    sqlCmd = sqlCmd & " CONVERT(decimal(10,2),ISNULL([Sum(Flight_Leg_Since_New)],0))[Sum(Flight_Leg_Since_New)],CONVERT(INT,ISNULL([Sum(Engine_Time_Since_Instal)],0))[Sum(Engine_Time_Since_Instal)],CONVERT(INT,ISNULL([Sum(Engine_Cycles_Since_Instal)],0))[Sum(Engine_Cycles_Since_Instal)], "
    sqlCmd = sqlCmd & " CONVERT(decimal(10,2),ISNULL([Sum(Flight_Leg_since_Install)],0))[Sum(Flight_Leg_since_Install)],CONVERT(INT,ISNULL([Engine_Time_Since_Shop_Visit],0))[Engine_Time_Since_Shop_Visit],  CONVERT(INT,ISNULL([Engine_Cycles_Since_Shop_Visit],0)) [Engine_Cycles_Since_Shop_Visit] ,CONVERT(DECIMAL(10,2),ISNULL([Flight_Leg_Since_Last_SV],0)) [Flight_Leg_Since_Last_SV],  "
    sqlCmd = sqlCmd & " [Hrs_And_Cyc_Data_Actual_Or_Est], CONVERT(VARCHAR(10),[Utilization_Last_Updated_Date],101) [Utilization_Last_Updated_Date], [N1_Modifier],CONVERT(INT,ISNULL([Current_Shop_Visit_Count],0)) [Current_Shop_Visit_Count],CONVERT(INT,ISNULL([Current_Removal_Count],0)) [Current_Removal_Count], CONVERT(INT,ISNULL([Sum(Engine_Times_Since_FPR)],0))[Sum(Engine_Times_Since_FPR)],  "
    sqlCmd = sqlCmd & " CONVERT(INT,ISNULL([Sum(Cycle_Times_Since_FPR)],0))[Sum(Cycle_Times_Since_FPR)],CONVERT(VARCHAR(10),[Last_Shop_Visit_Date],101) [Last_Shop_Visit_Date],CONVERT(VARCHAR(10),[Engine_Delivery_Cust_Code],101) [Engine_Delivery_Cust_Code], [Current_Owner], CONVERT(VARCHAR(10),[Aircraft_Delivery_Date],101)[Aircraft_Delivery_Date], [Aircraft_Production_No], "
    sqlCmd = sqlCmd & " [Aircraft_Status], CONVERT(INT,ISNULL([Sum(Aircraft_Time_Since_New)],0))[Sum(Aircraft_Time_Since_New)], CONVERT(INT,ISNULL([Sum(Aircraft_Cycles_Since_New)],0))[Sum(Aircraft_Cycles_Since_New)], [Airline_Region], [Airline_Zone], [Country],CONVERT(VARCHAR(10),[Warehouse_Last_Refresh_Date],101) [Warehouse_Last_Refresh_Date], [Engine_Serviceability] FROM AIRLINE_CURRENT_ENGINE_STATUS  WHERE TPP_ID = " & TPP_ID
               
    'Set RecordSet = New ADODB.RecordSet
    'RecordSet.Open sqlCmd, conn
    
    Dim cmd As New ADODB.Command
    cmd.ActiveConnection = conn
    cmd.CommandTimeout = 0
    cmd.CommandType = adCmdText
    cmd.CommandText = sqlCmd
    Set RecordSet = cmd.Execute(, , adCmdText)

    RCC = Sheets(S1).Cells(Rows.Count, 1).End(xlUp).Row
    If RCC > 4 Then Sheets(S1).Rows("5:" & RCC).Clear
    
    Sheets("Airline Current Engine Status").Columns(1).NumberFormat = "@"
    Sheets("Airline Current Engine Status").Cells(5, 1).CopyFromRecordset RecordSet
    
    RecordSet.Close
    
    CESrc2 = Sheets(S1).Cells(Rows.Count, 1).End(xlUp).Row
    CEScc2 = Sheets(S1).Cells(4, Columns.Count).End(xlToLeft).Column

    SVcountCol = 26
    TSNcol = 14
    CSNcol = 15
    TSFPRcol = 28
    CSFPRcol = 29
    TailCol = 10
    FirstRunMax1 = 0
    FirstRunMax2 = 0
    FleetLead1 = 0
    FleetLead2 = 0
    SparesCount = 0
    RestoredMax1 = 0
    RestoredMax2 = 0

    If CESrc2 > 4 Then
        CESarray = Sheets(S1).Range(Sheets(S1).Cells(5, 1), Sheets(S1).Cells(CESrc2, CEScc2)).Value

        For j = 1 To UBound(CESarray)
            If CESarray(j, 1) <> "" Then
                If InStr(CESarray(j, 1), "_") > 0 Then
                    CESarray(j, 1) = Val(Left(CESarray(j, 1), InStr(CESarray(j, 1), "_") - 1))
                Else
                    CESarray(j, 1) = CESarray(j, 1)
                End If
            End If
            
            If IsNumeric(CESarray(j, CSFPRcol)) And IsNumeric(CESarray(j, CSNcol)) And IsNumeric(CESarray(j, TSFPRcol)) Then
                If CESarray(j, CSFPRcol) < CESarray(j, CSNcol) Then
                    If CESarray(j, TSFPRcol) > RestoredMax1 Then RestoredMax1 = CESarray(j, TSFPRcol)
                    If CESarray(j, CSFPRcol) > RestoredMax2 Then RestoredMax2 = CESarray(j, CSFPRcol)
                End If
            End If
            If IsNumeric(CESarray(j, TSNcol)) And IsNumeric(CESarray(j, CSNcol)) Then
                If CESarray(j, TSNcol) > FleetLead1 Then FleetLead1 = CESarray(j, TSNcol)
                If CESarray(j, CSNcol) > FleetLead2 Then FleetLead2 = CESarray(j, CSNcol)
            End If
            If CESarray(j, TailCol) = "" Then SparesCount = SparesCount + 1
        Next j

        Sheets(S0).Cells(34, 8).Value = FleetLead1
        Sheets(S0).Cells(35, 8).Value = FleetLead2
        
        If RestoredMax1 <> 0 Then
            Sheets(S0).Cells(34, 9).Value = RestoredMax1
        Else
            Sheets(S0).Cells(34, 9).Value = ""
        End If
        If RestoredMax2 <> 0 Then
            Sheets(S0).Cells(35, 9).Value = RestoredMax2
        Else
            Sheets(S0).Cells(35, 9).Value = ""
        End If
        
        Sheets("Airline Current Engine Status").Columns(1).NumberFormat = "@"
        Sheets(S1).Range(Sheets(S1).Cells(5, 1), Sheets(S1).Cells(CESrc2, CEScc2)).Value = CESarray
        Sheets(S1).Range(Sheets(S1).Cells(5, 1), Sheets(S1).Cells(CESrc2, CEScc2)).Sort key1:=Sheets(S1).Range(Sheets(S1).Cells(5, 1), Sheets(S1).Cells(CESrc2, 1)), order1:=xlAscending
    End If
    
End Sub

Sub GetReliabilityAndDistributionData()

    Dim Mode
    Dim Dummy
    Dim S0
    S0 = "Reliability and Forecast"
    'TransferMethod
    Mode = "IFSD"
    'Dummy = RelFcChartUpdater(Mode)
    Sheets(S0).Cells(3, 1).Value = AirlineName & " " & EngineModel & " Reliability Summary and Forecast"
    
    Sheets(S0).ChartObjects("TrendChart").Chart.SeriesCollection(1).Name = Sheets(S0).Cells(14, 9).Value & " Total"
    Sheets(S0).ChartObjects("TrendChart").Chart.SeriesCollection(2).Name = Sheets(S0).Cells(18, 9).Value & " Total"
    Sheets(S0).ChartObjects("TrendChart").Chart.SeriesCollection(3).Name = Sheets(S0).Cells(14, 9).Value & " Basic"
    Sheets(S0).ChartObjects("TrendChart").Chart.SeriesCollection(4).Name = Sheets(S0).Cells(18, 9).Value & " Basic"
    
    Sheets(S0).ChartObjects("TrendChart").Chart.ChartTitle.Text = "Total / Basic " & Mode & " Reliability vs. " & Sheets(S0).Cells(18, 9).Value & vbCr & DateFrom & "  -  " & DateTo
    
    Sheets(S0).ChartObjects("AirlinePareto").Chart.ChartTitle.Text = "Top 10 " & Sheets(S0).Cells(13, 9).Value & " " & Mode & " Event Drivers" & vbCr & DateFrom & "  -  " & DateTo
    Sheets(S0).ChartObjects("FleetPareto").Chart.ChartTitle.Text = "Top 10 " & Sheets(S0).Cells(18, 9).Value & " " & Mode & " Event Drivers" & vbCr & DateFrom & "  -  " & DateTo

End Sub


'******** ALL 8 Tab Data PULL *****************************
    '================================
    ' Last updated: 12/20/2016
    ' Code by TCS & Asko Soimakallio
    '================================
'******** IFSD Tab *****************************

Sub GetDataFor_IFSD_FDM_EVENTS_T(Optional MONTHS As Variant, Optional AirlineNameForCG As String)
    
    Dim sqlCmd As String
    Dim RecordSet  As ADODB.RecordSet
    
    Dim WS_IFSD As Worksheet
    Set WS_IFSD = Sheets("IFSD Data")
    ReadConnectionXML
    OpenSQLConnection
    
    Dim FromDate As Date
    Dim ToDate As Date
       
    If MONTHS > 0 Then
        FromDate = DateAdd("m", -MONTHS, Date)
        ToDate = Date
    End If
    
    FDays_I = DatePart("d", FromDate)
    FromDate_I = DateAdd("d", -FDays_I + 1, FromDate)
    
    TDays_I = DatePart("d", ToDate)
    ToDate_I = DateAdd("d", -TDays_I, ToDate)

    'IFSD_TOP10_EVENTS_FLEET_DATA_T
    sqlCmd = ""
    
    If AirlineNameForCG = "" Then
        If MONTHS > 0 Then
            sqlCmd = " SELECT TOP 10 Component_Event_Driver,COUNT(Component_Event_Driver) FROM IFSD_TOP10_EVENTS_FLEET_DATA_T WHERE EVENT_DATE >= '" & FromDate & "' AND TPP_ID = " & TPP_ID & " GROUP BY Component_Event_Driver ORDER BY COUNT(Component_Event_Driver) DESC "
        Else
            sqlCmd = " SELECT TOP 10 Component_Event_Driver,COUNT(Component_Event_Driver) FROM IFSD_TOP10_EVENTS_FLEET_DATA_T WHERE  TPP_ID = " & TPP_ID & "  GROUP BY Component_Event_Driver ORDER BY COUNT(Component_Event_Driver) DESC "
        End If
     Else
        If MONTHS > 0 Then
            sqlCmd = " SELECT TOP 10 Component_Event_Driver,COUNT(Component_Event_Driver) FROM IFSD_TOP10_EVENTS_FLEET_DATA_T WHERE EVENT_DATE >= '" & FromDate & "' AND TPP_ID = " & TPP_ID & " AND AIRLINE_NAME IN (" & AirlineNameForCG & ") GROUP BY Component_Event_Driver ORDER BY COUNT(Component_Event_Driver) DESC "
        Else
            sqlCmd = " SELECT TOP 10 Component_Event_Driver,COUNT(Component_Event_Driver) FROM IFSD_TOP10_EVENTS_FLEET_DATA_T WHERE  TPP_ID = " & TPP_ID & " AND AIRLINE_NAME IN (" & AirlineNameForCG & ") GROUP BY Component_Event_Driver ORDER BY COUNT(Component_Event_Driver) DESC "
        End If
    End If
        
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    ClearCell "IFSD Data", "H6:I6"
    WS_IFSD.Cells(6, 8).CopyFromRecordset RecordSet
    RecordSet.Close
    
    'IFSD_TOP10_EVENTS_AIRLINE_DATA_T()
    sqlCmd = ""
    If MONTHS > 0 Then
        sqlCmd = " SELECT TOP 10 Component_Event_Driver,COUNT(Component_Event_Driver)  FROM IFSD_TOP10_EVENTS_AIRLINE_DATA_T  WHERE EVENT_DATE >= '" & FromDate & "' AND TPP_ID = " & TPP_ID & " GROUP BY Component_Event_Driver ORDER BY COUNT(Component_Event_Driver) DESC"
    Else
        sqlCmd = " SELECT TOP 10 Component_Event_Driver,COUNT(Component_Event_Driver)  FROM IFSD_TOP10_EVENTS_AIRLINE_DATA_T  WHERE  TPP_ID = " & TPP_ID & " GROUP BY Component_Event_Driver ORDER BY COUNT(Component_Event_Driver) DESC "
    End If
       
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    ClearCell "IFSD Data", "K6:L6"
    WS_IFSD.Cells(6, 11).CopyFromRecordset RecordSet
    RecordSet.Close
    
    'IFSD_TOP10_EVENTS_AIRLINE_DATA_T() ' 12 Months Basic
    dt = DateAdd("m", -12, ToDate_I)
    sqlCmd = ""
    sqlCmd = "SELECT TOP 10 Component_Event_Driver,COUNT(Component_Event_Driver)  FROM IFSD_TOP10_EVENTS_AIRLINE_DATA_T  "
    sqlCmd = sqlCmd & " WHERE EVENT_DATE >= '" & dt & "' "
    sqlCmd = sqlCmd & " AND EVENT_DATE <= '" & ToDate_I & "' "
    sqlCmd = sqlCmd & " AND UPPER(ENG_CAUSED_NON_ENG_CAUSED) ='BASIC' AND TPP_ID = " & TPP_ID & "  "
    sqlCmd = sqlCmd & " GROUP BY Component_Event_Driver ORDER BY COUNT(Component_Event_Driver) DESC  "
        
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    ClearCell "IFSD Data", "Q6:R6"
    WS_IFSD.Cells(6, 17).CopyFromRecordset RecordSet
    RecordSet.Close
    
    'IFSD_TOP10_EVENTS_AIRLINE_DATA_T() ' 12 Months Basic and Non Basic
    dt = DateAdd("m", -12, ToDate_I)
    sqlCmd = ""
    sqlCmd = "SELECT TOP 10 Component_Event_Driver,COUNT(Component_Event_Driver)  FROM IFSD_TOP10_EVENTS_AIRLINE_DATA_T  "
    sqlCmd = sqlCmd & " WHERE EVENT_DATE >= '" & dt & "' "
    sqlCmd = sqlCmd & " AND EVENT_DATE <= '" & ToDate_I & "' "
    sqlCmd = sqlCmd & " AND TPP_ID = " & TPP_ID & "  "
    sqlCmd = sqlCmd & " GROUP BY Component_Event_Driver ORDER BY COUNT(Component_Event_Driver) DESC  "
        
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    ClearCell "IFSD Data", "N6:O6"
    WS_IFSD.Cells(6, 14).CopyFromRecordset RecordSet
    RecordSet.Close
     
    'IFSD_FDM_EVENTS_T
    sqlCmd = ""
    sqlCmd = " SELECT DISTINCT ESN , CONVERT(VARCHAR(10),EVENT.EVENT_DATE,105) EVENT_DATE , EVENT.EVENT_TYPE ,  EVENT.COMPONENT_EVENT_DRIVER ,  TAIL_NUMBER  ,  AIRCRAFT_TYPE , EVENT.ENGINE_MODEL ,TSN ,CSN ,TSV ,CSV ,FDM_EVENT_NUMBER  , EVENT.EVENT_CAUSE AS RATE  ,BOTTOM_TASK_NUM  ,  ROUND(RG.CUMULATIVE_UTILIZATION,3) AS CUMULATIVE_UTILIZATION,   CASE    WHEN  ROUND(COALESCE(SUM (RG.CUMULATIVE_UTILIZATION ) OVER (ORDER BY EVENT.EVENT_DATE ASC ROWS BETWEEN 1 PRECEDING    AND 1 PRECEDING),0),3) = 0 THEN '0'   ELSE     (RG.CUMULATIVE_UTILIZATION - ROUND(COALESCE(SUM (RG.CUMULATIVE_UTILIZATION ) OVER (ORDER BY EVENT.EVENT_DATE ASC ROWS BETWEEN 1 PRECEDING    AND 1 PRECEDING),0),3))   END as ELAPSED_HOURS_BTW_EVENTS  ,  ROW_NUMBER() OVER (ORDER BY EVENT.EVENT_DATE) ROWNUMBER  FROM   ALL_FDM_EVENTS_T EVENT  INNER JOIN PFM_RG_CHART_T RG ON RG.ENGINE_MODEL = EVENT.ENGINE_MODEL AND RG.EVENT_TYPE = EVENT.EVENT_TYPE AND  RG.COMPONENT_EVENT_DRIVER = EVENT.COMPONENT_EVENT_DRIVER "
    sqlCmd = sqlCmd & " AND RG.EVENT_DATE = EVENT.EVENT_DATE AND RG.ENGINE_SERIALNO = EVENT.ESN AND RG.EVENT_ID = EVENT.EVENT_ID  AND UPPER(RG.RATE) = CASE WHEN UPPER(EVENT.EVENT_CAUSE) ='NON-BASIC' THEN 'TOTAL' ELSE UPPER(EVENT.EVENT_CAUSE) END AND EVENT.TPP_ID = RG.TPP_ID"
    sqlCmd = sqlCmd & " WHERE EVENT.EVENT_TYPE = 'IFSD' AND EVENT.TPP_ID = " & TPP_ID & "  ORDER BY ROWNUMBER DESC "
        
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    ClearCell "IFSD Data", "B26:R26"
   
    WS_IFSD.Cells(26, 2).CopyFromRecordset RecordSet
    RecordSet.Close
    
    'IFSD_CalculationData
    sqlCmd = ""
    sqlCmd = " SELECT CONVERT(VARCHAR,CAST(AIR.[YEAR MONTH] + '01' AS DATE),101) as [YEAR MONTH],AIR.[Total IFSD Rate 12M],AIR.[Basic IFSD Rate 12M],FLEET.[Total IFSD Rate 12M],FLEET.[Basic IFSD Rate 12M] "
    sqlCmd = sqlCmd & " from [FLEET_SIMPLE_STATISTICS] FLEET join [AIRLINE_SIMPLE_STATISTICS] AIR  ON AIR.[Engine Model] = FLEET.[Engine Model] AND AIR.[Year Month] = FLEET.[Year Month] AND AIR.TPP_ID = FLEET.TPP_ID AND  AIR.TPP_ID = " & TPP_ID
    
    If MONTHS > 0 Then
        Days = DatePart("d", FromDate)
        FromDate = DateAdd("m", -MONTHS, Date)
        sqlCmd = sqlCmd & " WHERE CONVERT(VARCHAR,CAST(AIR.[YEAR MONTH] + '01' AS DATE),101) >= Cast('" & FromDate & "' as Date)"
    End If
        
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    ClearCell "IFSD Data", "T26:X26"
    WS_IFSD.Cells(26, 20).CopyFromRecordset RecordSet
    RecordSet.Close
    
    'IFSD RG Chart Data
    
    sqlCmd = ""
    If MONTHS > 0 Then
        sqlCmd = " SELECT DISTINCT  (SELECT  '" & FromDate & "'  ) AS DATEFROM,(SELECT  '" & ToDate & "' ) AS DATETO,(SELECT COUNT (*) FROM ( SELECT DISTINCT RG.EVENT_ID     FROM [DBO].[PFM_RG_CHART_T] RG  JOIN [ALL_FDM_EVENTS_T] EVE     ON EVE.ESN = RG.ENGINE_SERIALNO    AND EVE.EVENT_ID = RG.EVENT_ID  AND EVE.ENGINE_MODEL = RG.ENGINE_MODEL  AND EVE.TPP_ID = RG.TPP_ID WHERE EVE.EVENT_TYPE='IFSD'  AND EVE.TPP_ID = " & TPP_ID & " )E )AS NO_OF_EVENTS"
    Else
        sqlCmd = " SELECT DISTINCT  (SELECT  DISTINCT  CONVERT(VARCHAR,DATE_FROM,101)DATE_FROM FROM INPUT_PARAMETERS_T  WHERE TPP_ID = " & TPP_ID & ") AS DATEFROM,(SELECT  DISTINCT CONVERT(VARCHAR,DATE_TO,101)DATE_TO FROM INPUT_PARAMETERS_T WHERE TPP_ID = " & TPP_ID & ") AS DATETO,(SELECT COUNT (*) FROM ( SELECT DISTINCT RG.EVENT_ID     FROM [DBO].[PFM_RG_CHART_T] RG  JOIN [ALL_FDM_EVENTS_T] EVE     ON EVE.ESN = RG.ENGINE_SERIALNO    AND EVE.EVENT_ID = RG.EVENT_ID  AND EVE.ENGINE_MODEL = RG.ENGINE_MODEL  AND EVE.TPP_ID = RG.TPP_ID WHERE EVE.EVENT_TYPE='IFSD'  AND EVE.TPP_ID = " & TPP_ID & " )E )AS NO_OF_EVENTS"
    End If
 
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    ClearCell "IFSD Data", "C5:C13"
    WS_IFSD.Cells(1, 27).CopyFromRecordset RecordSet
    RecordSet.Close
    
    sqlCmd = "SELECT TOP 1 'HRS' SELECTED_MEASURES,ISNULL(INTERCEPT,0) RG_ALPHA,  ISNULL(CUST_SLOPE,0) RG_BETA,    ISNULL(CUST_R2,0) R_POWER2,     ISNULL(CUST_INSTANTANEOUS_RATE,0) INST_RATE,    ISNULL(CUST_12M_ROLLING_RATE,0) MO12_RATE   FROM [DBO].[PFM_RG_CHART_T] "
    sqlCmd = sqlCmd & " WHERE EVENT_TYPE= 'IFSD'  AND  TPP_ID = " & TPP_ID
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    If RecordSet.RecordCount > 0 Then
        WS_IFSD.Cells(1, 30).CopyFromRecordset RecordSet
    Else
        RecordSet.Close
        RecordSet.Open "SELECT TOP 1 'HRS' SELECTED_MEASURES,0 , 0, 0, 0, 0  ", conn
        WS_IFSD.Cells(1, 30).CopyFromRecordset RecordSet
    End If
    
    'HYPOTHETICAL DATA
    sqlCmd = ""
    sqlCmd = " SELECT TOP 1  CUMULATIVE_UTILIZATION , '',(SELECT MAX(ROWNUMBER) + 1 FROM(SELECT DISTINCT ESN ,  ROW_NUMBER() OVER (ORDER BY EVENT.EVENT_DATE) ROWNUMBER  FROM   ALL_FDM_EVENTS_T EVENT  INNER JOIN PFM_RG_CHART_T RG ON RG.ENGINE_MODEL = EVENT.ENGINE_MODEL AND RG.EVENT_TYPE = EVENT.EVENT_TYPE AND RG.EVENT_DATE = EVENT.EVENT_DATE AND RG.ENGINE_SERIALNO = EVENT.ESN AND RG.EVENT_ID = EVENT.EVENT_ID AND RG.TPP_ID =  EVENT.TPP_ID AND UPPER(RG.RATE) = CASE WHEN UPPER(EVENT.EVENT_CAUSE) ='NON-BASIC' THEN 'TOTAL' ELSE UPPER(EVENT.EVENT_CAUSE) END WHERE EVENT.EVENT_TYPE = 'IFSD'  AND EVENT.TPP_ID =  " & TPP_ID & " ) E ) AS COUNTS FROM PFM_RG_CHART_T WHERE EVENT_TYPE = 'IFSD'  AND EVENT_ID = 0 AND TPP_ID = " & TPP_ID & " ORDER BY CUST_EVENT_COUNT DESC"

    WS_IFSD.Cells(24, 16) = ""
    WS_IFSD.Cells(24, 18) = ""
    
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    WS_IFSD.Cells(24, 16).CopyFromRecordset RecordSet
    RecordSet.Close
    
    WS_IFSD.Range("AA1:AI1").Copy
    WS_IFSD.Range("C5:C13").PasteSpecial Transpose:=True
    ClearCell "IFSD Data", "AA1:AI8"
    WS_IFSD.Range("C5:C13").Font.Size = 8
    WS_IFSD.Range("C5:C13").HorizontalAlignment = xlRight
    
    '=============================================================================
    S1 = "IFSD data"
    RC = Sheets(S1).Cells(Rows.Count, 20).End(xlUp).Row
    Dim Carray
    If RC > 25 Then
        Carray = Sheets(S1).Range(Sheets(S1).Cells(26, 20), Sheets(S1).Cells(RC, 20)).Value
        Sheets(S1).Range(Sheets(S1).Cells(26, 20), Sheets(S1).Cells(RC, 20)).Value = Carray
        If RC > 26 Then Erase Carray
    End If
        
End Sub
'******** IFSD Tab *****************************

'******** TOA Tab *****************************
Sub GetDataFor_TOA_FDM_EVENTS_T(Optional MONTHS As Variant, Optional AirlineNameForCG As String)
    Dim sqlCmd As String
    Dim RecordSet  As ADODB.RecordSet
   
    Dim WS_TOA As Worksheet
    Set WS_TOA = Sheets("TOA Data")
    ReadConnectionXML
    OpenSQLConnection
    
    Dim FromDate As Date
    Dim ToDate As Date
    
    If MONTHS > 0 Then
        FromDate = DateAdd("m", -MONTHS, Date)
        ToDate = Date
    End If
    
    FDays_I = DatePart("d", FromDate)
    FromDate_I = DateAdd("d", -FDays_I + 1, FromDate)
    
    TDays_I = DatePart("d", ToDate)
    ToDate_I = DateAdd("d", -TDays_I, ToDate)

    'TOA_TOP10_EVENTS_FLEET_DATA_T
    sqlCmd = ""
    
    If AirlineNameForCG = "" Then
        If MONTHS > 0 Then
            sqlCmd = " SELECT TOP 10 Component_Event_Driver,COUNT(Component_Event_Driver) FROM TOA_TOP10_EVENTS_FLEET_DATA_T   WHERE EVENT_DATE >= '" & FromDate & "'  AND TPP_ID = " & TPP_ID & "  GROUP BY Component_Event_Driver ORDER BY COUNT(Component_Event_Driver) DESC "
        Else
            sqlCmd = " SELECT TOP 10 Component_Event_Driver,COUNT(Component_Event_Driver) FROM TOA_TOP10_EVENTS_FLEET_DATA_T WHERE  TPP_ID = " & TPP_ID & "  GROUP BY Component_Event_Driver ORDER BY COUNT(Component_Event_Driver) DESC "
        End If
    Else
       If MONTHS > 0 Then
            sqlCmd = " SELECT TOP 10 Component_Event_Driver,COUNT(Component_Event_Driver) FROM TOA_TOP10_EVENTS_FLEET_DATA_T   WHERE EVENT_DATE >= '" & FromDate & "'  AND TPP_ID = " & TPP_ID & " AND AIRLINE_NAME IN (" & AirlineNameForCG & ") GROUP BY Component_Event_Driver ORDER BY COUNT(Component_Event_Driver) DESC "
        Else
            sqlCmd = " SELECT TOP 10 Component_Event_Driver,COUNT(Component_Event_Driver) FROM TOA_TOP10_EVENTS_FLEET_DATA_T WHERE  TPP_ID = " & TPP_ID & " AND AIRLINE_NAME IN (" & AirlineNameForCG & ") GROUP BY Component_Event_Driver ORDER BY COUNT(Component_Event_Driver) DESC "
        End If
    End If
     
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    ClearCell "TOA Data", "H6:I6"
    WS_TOA.Cells(6, 8).CopyFromRecordset RecordSet
    RecordSet.Close

    'TOA_TOP10_EVENTS_AIRLINE_DATA_T() 'ALL
    sqlCmd = ""
    If MONTHS > 0 Then
        sqlCmd = " SELECT TOP 10 Component_Event_Driver,COUNT(Component_Event_Driver)  FROM TOA_TOP10_EVENTS_AIRLINE_DATA_T   WHERE EVENT_DATE >= '" & FromDate & "' AND TPP_ID = " & TPP_ID & " GROUP BY Component_Event_Driver ORDER BY COUNT(Component_Event_Driver) DESC"
    Else
        sqlCmd = " SELECT TOP 10 Component_Event_Driver,COUNT(Component_Event_Driver)  FROM TOA_TOP10_EVENTS_AIRLINE_DATA_T WHERE TPP_ID = " & TPP_ID & " GROUP BY Component_Event_Driver ORDER BY COUNT(Component_Event_Driver) DESC"
    End If
    
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    ClearCell "TOA Data", "K6:L6"
    WS_TOA.Cells(6, 11).CopyFromRecordset RecordSet
    RecordSet.Close

   'TOA_TOP10_EVENTS_AIRLINE_DATA_T() ' 12 Months Basic
    dt = DateAdd("m", -12, ToDate_I)
    sqlCmd = ""

    sqlCmd = "SELECT TOP 10 Component_Event_Driver,COUNT(Component_Event_Driver)  FROM TOA_TOP10_EVENTS_AIRLINE_DATA_T  "
    sqlCmd = sqlCmd & " WHERE EVENT_DATE >= '" & dt & "' "
    sqlCmd = sqlCmd & " AND EVENT_DATE <= '" & ToDate_I & "' "
    sqlCmd = sqlCmd & " AND UPPER(ENG_CAUSED_NON_ENG_CAUSED) ='BASIC' AND TPP_ID = " & TPP_ID & "  "
    sqlCmd = sqlCmd & " GROUP BY Component_Event_Driver ORDER BY COUNT(Component_Event_Driver) DESC  "

    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    ClearCell "TOA Data", "Q6:R6"
    WS_TOA.Cells(6, 17).CopyFromRecordset RecordSet
    RecordSet.Close
    
    'TOA_TOP10_EVENTS_AIRLINE_DATA_T() ' 12 Months Basic and Non Basic
    dt = DateAdd("m", -12, ToDate_I)
    sqlCmd = ""
    sqlCmd = "SELECT TOP 10 Component_Event_Driver,COUNT(Component_Event_Driver)  FROM TOA_TOP10_EVENTS_AIRLINE_DATA_T  "
    sqlCmd = sqlCmd & " WHERE EVENT_DATE >= '" & dt & "' "
    sqlCmd = sqlCmd & " AND EVENT_DATE <= '" & ToDate_I & "' "
    sqlCmd = sqlCmd & " AND TPP_ID = " & TPP_ID & "  "
    sqlCmd = sqlCmd & " GROUP BY Component_Event_Driver ORDER BY COUNT(Component_Event_Driver) DESC  "
        
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    ClearCell "TOA Data", "N6:O6"
    WS_TOA.Cells(6, 14).CopyFromRecordset RecordSet
    RecordSet.Close
    
     'TOA_FDM_EVENTS_T
    
    sqlCmd = " SELECT DISTINCT ESN , CONVERT(VARCHAR(10),EVENT.EVENT_DATE,105) EVENT_DATE , EVENT.EVENT_TYPE ,  EVENT.COMPONENT_EVENT_DRIVER ,  TAIL_NUMBER  ,  AIRCRAFT_TYPE , EVENT.ENGINE_MODEL ,TSN ,CSN ,TSV ,CSV ,FDM_EVENT_NUMBER  , EVENT.EVENT_CAUSE AS RATE  ,BOTTOM_TASK_NUM  ,  ROUND(RG.CUMULATIVE_UTILIZATION,3) AS CUMULATIVE_UTILIZATION,   CASE    WHEN  ROUND(COALESCE(SUM (RG.CUMULATIVE_UTILIZATION ) OVER (ORDER BY EVENT.EVENT_DATE ASC ROWS BETWEEN 1 PRECEDING    AND 1 PRECEDING),0),3) = 0 THEN '0'   ELSE     (RG.CUMULATIVE_UTILIZATION - ROUND(COALESCE(SUM (RG.CUMULATIVE_UTILIZATION ) OVER (ORDER BY EVENT.EVENT_DATE ASC ROWS BETWEEN 1 PRECEDING    AND 1 PRECEDING),0),3))   END as ELAPSED_HOURS_BTW_EVENTS  ,  ROW_NUMBER() OVER (ORDER BY EVENT.EVENT_DATE) ROWNUMBER  FROM   ALL_FDM_EVENTS_T EVENT  INNER JOIN PFM_RG_CHART_T RG ON RG.ENGINE_MODEL = EVENT.ENGINE_MODEL AND RG.EVENT_TYPE = EVENT.EVENT_TYPE AND  RG.COMPONENT_EVENT_DRIVER = EVENT.COMPONENT_EVENT_DRIVER "
    sqlCmd = sqlCmd & " AND RG.EVENT_DATE = EVENT.EVENT_DATE AND RG.ENGINE_SERIALNO = EVENT.ESN AND RG.EVENT_ID = EVENT.EVENT_ID  AND UPPER(RG.RATE) = CASE WHEN UPPER(EVENT.EVENT_CAUSE) ='NON-BASIC' THEN 'TOTAL' ELSE UPPER(EVENT.EVENT_CAUSE) END  AND EVENT.TPP_ID = RG.TPP_ID "
    sqlCmd = sqlCmd & " WHERE EVENT.EVENT_TYPE = 'TOA' AND EVENT.TPP_ID = " & TPP_ID & "  ORDER BY ROWNUMBER DESC "
        
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    ClearCell "TOA Data", "B26:R26"
    WS_TOA.Cells(26, 2).CopyFromRecordset RecordSet
    RecordSet.Close

    'TOA_CalculationData
    sqlCmd = ""
    sqlCmd = " SELECT CONVERT(VARCHAR,CAST(AIR.[YEAR MONTH] + '01' AS DATE),101) as [YEAR MONTH],AIR.[Total TOA Rate 12M],AIR.[Basic TOA Rate 12M],FLEET.[Total TOA Rate 12M],FLEET.[Basic TOA Rate 12M] "
    sqlCmd = sqlCmd & " from [FLEET_SIMPLE_STATISTICS] FLEET join [AIRLINE_SIMPLE_STATISTICS] AIR  ON AIR.[Engine Model] = FLEET.[Engine Model] AND AIR.[Year Month] = FLEET.[Year Month]  AND AIR.TPP_ID = FLEET.TPP_ID AND  AIR.TPP_ID = " & TPP_ID
    If MONTHS > 0 Then
        Days = DatePart("d", FromDate)
        FromDate = DateAdd("m", -MONTHS, Date)
        sqlCmd = sqlCmd & " WHERE CONVERT(VARCHAR,CAST(AIR.[YEAR MONTH] + '01' AS DATE),101) >= Cast('" & FromDate & "' as Date)"
    End If
    
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    ClearCell "TOA Data", "T26:X26"
    WS_TOA.Cells(26, 20).CopyFromRecordset RecordSet
    RecordSet.Close
    
    'TOA RG Chart Data
    If MONTHS > 0 Then
        sqlCmd = " SELECT DISTINCT  (SELECT  '" & FromDate & "'  ) AS DATEFROM,(SELECT  '" & ToDate & "' ) AS DATETO,(SELECT COUNT (*) FROM ( SELECT DISTINCT RG.EVENT_ID     FROM [DBO].[PFM_RG_CHART_T] RG  JOIN [ALL_FDM_EVENTS_T] EVE     ON EVE.ESN = RG.ENGINE_SERIALNO    AND EVE.EVENT_ID = RG.EVENT_ID  AND EVE.ENGINE_MODEL = RG.ENGINE_MODEL  AND EVE.TPP_ID = RG.TPP_ID  WHERE EVE.EVENT_TYPE='TOA'  AND EVE.TPP_ID = " & TPP_ID & " )E )AS NO_OF_EVENTS"
    Else
        sqlCmd = " SELECT DISTINCT  (SELECT  DISTINCT  CONVERT(VARCHAR,DATE_FROM,101)DATE_FROM FROM INPUT_PARAMETERS_T WHERE TPP_ID = " & TPP_ID & ") AS DATEFROM,(SELECT  DISTINCT CONVERT(VARCHAR,DATE_TO,101)DATE_TO FROM INPUT_PARAMETERS_T WHERE TPP_ID = " & TPP_ID & ") AS DATETO,(SELECT COUNT (*) FROM ( SELECT DISTINCT RG.EVENT_ID     FROM [DBO].[PFM_RG_CHART_T] RG  JOIN [ALL_FDM_EVENTS_T] EVE     ON EVE.ESN = RG.ENGINE_SERIALNO    AND EVE.EVENT_ID = RG.EVENT_ID  AND EVE.ENGINE_MODEL = RG.ENGINE_MODEL  AND EVE.TPP_ID = RG.TPP_ID  WHERE EVE.EVENT_TYPE='TOA'   AND EVE.TPP_ID = " & TPP_ID & " )E )AS NO_OF_EVENTS"
    End If
    
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    ClearCell "TOA Data", "C5:C13"
    WS_TOA.Cells(1, 27).CopyFromRecordset RecordSet
    RecordSet.Close
    
    sqlCmd = "SELECT TOP 1 'DEP' SELECTED_MEASURES,ISNULL(INTERCEPT,0) RG_ALPHA,  ISNULL(CUST_SLOPE,0) RG_BETA,    ISNULL(CUST_R2,0) R_POWER2,     ISNULL(CUST_INSTANTANEOUS_RATE,0) INST_RATE,    ISNULL(CUST_12M_ROLLING_RATE,0) MO12_RATE   FROM [DBO].[PFM_RG_CHART_T]  "
    sqlCmd = sqlCmd & " WHERE EVENT_TYPE= 'TOA'   AND  TPP_ID = " & TPP_ID

    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    
    If RecordSet.RecordCount > 0 Then
        WS_TOA.Cells(1, 30).CopyFromRecordset RecordSet
    Else
        RecordSet.Close
        RecordSet.Open "SELECT TOP 1 'DEP' SELECTED_MEASURES,0 , 0, 0, 0, 0  ", conn
        WS_TOA.Cells(1, 30).CopyFromRecordset RecordSet
    End If
    
    'HYPOTHETICAL DATA
    sqlCmd = " SELECT TOP 1  CUMULATIVE_UTILIZATION , '',(SELECT MAX(ROWNUMBER) + 1 FROM(SELECT DISTINCT ESN ,  ROW_NUMBER() OVER (ORDER BY EVENT.EVENT_DATE) ROWNUMBER  FROM   ALL_FDM_EVENTS_T EVENT  INNER JOIN PFM_RG_CHART_T RG ON RG.ENGINE_MODEL = EVENT.ENGINE_MODEL AND RG.EVENT_TYPE = EVENT.EVENT_TYPE AND RG.EVENT_DATE = EVENT.EVENT_DATE AND RG.ENGINE_SERIALNO = EVENT.ESN AND RG.EVENT_ID = EVENT.EVENT_ID AND RG.TPP_ID =  EVENT.TPP_ID AND UPPER(RG.RATE) = CASE WHEN UPPER(EVENT.EVENT_CAUSE) ='NON-BASIC' THEN 'TOTAL' ELSE UPPER(EVENT.EVENT_CAUSE) END WHERE EVENT.EVENT_TYPE = 'TOA' AND EVENT.TPP_ID =  " & TPP_ID & " ) E ) AS COUNTS FROM PFM_RG_CHART_T WHERE EVENT_TYPE = 'TOA'  AND EVENT_ID = 0  AND TPP_ID = " & TPP_ID & " ORDER BY CUST_EVENT_COUNT DESC"
    
    WS_TOA.Cells(24, 16) = ""
    WS_TOA.Cells(24, 18) = ""
    
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    WS_TOA.Cells(24, 16).CopyFromRecordset RecordSet
    RecordSet.Close

    
    WS_TOA.Range("AA1:AI1").Copy
    WS_TOA.Range("C5:C13").PasteSpecial Transpose:=True
    ClearCell "TOA Data", "AA1:AI1"
    WS_TOA.Range("C5:C13").Font.Size = 8
    WS_TOA.Range("C5:C13").HorizontalAlignment = xlRight

    
   '=============================================================================
    S1 = "TOA data"
    RC = Sheets(S1).Cells(Rows.Count, 20).End(xlUp).Row
    Dim Carray
    If RC > 25 Then
        Carray = Sheets(S1).Range(Sheets(S1).Cells(26, 20), Sheets(S1).Cells(RC, 20)).Value
        Sheets(S1).Range(Sheets(S1).Cells(26, 20), Sheets(S1).Cells(RC, 20)).Value = Carray
        If RC > 26 Then Erase Carray
    End If

End Sub
'******** TOA Tab *****************************

'******** INT Tab *****************************
Sub GetDataFor_INT_FDM_EVENTS_T(Optional MONTHS As Variant, Optional AirlineNameForCG As String)
    Dim sqlCmd As String
    Dim RecordSet  As ADODB.RecordSet
    
    Dim WS_INT As Worksheet
    Set WS_INT = Sheets("Interruption Data")
    ReadConnectionXML
    OpenSQLConnection
    
    Dim FromDate As Date
    Dim ToDate As Date
    
    If MONTHS > 0 Then
        FromDate = DateAdd("m", -MONTHS, Date)
        ToDate = Date
    End If
    
    FDays_I = DatePart("d", FromDate)
    FromDate_I = DateAdd("d", -FDays_I + 1, FromDate)
    
    TDays_I = DatePart("d", ToDate)
    ToDate_I = DateAdd("d", -TDays_I, ToDate)

    'INT_TOP10_EVENTS_FLEET_DATA_T() 'ALL
    sqlCmd = ""
    
    If AirlineNameForCG = "" Then
        If MONTHS > 0 Then
            sqlCmd = " SELECT TOP 10 Component_Event_Driver,COUNT(Component_Event_Driver) FROM INT_TOP10_EVENTS_FLEET_DATA_T   WHERE EVENT_DATE >= '" & FromDate & "' AND TPP_ID = " & TPP_ID & " GROUP BY Component_Event_Driver ORDER BY COUNT(Component_Event_Driver) DESC "
        Else
            sqlCmd = " SELECT TOP 10 Component_Event_Driver,COUNT(Component_Event_Driver) FROM INT_TOP10_EVENTS_FLEET_DATA_T  WHERE TPP_ID = " & TPP_ID & " GROUP BY Component_Event_Driver ORDER BY COUNT(Component_Event_Driver) DESC "
        End If
    Else
        If MONTHS > 0 Then
            sqlCmd = " SELECT TOP 10 Component_Event_Driver,COUNT(Component_Event_Driver) FROM INT_TOP10_EVENTS_FLEET_DATA_T   WHERE EVENT_DATE >= '" & FromDate & "' AND TPP_ID = " & TPP_ID & " AND AIRLINE_NAME IN (" & AirlineNameForCG & ")  GROUP BY Component_Event_Driver ORDER BY COUNT(Component_Event_Driver) DESC "
        Else
            sqlCmd = " SELECT TOP 10 Component_Event_Driver,COUNT(Component_Event_Driver) FROM INT_TOP10_EVENTS_FLEET_DATA_T  WHERE TPP_ID = " & TPP_ID & " AND AIRLINE_NAME IN (" & AirlineNameForCG & ")  GROUP BY Component_Event_Driver ORDER BY COUNT(Component_Event_Driver) DESC "
        End If
    End If
    
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    ClearCell "Interruption Data", "H6:I6"
    WS_INT.Cells(6, 8).CopyFromRecordset RecordSet
    RecordSet.Close

    'INT_TOP10_EVENTS_AIRLINE_DATA_T() 'ALL
    sqlCmd = ""
    If MONTHS > 0 Then
        sqlCmd = " SELECT TOP 10 Component_Event_Driver,COUNT(Component_Event_Driver)  FROM INT_TOP10_EVENTS_AIRLINE_DATA_T   WHERE EVENT_DATE >= '" & FromDate & "' AND TPP_ID = " & TPP_ID & " GROUP BY Component_Event_Driver ORDER BY COUNT(Component_Event_Driver) DESC"
    Else
        sqlCmd = " SELECT TOP 10 Component_Event_Driver,COUNT(Component_Event_Driver)  FROM INT_TOP10_EVENTS_AIRLINE_DATA_T   WHERE TPP_ID = " & TPP_ID & " GROUP BY Component_Event_Driver ORDER BY COUNT(Component_Event_Driver) DESC "
    End If
    
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    ClearCell "Interruption Data", "K6:L6"
    WS_INT.Cells(6, 11).CopyFromRecordset RecordSet
    RecordSet.Close

    'INT_TOP10_EVENTS_AIRLINE_DATA_T() ' 12 Months Basic
    dt = DateAdd("m", -12, ToDate_I)
    sqlCmd = ""
    sqlCmd = "SELECT TOP 10 Component_Event_Driver,COUNT(Component_Event_Driver)  FROM INT_TOP10_EVENTS_AIRLINE_DATA_T  "
    sqlCmd = sqlCmd & " WHERE EVENT_DATE >= '" & dt & "' "
    sqlCmd = sqlCmd & " AND EVENT_DATE <= '" & ToDate_I & "' "
    sqlCmd = sqlCmd & " AND UPPER(ENG_CAUSED_NON_ENG_CAUSED) ='BASIC' AND TPP_ID = " & TPP_ID & "  "
    sqlCmd = sqlCmd & " GROUP BY Component_Event_Driver ORDER BY COUNT(Component_Event_Driver) DESC  "
        
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    ClearCell "Interruption Data", "Q6:R6"
    WS_INT.Cells(6, 17).CopyFromRecordset RecordSet
    RecordSet.Close
    
    'INT_TOP10_EVENTS_AIRLINE_DATA_T() ' 12 Months Basic and Non Basic
    dt = DateAdd("m", -12, ToDate_I)
    sqlCmd = ""
    sqlCmd = "SELECT TOP 10 Component_Event_Driver,COUNT(Component_Event_Driver)  FROM INT_TOP10_EVENTS_AIRLINE_DATA_T  "
    sqlCmd = sqlCmd & " WHERE EVENT_DATE >= '" & dt & "' "
    sqlCmd = sqlCmd & " AND EVENT_DATE <= '" & ToDate_I & "' "
    sqlCmd = sqlCmd & " AND TPP_ID = " & TPP_ID & "  "
    sqlCmd = sqlCmd & " GROUP BY Component_Event_Driver ORDER BY COUNT(Component_Event_Driver) DESC  "
    
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    ClearCell "Interruption Data", "N6:O6"
    WS_INT.Cells(6, 14).CopyFromRecordset RecordSet
    RecordSet.Close
    
    'INT_FDM EVENTS
    
    sqlCmd = " SELECT DISTINCT ESN , CONVERT(VARCHAR(10),EVENT.EVENT_DATE,105) EVENT_DATE , EVENT.EVENT_TYPE ,  EVENT.COMPONENT_EVENT_DRIVER ,  TAIL_NUMBER  ,  AIRCRAFT_TYPE , EVENT.ENGINE_MODEL ,TSN ,CSN ,TSV ,CSV ,FDM_EVENT_NUMBER  , EVENT.EVENT_CAUSE AS RATE  ,BOTTOM_TASK_NUM  ,  ROUND(RG.CUMULATIVE_UTILIZATION,3) AS CUMULATIVE_UTILIZATION,   CASE    WHEN  ROUND(COALESCE(SUM (RG.CUMULATIVE_UTILIZATION ) OVER (ORDER BY EVENT.EVENT_DATE ASC ROWS BETWEEN 1 PRECEDING    AND 1 PRECEDING),0),3) = 0 THEN '0'   ELSE     (RG.CUMULATIVE_UTILIZATION - ROUND(COALESCE(SUM (RG.CUMULATIVE_UTILIZATION ) OVER (ORDER BY EVENT.EVENT_DATE ASC ROWS BETWEEN 1 PRECEDING    AND 1 PRECEDING),0),3))   END as ELAPSED_HOURS_BTW_EVENTS  ,  ROW_NUMBER() OVER (ORDER BY EVENT.EVENT_DATE) ROWNUMBER  FROM   ALL_FDM_EVENTS_T EVENT  INNER JOIN PFM_RG_CHART_T RG ON RG.ENGINE_MODEL = EVENT.ENGINE_MODEL AND RG.EVENT_TYPE = EVENT.EVENT_TYPE AND  RG.COMPONENT_EVENT_DRIVER = EVENT.COMPONENT_EVENT_DRIVER "
    sqlCmd = sqlCmd & " AND RG.EVENT_DATE = EVENT.EVENT_DATE AND RG.ENGINE_SERIALNO = EVENT.ESN AND RG.EVENT_ID = EVENT.EVENT_ID  AND UPPER(RG.RATE) = CASE WHEN UPPER(EVENT.EVENT_CAUSE) ='NON-BASIC' THEN 'TOTAL' ELSE UPPER(EVENT.EVENT_CAUSE) END  AND EVENT.TPP_ID = RG.TPP_ID"
    sqlCmd = sqlCmd & " WHERE EVENT.EVENT_TYPE = 'ITRR' AND EVENT.TPP_ID = " & TPP_ID & "  ORDER BY ROWNUMBER DESC "
        
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    ClearCell "Interruption Data", "B26:R26"
    WS_INT.Cells(26, 2).CopyFromRecordset RecordSet
    RecordSet.Close

    'INT_CalculationData()
    sqlCmd = ""
    sqlCmd = " SELECT CONVERT(VARCHAR,CAST(AIR.[YEAR MONTH] + '01' AS DATE),101) as [YEAR MONTH],AIR.[Total Interruption Rate 12M],AIR.[Basic Interruption Rate 12M],FLEET.[Total Interruption Rate 12M],FLEET.[Basic Interruption Rate 12M]  "
    sqlCmd = sqlCmd & " from [FLEET_SIMPLE_STATISTICS] FLEET join [AIRLINE_SIMPLE_STATISTICS] AIR  ON AIR.[Engine Model] = FLEET.[Engine Model] AND AIR.[Year Month] = FLEET.[Year Month]  AND AIR.TPP_ID = FLEET.TPP_ID AND  AIR.TPP_ID = " & TPP_ID
    If MONTHS > 0 Then
        Days = DatePart("d", FromDate)
        FromDate = DateAdd("m", -MONTHS, Date)
        sqlCmd = sqlCmd & " WHERE CONVERT(VARCHAR,CAST(AIR.[YEAR MONTH] + '01' AS DATE),101) >= Cast('" & FromDate & "' as Date)"
    End If
    
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    ClearCell "Interruption Data", "T26:X26"
    WS_INT.Cells(26, 20).CopyFromRecordset RecordSet
    RecordSet.Close
     
    'INT /ITRR
    
    If MONTHS > 0 Then
        sqlCmd = " SELECT DISTINCT  (SELECT  '" & FromDate & "'  ) AS DATEFROM,(SELECT  '" & ToDate & "' ) AS DATETO,(SELECT COUNT (*) FROM ( SELECT DISTINCT RG.EVENT_ID     FROM [DBO].[PFM_RG_CHART_T] RG  JOIN [ALL_FDM_EVENTS_T] EVE     ON EVE.ESN = RG.ENGINE_SERIALNO    AND EVE.EVENT_ID = RG.EVENT_ID  AND EVE.ENGINE_MODEL = RG.ENGINE_MODEL  AND EVE.TPP_ID = RG.TPP_ID  WHERE EVE.EVENT_TYPE='ITRR'  AND EVE.TPP_ID = " & TPP_ID & " )E )AS NO_OF_EVENTS"
    Else
        sqlCmd = " SELECT DISTINCT  (SELECT  DISTINCT  CONVERT(VARCHAR,DATE_FROM,101)DATE_FROM FROM INPUT_PARAMETERS_T WHERE TPP_ID = " & TPP_ID & ") AS DATEFROM,(SELECT  DISTINCT CONVERT(VARCHAR,DATE_TO,101)DATE_TO FROM INPUT_PARAMETERS_T WHERE TPP_ID = " & TPP_ID & ") AS DATETO,(SELECT COUNT (*) FROM ( SELECT DISTINCT RG.EVENT_ID     FROM [DBO].[PFM_RG_CHART_T] RG  JOIN [ALL_FDM_EVENTS_T] EVE     ON EVE.ESN = RG.ENGINE_SERIALNO    AND EVE.EVENT_ID = RG.EVENT_ID  AND EVE.ENGINE_MODEL = RG.ENGINE_MODEL  AND EVE.TPP_ID = RG.TPP_ID  WHERE EVE.EVENT_TYPE='ITRR'  AND EVE.TPP_ID = " & TPP_ID & " )E )AS NO_OF_EVENTS"
    End If
 
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    ClearCell "Interruption Data", "C5:C13"
    WS_INT.Cells(1, 27).CopyFromRecordset RecordSet
    RecordSet.Close
    
    sqlCmd = "SELECT TOP 1 'DEP' SELECTED_MEASURES,ISNULL(INTERCEPT,0) RG_ALPHA,  ISNULL(CUST_SLOPE,0) RG_BETA,    ISNULL(CUST_R2,0) R_POWER2,     ISNULL(CUST_INSTANTANEOUS_RATE,0) INST_RATE,    ISNULL(CUST_12M_ROLLING_RATE,0) MO12_RATE   FROM [DBO].[PFM_RG_CHART_T]  "
    sqlCmd = sqlCmd & " WHERE EVENT_TYPE= 'ITRR'  AND  TPP_ID = " & TPP_ID
    
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    
    If RecordSet.RecordCount > 0 Then
        WS_INT.Cells(1, 30).CopyFromRecordset RecordSet
    Else
        RecordSet.Close
        RecordSet.Open "SELECT TOP 1 'DEP' SELECTED_MEASURES,0 , 0, 0, 0, 0  ", conn
        WS_INT.Cells(1, 30).CopyFromRecordset RecordSet
    End If
    
    'HYPOTHETICAL DATA
    sqlCmd = " SELECT TOP 1  CUMULATIVE_UTILIZATION , '',(SELECT MAX(ROWNUMBER) + 1 FROM(SELECT DISTINCT ESN ,  ROW_NUMBER() OVER (ORDER BY EVENT.EVENT_DATE) ROWNUMBER  FROM   ALL_FDM_EVENTS_T EVENT  INNER JOIN PFM_RG_CHART_T RG ON RG.ENGINE_MODEL = EVENT.ENGINE_MODEL AND RG.EVENT_TYPE = EVENT.EVENT_TYPE AND RG.EVENT_DATE = EVENT.EVENT_DATE AND RG.ENGINE_SERIALNO = EVENT.ESN AND RG.EVENT_ID = EVENT.EVENT_ID AND RG.TPP_ID =  EVENT.TPP_ID AND UPPER(RG.RATE) = CASE WHEN UPPER(EVENT.EVENT_CAUSE) ='NON-BASIC' THEN 'TOTAL' ELSE UPPER(EVENT.EVENT_CAUSE) END WHERE EVENT.EVENT_TYPE = 'ITRR' AND EVENT.TPP_ID =  " & TPP_ID & " ) E ) AS COUNTS FROM PFM_RG_CHART_T WHERE EVENT_TYPE = 'ITRR'  AND EVENT_ID = 0  AND TPP_ID = " & TPP_ID & " ORDER BY CUST_EVENT_COUNT DESC"
    
    WS_INT.Cells(24, 16) = ""
    WS_INT.Cells(24, 18) = ""
    
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    WS_INT.Cells(24, 16).CopyFromRecordset RecordSet
    RecordSet.Close
    
    WS_INT.Range("AA1:AI1").Copy
    WS_INT.Range("C5:C13").PasteSpecial Transpose:=True
    ClearCell "Interruption Data", "AA1:AI1"
    WS_INT.Range("C5:C13").Font.Size = 8
    WS_INT.Range("C5:C13").HorizontalAlignment = xlRight
    
    '======================================================================
    S1 = "Interruption Data"
    RC = Sheets(S1).Cells(Rows.Count, 20).End(xlUp).Row
    Dim Carray
    If RC > 25 Then
        Carray = Sheets(S1).Range(Sheets(S1).Cells(26, 20), Sheets(S1).Cells(RC, 20)).Value
        Sheets(S1).Range(Sheets(S1).Cells(26, 20), Sheets(S1).Cells(RC, 20)).Value = Carray
        If RC > 26 Then Erase Carray
    End If
End Sub
'******** INT Tab *****************************

'******** UER Tab *****************************
Sub GetDataFor_UER_FDM_EVENTS_T(Optional MONTHS As Variant, Optional AirlineNameForCG As String)
    Dim sqlCmd As String
    Dim RecordSet  As ADODB.RecordSet
    
    Dim WS_UER As Worksheet
    Set WS_UER = Sheets("UER Data")
    
    Dim FromDate As Date
    Dim ToDate As Date
    
    If MONTHS > 0 Then
        FromDate = DateAdd("m", -MONTHS, Date)
        ToDate = Date
    End If
    
    FDays_I = DatePart("d", FromDate)
    FromDate_I = DateAdd("d", -FDays_I + 1, FromDate)
    
    TDays_I = DatePart("d", ToDate)
    ToDate_I = DateAdd("d", -TDays_I, ToDate)

    'UER_TOP10_EVENTS_FLEET_DATA_T() 'ALL
    sqlCmd = ""
    
    If AirlineNameForCG = "" Then
        If MONTHS > 0 Then
            sqlCmd = " SELECT TOP 10 Component_Event_Driver,COUNT(Component_Event_Driver) FROM UER_TOP10_EVENTS_FLEET_DATA_T   WHERE EVENT_DATE >= '" & FromDate & "' AND TPP_ID = " & TPP_ID & "   GROUP BY Component_Event_Driver ORDER BY COUNT(Component_Event_Driver) DESC "
        Else
            sqlCmd = " SELECT TOP 10 Component_Event_Driver,COUNT(Component_Event_Driver) FROM UER_TOP10_EVENTS_FLEET_DATA_T  WHERE TPP_ID = " & TPP_ID & "  GROUP BY Component_Event_Driver ORDER BY COUNT(Component_Event_Driver) DESC  "
        End If
    Else
        If MONTHS > 0 Then
            sqlCmd = " SELECT TOP 10 Component_Event_Driver,COUNT(Component_Event_Driver) FROM UER_TOP10_EVENTS_FLEET_DATA_T   WHERE EVENT_DATE >= '" & FromDate & "' AND TPP_ID = " & TPP_ID & " AND AIRLINE_NAME IN (" & AirlineNameForCG & ")  GROUP BY Component_Event_Driver ORDER BY COUNT(Component_Event_Driver) DESC "
        Else
            sqlCmd = " SELECT TOP 10 Component_Event_Driver,COUNT(Component_Event_Driver) FROM UER_TOP10_EVENTS_FLEET_DATA_T  WHERE TPP_ID = " & TPP_ID & " AND AIRLINE_NAME IN (" & AirlineNameForCG & ") GROUP BY Component_Event_Driver ORDER BY COUNT(Component_Event_Driver) DESC  "
        End If
    End If
    
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    ClearCell "UER Data", "H6:I6"
    WS_UER.Cells(6, 8).CopyFromRecordset RecordSet
    RecordSet.Close

    'UER_TOP10_EVENTS_AIRLINE_DATA_T() 'ALL
    sqlCmd = ""
    If MONTHS > 0 Then
        sqlCmd = " SELECT TOP 10 Component_Event_Driver,COUNT(Component_Event_Driver)  FROM UER_TOP10_EVENTS_AIRLINE_DATA_T   WHERE EVENT_DATE >= '" & FromDate & "'  AND TPP_ID = " & TPP_ID & "  GROUP BY Component_Event_Driver ORDER BY COUNT(Component_Event_Driver) DESC"
    Else
        sqlCmd = " SELECT TOP 10 Component_Event_Driver,COUNT(Component_Event_Driver)  FROM UER_TOP10_EVENTS_AIRLINE_DATA_T  WHERE TPP_ID = " & TPP_ID & "  GROUP BY Component_Event_Driver ORDER BY COUNT(Component_Event_Driver) DESC"
    End If
        
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    ClearCell "UER Data", "K6:L6"
    WS_UER.Cells(6, 11).CopyFromRecordset RecordSet
    RecordSet.Close

    'UER_TOP10_EVENTS_AIRLINE_DATA_T() ' 12 Months Basic
    dt = DateAdd("m", -12, ToDate_I)
    sqlCmd = ""
    sqlCmd = "SELECT TOP 10 Component_Event_Driver,COUNT(Component_Event_Driver)  FROM UER_TOP10_EVENTS_AIRLINE_DATA_T  "
    sqlCmd = sqlCmd & " WHERE EVENT_DATE >= '" & dt & "' "
    sqlCmd = sqlCmd & " AND EVENT_DATE <= '" & ToDate_I & "' "
    sqlCmd = sqlCmd & " AND UPPER(ENG_CAUSED_NON_ENG_CAUSED) ='BASIC' AND TPP_ID = " & TPP_ID & "  "
    sqlCmd = sqlCmd & " GROUP BY Component_Event_Driver ORDER BY COUNT(Component_Event_Driver) DESC  "
        
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    ClearCell "UER Data", "Q6:R6"
    WS_UER.Cells(6, 17).CopyFromRecordset RecordSet
    RecordSet.Close
    
    'UER_TOP10_EVENTS_AIRLINE_DATA_T() ' 12 Months Basic and Non Basic
    dt = DateAdd("m", -12, ToDate_I)
    sqlCmd = ""
    sqlCmd = "SELECT TOP 10 Component_Event_Driver,COUNT(Component_Event_Driver)  FROM UER_TOP10_EVENTS_AIRLINE_DATA_T  "
    sqlCmd = sqlCmd & " WHERE EVENT_DATE >= '" & dt & "' "
    sqlCmd = sqlCmd & " AND EVENT_DATE <= '" & ToDate_I & "' "
    sqlCmd = sqlCmd & " AND TPP_ID = " & TPP_ID & "  "
    sqlCmd = sqlCmd & " GROUP BY Component_Event_Driver ORDER BY COUNT(Component_Event_Driver) DESC  "
    
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    ClearCell "UER Data", "N6:O6"
    WS_UER.Cells(6, 14).CopyFromRecordset RecordSet
    RecordSet.Close
    
    'UER_FDM_EVENTS_T
    
    sqlCmd = " SELECT DISTINCT ESN , CONVERT(VARCHAR(10),EVENT.EVENT_DATE,105) EVENT_DATE , EVENT.EVENT_TYPE ,  EVENT.COMPONENT_EVENT_DRIVER ,  TAIL_NUMBER  ,  AIRCRAFT_TYPE , EVENT.ENGINE_MODEL ,TSN ,CSN ,TSV ,CSV ,FDM_EVENT_NUMBER  , EVENT.EVENT_CAUSE AS RATE  ,BOTTOM_TASK_NUM  ,  ROUND(RG.CUMULATIVE_UTILIZATION,3) AS CUMULATIVE_UTILIZATION,   CASE    WHEN  ROUND(COALESCE(SUM (RG.CUMULATIVE_UTILIZATION ) OVER (ORDER BY EVENT.EVENT_DATE ASC ROWS BETWEEN 1 PRECEDING    AND 1 PRECEDING),0),3) = 0 THEN '0'   ELSE     (RG.CUMULATIVE_UTILIZATION - ROUND(COALESCE(SUM (RG.CUMULATIVE_UTILIZATION ) OVER (ORDER BY EVENT.EVENT_DATE ASC ROWS BETWEEN 1 PRECEDING    AND 1 PRECEDING),0),3))   END as ELAPSED_HOURS_BTW_EVENTS  ,  ROW_NUMBER() OVER (ORDER BY EVENT.EVENT_DATE) ROWNUMBER  FROM   ALL_FDM_EVENTS_T EVENT  INNER JOIN PFM_RG_CHART_T RG ON RG.ENGINE_MODEL = EVENT.ENGINE_MODEL AND RG.EVENT_TYPE = EVENT.EVENT_TYPE AND  RG.COMPONENT_EVENT_DRIVER = EVENT.COMPONENT_EVENT_DRIVER "
    sqlCmd = sqlCmd & " AND RG.EVENT_DATE = EVENT.EVENT_DATE AND RG.ENGINE_SERIALNO = EVENT.ESN AND RG.EVENT_ID = EVENT.EVENT_ID  AND UPPER(RG.RATE) = CASE WHEN UPPER(EVENT.EVENT_CAUSE) ='NON-BASIC' THEN 'TOTAL' ELSE UPPER(EVENT.EVENT_CAUSE) END  AND EVENT.TPP_ID = RG.TPP_ID"
    sqlCmd = sqlCmd & " WHERE EVENT.EVENT_TYPE = 'UER' AND EVENT.TPP_ID = " & TPP_ID & "  ORDER BY ROWNUMBER DESC "
        
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    ClearCell "UER Data", "B26:R26"
    WS_UER.Cells(26, 2).CopyFromRecordset RecordSet
    RecordSet.Close

    'UER_CalculationData()
    sqlCmd = ""
    sqlCmd = " SELECT CONVERT(VARCHAR,CAST(AIR.[YEAR MONTH] + '01' AS DATE),101) as [YEAR MONTH],AIR.[Total Unplanned Removal Rate 12M],AIR.[Basic Unplanned Removal Rate 12M],FLEET.[Total Unplanned Removal Rate 12M],FLEET.[Basic Unplanned Removal Rate 12M]  "
    sqlCmd = sqlCmd & " from [FLEET_SIMPLE_STATISTICS] FLEET join [AIRLINE_SIMPLE_STATISTICS] AIR  ON AIR.[Engine Model] = FLEET.[Engine Model] AND AIR.[Year Month] = FLEET.[Year Month]  AND AIR.TPP_ID = FLEET.TPP_ID AND  AIR.TPP_ID = " & TPP_ID
    If MONTHS > 0 Then
        Days = DatePart("d", FromDate)
        FromDate = DateAdd("m", -MONTHS, Date)
        sqlCmd = sqlCmd & " WHERE CONVERT(VARCHAR,CAST(AIR.[YEAR MONTH] + '01' AS DATE),101) >= Cast('" & FromDate & "' as Date)"
    End If

    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    ClearCell "UER Data", "T26:X26"
    WS_UER.Cells(26, 20).CopyFromRecordset RecordSet
    RecordSet.Close
    
    'UER
    If MONTHS > 0 Then
        sqlCmd = " SELECT DISTINCT  (SELECT  '" & FromDate & "'  ) AS DATEFROM,(SELECT  '" & ToDate & "' ) AS DATETO,(SELECT COUNT (*) FROM ( SELECT DISTINCT RG.EVENT_ID     FROM [DBO].[PFM_RG_CHART_T] RG  JOIN [ALL_FDM_EVENTS_T] EVE     ON EVE.ESN = RG.ENGINE_SERIALNO    AND EVE.EVENT_ID = RG.EVENT_ID  AND EVE.ENGINE_MODEL = RG.ENGINE_MODEL  AND EVE.TPP_ID = RG.TPP_ID   WHERE EVE.EVENT_TYPE='UER'  AND EVE.TPP_ID = " & TPP_ID & " )E )AS NO_OF_EVENTS"
    Else
        sqlCmd = " SELECT DISTINCT  (SELECT  DISTINCT  CONVERT(VARCHAR,DATE_FROM,101)DATE_FROM FROM INPUT_PARAMETERS_T WHERE TPP_ID = " & TPP_ID & ") AS DATEFROM,(SELECT  DISTINCT CONVERT(VARCHAR,DATE_TO,101)DATE_TO FROM INPUT_PARAMETERS_T WHERE TPP_ID = " & TPP_ID & ") AS DATETO,(SELECT COUNT (*) FROM ( SELECT DISTINCT RG.EVENT_ID     FROM [DBO].[PFM_RG_CHART_T] RG  JOIN [ALL_FDM_EVENTS_T] EVE     ON EVE.ESN = RG.ENGINE_SERIALNO    AND EVE.EVENT_ID = RG.EVENT_ID  AND EVE.ENGINE_MODEL = RG.ENGINE_MODEL  AND EVE.TPP_ID = RG.TPP_ID  WHERE EVE.EVENT_TYPE='UER'  AND EVE.TPP_ID = " & TPP_ID & " )E )AS NO_OF_EVENTS"
    End If
 
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    ClearCell "UER Data", "C5:C13"
    WS_UER.Cells(1, 27).CopyFromRecordset RecordSet
    RecordSet.Close
    
    sqlCmd = "SELECT TOP 1 'HRS' SELECTED_MEASURES,ISNULL(INTERCEPT,0) RG_ALPHA,  ISNULL(CUST_SLOPE,0) RG_BETA,    ISNULL(CUST_R2,0) R_POWER2,     ISNULL(CUST_INSTANTANEOUS_RATE,0) INST_RATE,    ISNULL(CUST_12M_ROLLING_RATE,0) MO12_RATE   FROM [DBO].[PFM_RG_CHART_T]  "
    sqlCmd = sqlCmd & " WHERE EVENT_TYPE= 'UER'  AND  TPP_ID = " & TPP_ID
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    If RecordSet.RecordCount > 0 Then
        WS_UER.Cells(1, 30).CopyFromRecordset RecordSet
    Else
        RecordSet.Close
        RecordSet.Open "SELECT TOP 1 'HRS' SELECTED_MEASURES,0 , 0, 0, 0, 0  ", conn
        WS_UER.Cells(1, 30).CopyFromRecordset RecordSet
    End If
    
    'HYPOTHETICAL DATA
    sqlCmd = " SELECT TOP 1  CUMULATIVE_UTILIZATION , '',(SELECT MAX(ROWNUMBER) + 1 FROM(SELECT DISTINCT ESN ,  ROW_NUMBER() OVER (ORDER BY EVENT.EVENT_DATE) ROWNUMBER  FROM   ALL_FDM_EVENTS_T EVENT  INNER JOIN PFM_RG_CHART_T RG ON RG.ENGINE_MODEL = EVENT.ENGINE_MODEL AND RG.EVENT_TYPE = EVENT.EVENT_TYPE AND RG.EVENT_DATE = EVENT.EVENT_DATE AND RG.ENGINE_SERIALNO = EVENT.ESN AND RG.EVENT_ID = EVENT.EVENT_ID AND RG.TPP_ID =  EVENT.TPP_ID AND UPPER(RG.RATE) = CASE WHEN UPPER(EVENT.EVENT_CAUSE) ='NON-BASIC' THEN 'TOTAL' ELSE UPPER(EVENT.EVENT_CAUSE) END WHERE EVENT.EVENT_TYPE = 'UER' AND EVENT.TPP_ID =  " & TPP_ID & " ) E ) AS COUNTS FROM PFM_RG_CHART_T WHERE EVENT_TYPE = 'UER'  AND EVENT_ID = 0  AND TPP_ID = " & TPP_ID & " ORDER BY CUST_EVENT_COUNT DESC"
    
    WS_UER.Cells(24, 16) = ""
    WS_UER.Cells(24, 18) = ""
    
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    WS_UER.Cells(24, 16).CopyFromRecordset RecordSet
    RecordSet.Close
    
    WS_UER.Range("AA1:AI1").Copy
    WS_UER.Range("C5:C13").PasteSpecial Transpose:=True
    ClearCell "UER Data", "AA1:AI1"
    WS_UER.Range("C5:C13").Font.Size = 8
    WS_UER.Range("C5:C13").HorizontalAlignment = xlRight
    
    '======================================================================
    S1 = "UER Data"
    RC = Sheets(S1).Cells(Rows.Count, 20).End(xlUp).Row
    Dim Carray
    If RC > 25 Then
        Carray = Sheets(S1).Range(Sheets(S1).Cells(26, 20), Sheets(S1).Cells(RC, 20)).Value
        Sheets(S1).Range(Sheets(S1).Cells(26, 20), Sheets(S1).Cells(RC, 20)).Value = Carray
        If RC > 26 Then Erase Carray
    End If
End Sub
'******** UER Tab *****************************

'******** DEPREL Tab *****************************
Sub GetDataFor_DEPREL_FDM_EVENTS_T(Optional MONTHS As Variant, Optional AirlineNameForCG As String)
    Dim sqlCmd As String
    Dim RecordSet  As ADODB.RecordSet
    
    ReadConnectionXML
    OpenSQLConnection
    
    Dim FromDate As Date
    Dim ToDate As Date
    
    If MONTHS > 0 Then
        FromDate = DateAdd("m", -MONTHS, Date)
        ToDate = Date
    End If
    
    FDays_I = DatePart("d", FromDate)
    FromDate_I = DateAdd("d", -FDays_I + 1, FromDate)
    
    TDays_I = DatePart("d", ToDate)
    ToDate_I = DateAdd("d", -TDays_I, ToDate)

    Dim WS_DEPREL As Worksheet
    Set WS_DEPREL = Sheets("Departure Reliability Data")
    
    'DEPREL_TOP10_EVENTS_FLEET_DATA_T() 'ALL
    sqlCmd = ""
    
    If AirlineNameForCG = "" Then
        If MONTHS > 0 Then
            sqlCmd = " SELECT TOP 10 Component_Event_Driver,COUNT(Component_Event_Driver) FROM  DEPREL_TOP10_EVENTS_FLEET_DATA_T  WHERE EVENT_DATE >= '" & FromDate & "'  AND TPP_ID = " & TPP_ID & " GROUP BY Component_Event_Driver ORDER BY COUNT(Component_Event_Driver) DESC "
        Else
            sqlCmd = " SELECT TOP 10 Component_Event_Driver,COUNT(Component_Event_Driver) FROM  DEPREL_TOP10_EVENTS_FLEET_DATA_T WHERE TPP_ID = " & TPP_ID & "  GROUP BY Component_Event_Driver ORDER BY COUNT(Component_Event_Driver) DESC  "
        End If
    Else
        If MONTHS > 0 Then
            sqlCmd = " SELECT TOP 10 Component_Event_Driver,COUNT(Component_Event_Driver) FROM  DEPREL_TOP10_EVENTS_FLEET_DATA_T  WHERE EVENT_DATE >= '" & FromDate & "'  AND TPP_ID = " & TPP_ID & " AND AIRLINE_NAME IN (" & AirlineNameForCG & ") GROUP BY Component_Event_Driver ORDER BY COUNT(Component_Event_Driver) DESC "
        Else
            sqlCmd = " SELECT TOP 10 Component_Event_Driver,COUNT(Component_Event_Driver) FROM  DEPREL_TOP10_EVENTS_FLEET_DATA_T WHERE TPP_ID = " & TPP_ID & " AND AIRLINE_NAME IN (" & AirlineNameForCG & ") GROUP BY Component_Event_Driver ORDER BY COUNT(Component_Event_Driver) DESC  "
        End If
    End If
   
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    
    ClearCell "Departure Reliability Data", "H6:I6"
    
    WS_DEPREL.Cells(6, 8).CopyFromRecordset RecordSet
    RecordSet.Close

    'DEPREL_TOP10_EVENTS_AIRLINE_DATA_T() 'ALL

    sqlCmd = ""
    If MONTHS > 0 Then
        sqlCmd = " SELECT TOP 10 Component_Event_Driver,COUNT(Component_Event_Driver) FROM  DEPREL_TOP10_EVENTS_AIRLINE_DATA_T  WHERE EVENT_DATE >= '" & FromDate & "' AND TPP_ID = " & TPP_ID & " GROUP BY Component_Event_Driver ORDER BY COUNT(Component_Event_Driver) DESC"
    Else
        sqlCmd = " SELECT TOP 10 Component_Event_Driver,COUNT(Component_Event_Driver) FROM  DEPREL_TOP10_EVENTS_AIRLINE_DATA_T WHERE TPP_ID = " & TPP_ID & " GROUP BY Component_Event_Driver ORDER BY COUNT(Component_Event_Driver) DESC "
    End If
   
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    ClearCell "Departure Reliability Data", "K6:L6"
    WS_DEPREL.Cells(6, 11).CopyFromRecordset RecordSet
    RecordSet.Close
    
    'DEPREL_TOP10_EVENTS_AIRLINE_DATA_T() ' 12 Months Basic
    dt = DateAdd("m", -12, ToDate_I)
    sqlCmd = ""
    sqlCmd = "SELECT TOP 10 Component_Event_Driver,COUNT(Component_Event_Driver)  FROM DEPREL_TOP10_EVENTS_AIRLINE_DATA_T  "
    sqlCmd = sqlCmd & " WHERE EVENT_DATE >= '" & dt & "' "
    sqlCmd = sqlCmd & " AND EVENT_DATE <= '" & ToDate_I & "' "
    sqlCmd = sqlCmd & " AND UPPER(ENG_CAUSED_NON_ENG_CAUSED) ='BASIC' AND TPP_ID = " & TPP_ID & "  "
    sqlCmd = sqlCmd & " GROUP BY Component_Event_Driver ORDER BY COUNT(Component_Event_Driver) DESC  "
    
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    ClearCell "Departure Reliability Data", "Q6:R6"
    WS_DEPREL.Cells(6, 17).CopyFromRecordset RecordSet
    RecordSet.Close
    
    'DEPREL_TOP10_EVENTS_AIRLINE_DATA_T() ' 12 Months Basic and Non Basic
    dt = DateAdd("m", -12, ToDate_I)
    sqlCmd = ""
    sqlCmd = "SELECT TOP 10 Component_Event_Driver,COUNT(Component_Event_Driver)  FROM DEPREL_TOP10_EVENTS_AIRLINE_DATA_T  "
    sqlCmd = sqlCmd & " WHERE EVENT_DATE >= '" & dt & "' "
    sqlCmd = sqlCmd & " AND EVENT_DATE <= '" & ToDate_I & "' "
    sqlCmd = sqlCmd & " AND TPP_ID = " & TPP_ID & "  "
    sqlCmd = sqlCmd & " GROUP BY Component_Event_Driver ORDER BY COUNT(Component_Event_Driver) DESC  "
    
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    ClearCell "Departure Reliability Data", "N6:O6"
    WS_DEPREL.Cells(6, 14).CopyFromRecordset RecordSet
    RecordSet.Close

    'DEPREL_FDM_EVENTS
    
    sqlCmd = " SELECT DISTINCT ESN , CONVERT(VARCHAR(10),EVENT.EVENT_DATE,105) EVENT_DATE , EVENT.EVENT_TYPE ,  EVENT.COMPONENT_EVENT_DRIVER ,  TAIL_NUMBER  ,  AIRCRAFT_TYPE , EVENT.ENGINE_MODEL ,TSN ,CSN ,TSV ,CSV ,FDM_EVENT_NUMBER  , EVENT.EVENT_CAUSE AS RATE  ,BOTTOM_TASK_NUM  ,  ROUND(RG.CUMULATIVE_UTILIZATION,3) AS CUMULATIVE_UTILIZATION,   CASE    WHEN  ROUND(COALESCE(SUM (RG.CUMULATIVE_UTILIZATION ) OVER (ORDER BY EVENT.EVENT_DATE ASC ROWS BETWEEN 1 PRECEDING    AND 1 PRECEDING),0),3) = 0 THEN '0'   ELSE     (RG.CUMULATIVE_UTILIZATION - ROUND(COALESCE(SUM (RG.CUMULATIVE_UTILIZATION ) OVER (ORDER BY EVENT.EVENT_DATE ASC ROWS BETWEEN 1 PRECEDING    AND 1 PRECEDING),0),3))   END as ELAPSED_HOURS_BTW_EVENTS  ,  ROW_NUMBER() OVER (ORDER BY EVENT.EVENT_DATE) ROWNUMBER ,EVENT.DELAY_MINUTES  FROM   ALL_FDM_EVENTS_T EVENT  INNER JOIN PFM_RG_CHART_T RG ON RG.ENGINE_MODEL = EVENT.ENGINE_MODEL AND RG.EVENT_TYPE = EVENT.EVENT_TYPE AND  RG.COMPONENT_EVENT_DRIVER = EVENT.COMPONENT_EVENT_DRIVER "
    sqlCmd = sqlCmd & " AND RG.EVENT_DATE = EVENT.EVENT_DATE AND RG.ENGINE_SERIALNO = EVENT.ESN AND RG.EVENT_ID = EVENT.EVENT_ID  AND UPPER(RG.RATE) = CASE WHEN UPPER(EVENT.EVENT_CAUSE) ='NON-BASIC' THEN 'TOTAL' ELSE UPPER(EVENT.EVENT_CAUSE) END  AND EVENT.TPP_ID = RG.TPP_ID "
    sqlCmd = sqlCmd & " WHERE EVENT.EVENT_TYPE = 'DC' AND EVENT.TPP_ID = " & TPP_ID & "  ORDER BY ROWNUMBER DESC "
        
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    ClearCell "Departure Reliability Data", "B26:S26"
    WS_DEPREL.Cells(26, 2).CopyFromRecordset RecordSet
    RecordSet.Close

    'DEPREL_CalculationData()
    sqlCmd = ""
    sqlCmd = " SELECT CONVERT(VARCHAR,CAST(AIR.[YEAR MONTH] + '01' AS DATE),101) as [YEAR MONTH],AIR.[Total Dep Reliability 12M],AIR.[Basic Dep Reliability 12M],FLEET.[Total Dep Reliability 12M],FLEET.[Basic Dep Reliability 12M]  "
    sqlCmd = sqlCmd & " from [FLEET_SIMPLE_STATISTICS] FLEET join [AIRLINE_SIMPLE_STATISTICS] AIR  ON AIR.[Engine Model] = FLEET.[Engine Model] AND AIR.[Year Month] = FLEET.[Year Month]  AND AIR.TPP_ID = FLEET.TPP_ID AND  AIR.TPP_ID = " & TPP_ID
    If MONTHS > 0 Then
        Days = DatePart("d", FromDate)
        FromDate = DateAdd("m", -MONTHS, Date)
        sqlCmd = sqlCmd & " WHERE CONVERT(VARCHAR,CAST(AIR.[YEAR MONTH] + '01' AS DATE),101) >= Cast('" & FromDate & "' as Date)"
    End If
    
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    ClearCell "Departure Reliability Data", "T26:X26"
    WS_DEPREL.Cells(26, 20).CopyFromRecordset RecordSet
    RecordSet.Close
    
    'DC
    If MONTHS > 0 Then
        sqlCmd = " SELECT DISTINCT  (SELECT  '" & FromDate & "'  ) AS DATEFROM,(SELECT  '" & ToDate & "' ) AS DATETO,(SELECT COUNT (*) FROM ( SELECT DISTINCT RG.EVENT_ID     FROM [DBO].[PFM_RG_CHART_T] RG  JOIN [ALL_FDM_EVENTS_T] EVE     ON EVE.ESN = RG.ENGINE_SERIALNO    AND EVE.EVENT_ID = RG.EVENT_ID  AND EVE.ENGINE_MODEL = RG.ENGINE_MODEL  AND EVE.TPP_ID = RG.TPP_ID  WHERE EVE.EVENT_TYPE='DC'   AND EVE.TPP_ID = " & TPP_ID & " )E )AS NO_OF_EVENTS"
    Else
        sqlCmd = " SELECT DISTINCT  (SELECT  DISTINCT  CONVERT(VARCHAR,DATE_FROM,101)DATE_FROM FROM INPUT_PARAMETERS_T WHERE TPP_ID = " & TPP_ID & ") AS DATEFROM,(SELECT  DISTINCT CONVERT(VARCHAR,DATE_TO,101)DATE_TO FROM INPUT_PARAMETERS_T WHERE TPP_ID = " & TPP_ID & ") AS DATETO,(SELECT COUNT (*) FROM ( SELECT DISTINCT RG.EVENT_ID     FROM [DBO].[PFM_RG_CHART_T] RG  JOIN [ALL_FDM_EVENTS_T] EVE     ON EVE.ESN = RG.ENGINE_SERIALNO    AND EVE.EVENT_ID = RG.EVENT_ID  AND EVE.ENGINE_MODEL = RG.ENGINE_MODEL  AND EVE.TPP_ID = RG.TPP_ID   WHERE EVE.EVENT_TYPE='DC'   AND EVE.TPP_ID = " & TPP_ID & " )E )AS NO_OF_EVENTS"
    End If
    
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    ClearCell "Departure Reliability Data", "C5:C13"
    WS_DEPREL.Cells(1, 27).CopyFromRecordset RecordSet
    RecordSet.Close
    
    sqlCmd = "SELECT TOP 1 'DEP' SELECTED_MEASURES,ISNULL(INTERCEPT,0) RG_ALPHA,  ISNULL(CUST_SLOPE,0) RG_BETA,    ISNULL(CUST_R2,0) R_POWER2,     ISNULL(CUST_INSTANTANEOUS_RATE,0) INST_RATE,    ISNULL(CUST_12M_ROLLING_RATE,0) MO12_RATE   FROM [DBO].[PFM_RG_CHART_T]  "
    sqlCmd = sqlCmd & " WHERE EVENT_TYPE= 'DC'   AND  TPP_ID = " & TPP_ID

    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    If RecordSet.RecordCount > 0 Then
        WS_DEPREL.Cells(1, 30).CopyFromRecordset RecordSet
    Else
        RecordSet.Close
        RecordSet.Open "SELECT TOP 1 'DEP' SELECTED_MEASURES,0 , 0, 0, 0, 0  ", conn
        WS_DEPREL.Cells(1, 30).CopyFromRecordset RecordSet
    End If
    
    'HYPOTHETICAL DATA
    sqlCmd = " SELECT TOP 1  CUMULATIVE_UTILIZATION , '',(SELECT MAX(ROWNUMBER) + 1 FROM(SELECT DISTINCT ESN ,  ROW_NUMBER() OVER (ORDER BY EVENT.EVENT_DATE) ROWNUMBER  FROM   ALL_FDM_EVENTS_T EVENT  INNER JOIN PFM_RG_CHART_T RG ON RG.ENGINE_MODEL = EVENT.ENGINE_MODEL AND RG.EVENT_TYPE = EVENT.EVENT_TYPE AND RG.EVENT_DATE = EVENT.EVENT_DATE AND RG.ENGINE_SERIALNO = EVENT.ESN AND RG.EVENT_ID = EVENT.EVENT_ID AND RG.TPP_ID =  EVENT.TPP_ID AND UPPER(RG.RATE) = CASE WHEN UPPER(EVENT.EVENT_CAUSE) ='NON-BASIC' THEN 'TOTAL' ELSE UPPER(EVENT.EVENT_CAUSE) END WHERE EVENT.EVENT_TYPE = 'DC' AND EVENT.TPP_ID =  " & TPP_ID & " ) E ) AS COUNTS FROM PFM_RG_CHART_T WHERE EVENT_TYPE = 'DC'  AND EVENT_ID = 0  AND TPP_ID = " & TPP_ID & " ORDER BY CUST_EVENT_COUNT DESC"
    
    WS_DEPREL.Cells(24, 16) = ""
    WS_DEPREL.Cells(24, 18) = ""
    
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    WS_DEPREL.Cells(24, 16).CopyFromRecordset RecordSet
    RecordSet.Close
    
    WS_DEPREL.Range("AA1:AI1").Copy
    WS_DEPREL.Range("C5:C13").PasteSpecial Transpose:=True
    ClearCell "Departure Reliability Data", "AA1:AI1"
    WS_DEPREL.Range("C5:C13").Font.Size = 8
    WS_DEPREL.Range("C5:C13").HorizontalAlignment = xlRight
    
    '======================================================================
    S1 = "Departure Reliability Data"
    RC = Sheets(S1).Cells(Rows.Count, 20).End(xlUp).Row
    Dim Carray
    If RC > 25 Then
        Carray = Sheets(S1).Range(Sheets(S1).Cells(26, 20), Sheets(S1).Cells(RC, 20)).Value
        Sheets(S1).Range(Sheets(S1).Cells(26, 20), Sheets(S1).Cells(RC, 20)).Value = Carray
        If RC > 26 Then Erase Carray
    End If
End Sub
'******** DEPREL Tab *****************************

'******** REM Tab *****************************
Sub GetDataFor_REM_FDM_EVENTS_T(Optional MONTHS As Variant, Optional AirlineNameForCG As String)
    Dim sqlCmd As String
    Dim RecordSet  As ADODB.RecordSet
    ReadConnectionXML
    OpenSQLConnection
    
    Dim FromDate As Date
    Dim ToDate As Date
    
    If MONTHS > 0 Then
        FromDate = DateAdd("m", -MONTHS, Date)
        ToDate = Date
    End If

    FDays_I = DatePart("d", FromDate)
    FromDate_I = DateAdd("d", -FDays_I + 1, FromDate)
    
    TDays_I = DatePart("d", ToDate)
    ToDate_I = DateAdd("d", -TDays_I, ToDate)
    
    Dim WS_REM As Worksheet
    Set WS_REM = Sheets("REM Data")
    
    'REM_TOP10_EVENTS_FLEET_DATA_T() 'ALL
    sqlCmd = ""
    
    If AirlineNameForCG = "" Then
        If MONTHS > 0 Then
           sqlCmd = " SELECT TOP 10 Component_Event_Driver,COUNT(Component_Event_Driver) FROM  REM_TOP10_EVENTS_FLEET_DATA_T  WHERE EVENT_DATE >= '" & FromDate & "' AND TPP_ID = " & TPP_ID & " GROUP BY Component_Event_Driver ORDER BY COUNT(Component_Event_Driver) DESC "
        Else
           sqlCmd = " SELECT TOP 10 Component_Event_Driver,COUNT(Component_Event_Driver) FROM  REM_TOP10_EVENTS_FLEET_DATA_T  WHERE TPP_ID = " & TPP_ID & " GROUP BY Component_Event_Driver ORDER BY COUNT(Component_Event_Driver) DESC  "
        End If
    Else
       If MONTHS > 0 Then
           sqlCmd = " SELECT TOP 10 Component_Event_Driver,COUNT(Component_Event_Driver) FROM  REM_TOP10_EVENTS_FLEET_DATA_T  WHERE EVENT_DATE >= '" & FromDate & "' AND TPP_ID = " & TPP_ID & " AND AIRLINE_NAME IN (" & AirlineNameForCG & ") GROUP BY Component_Event_Driver ORDER BY COUNT(Component_Event_Driver) DESC "
        Else
           sqlCmd = " SELECT TOP 10 Component_Event_Driver,COUNT(Component_Event_Driver) FROM  REM_TOP10_EVENTS_FLEET_DATA_T  WHERE TPP_ID = " & TPP_ID & " AND AIRLINE_NAME IN (" & AirlineNameForCG & ") GROUP BY Component_Event_Driver ORDER BY COUNT(Component_Event_Driver) DESC  "
        End If
    End If
    
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    ClearCell "REM Data", "H6:I6"
    WS_REM.Cells(6, 8).CopyFromRecordset RecordSet
    RecordSet.Close

    'REM_TOP10_EVENTS_AIRLINE_DATA_T() 'ALL

    sqlCmd = ""
    If MONTHS > 0 Then
      sqlCmd = " SELECT TOP 10 Component_Event_Driver,COUNT(Component_Event_Driver) FROM  REM_TOP10_EVENTS_AIRLINE_DATA_T WHERE EVENT_DATE >= '" & FromDate & "' AND TPP_ID = " & TPP_ID & " GROUP BY Component_Event_Driver ORDER BY COUNT(Component_Event_Driver) DESC"
    Else
      sqlCmd = " SELECT TOP 10 Component_Event_Driver,COUNT(Component_Event_Driver) FROM  REM_TOP10_EVENTS_AIRLINE_DATA_T WHERE TPP_ID = " & TPP_ID & " GROUP BY Component_Event_Driver ORDER BY COUNT(Component_Event_Driver) DESC"
    End If
    
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    ClearCell "REM Data", "K6:L6"
    WS_REM.Cells(6, 11).CopyFromRecordset RecordSet
    RecordSet.Close

    'REM_TOP10_EVENTS_AIRLINE_DATA_T() ' 12 Months Basic
    dt = DateAdd("m", -12, ToDate_I)
    sqlCmd = ""

    sqlCmd = "SELECT TOP 10 Component_Event_Driver,COUNT(Component_Event_Driver)  FROM REM_TOP10_EVENTS_AIRLINE_DATA_T  "
    sqlCmd = sqlCmd & " WHERE EVENT_DATE >= '" & dt & "' "
    sqlCmd = sqlCmd & " AND EVENT_DATE <= '" & ToDate_I & "' "
    sqlCmd = sqlCmd & " AND UPPER(ENG_CAUSED_NON_ENG_CAUSED) ='BASIC' AND TPP_ID = " & TPP_ID & "  "
    sqlCmd = sqlCmd & " GROUP BY Component_Event_Driver ORDER BY COUNT(Component_Event_Driver) DESC  "
    
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    ClearCell "REM Data", "Q6:R6"
    WS_REM.Cells(6, 17).CopyFromRecordset RecordSet
    RecordSet.Close
    
    'REM_TOP10_EVENTS_AIRLINE_DATA_T() ' 12 Months Basic and Non Basic
    dt = DateAdd("m", -12, ToDate_I)
    sqlCmd = ""
    sqlCmd = "SELECT TOP 10 Component_Event_Driver,COUNT(Component_Event_Driver)  FROM REM_TOP10_EVENTS_AIRLINE_DATA_T  "
    sqlCmd = sqlCmd & " WHERE EVENT_DATE >= '" & dt & "' "
    sqlCmd = sqlCmd & " AND EVENT_DATE <= '" & ToDate_I & "' "
    sqlCmd = sqlCmd & " AND TPP_ID = " & TPP_ID & "  "
    sqlCmd = sqlCmd & " GROUP BY Component_Event_Driver ORDER BY COUNT(Component_Event_Driver) DESC  "
        
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    ClearCell "REM Data", "N6:O6"
    WS_REM.Cells(6, 14).CopyFromRecordset RecordSet
    RecordSet.Close

    'REM_FDM_EVENTS_T
    
    sqlCmd = " SELECT DISTINCT ESN , CONVERT(VARCHAR(10),EVENT.EVENT_DATE,105) EVENT_DATE , EVENT.EVENT_TYPE ,  EVENT.COMPONENT_EVENT_DRIVER ,  TAIL_NUMBER  ,  AIRCRAFT_TYPE , EVENT.ENGINE_MODEL ,TSN ,CSN ,TSV ,CSV ,FDM_EVENT_NUMBER  , EVENT.EVENT_CAUSE AS RATE  ,BOTTOM_TASK_NUM  ,  ROUND(RG.CUMULATIVE_UTILIZATION,3) AS CUMULATIVE_UTILIZATION,   CASE    WHEN  ROUND(COALESCE(SUM (RG.CUMULATIVE_UTILIZATION ) OVER (ORDER BY EVENT.EVENT_DATE ASC ROWS BETWEEN 1 PRECEDING    AND 1 PRECEDING),0),3) = 0 THEN '0'   ELSE     (RG.CUMULATIVE_UTILIZATION - ROUND(COALESCE(SUM (RG.CUMULATIVE_UTILIZATION ) OVER (ORDER BY EVENT.EVENT_DATE ASC ROWS BETWEEN 1 PRECEDING    AND 1 PRECEDING),0),3))   END as ELAPSED_HOURS_BTW_EVENTS  ,  ROW_NUMBER() OVER (ORDER BY EVENT.EVENT_DATE) ROWNUMBER  FROM   ALL_FDM_EVENTS_T EVENT  INNER JOIN PFM_RG_CHART_T RG ON RG.ENGINE_MODEL = EVENT.ENGINE_MODEL AND RG.EVENT_TYPE = EVENT.EVENT_TYPE AND  RG.COMPONENT_EVENT_DRIVER = EVENT.COMPONENT_EVENT_DRIVER "
    sqlCmd = sqlCmd & " AND RG.EVENT_DATE = EVENT.EVENT_DATE AND RG.ENGINE_SERIALNO = EVENT.ESN AND RG.EVENT_ID = EVENT.EVENT_ID  AND UPPER(RG.RATE) = CASE WHEN UPPER(EVENT.EVENT_CAUSE) ='NON-BASIC' THEN 'TOTAL' ELSE UPPER(EVENT.EVENT_CAUSE) END  AND EVENT.TPP_ID = RG.TPP_ID "
    sqlCmd = sqlCmd & " WHERE EVENT.EVENT_TYPE = 'REM' AND EVENT.TPP_ID = " & TPP_ID & "  ORDER BY ROWNUMBER DESC "
       
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    ClearCell "REM Data", "B26:R26"
    WS_REM.Cells(26, 2).CopyFromRecordset RecordSet
    RecordSet.Close

    'REM_CalculationData()
    sqlCmd = ""
    sqlCmd = " SELECT CONVERT(VARCHAR,CAST(AIR.[YEAR MONTH] + '01' AS DATE),101) as [YEAR MONTH],AIR.[Total Removal Rate 12M],AIR.[Total Basic Removal Rate 12M],FLEET.[Total Removal Rate 12M],FLEET.[Total Basic Removal Rate 12M] "
    sqlCmd = sqlCmd & " from [FLEET_SIMPLE_STATISTICS] FLEET join [AIRLINE_SIMPLE_STATISTICS] AIR  ON AIR.[Engine Model] = FLEET.[Engine Model] AND AIR.[Year Month] = FLEET.[Year Month]  AND AIR.TPP_ID = FLEET.TPP_ID AND  AIR.TPP_ID = " & TPP_ID
    If MONTHS > 0 Then
        Days = DatePart("d", FromDate)
        FromDate = DateAdd("m", -MONTHS, Date)
        sqlCmd = sqlCmd & " WHERE CONVERT(VARCHAR,CAST(AIR.[YEAR MONTH] + '01' AS DATE),101) >= Cast('" & FromDate & "' as Date)"
    End If
    
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    ClearCell "REM Data", "T26:X26"
    WS_REM.Cells(26, 20).CopyFromRecordset RecordSet
    RecordSet.Close
    
    'REM
    
    If MONTHS > 0 Then
        sqlCmd = " SELECT DISTINCT  (SELECT  '" & FromDate & "'  ) AS DATEFROM,(SELECT  '" & ToDate & "' ) AS DATETO,(SELECT COUNT (*) FROM ( SELECT DISTINCT RG.EVENT_ID     FROM [DBO].[PFM_RG_CHART_T] RG  JOIN [ALL_FDM_EVENTS_T] EVE     ON EVE.ESN = RG.ENGINE_SERIALNO    AND EVE.EVENT_ID = RG.EVENT_ID  AND EVE.ENGINE_MODEL = RG.ENGINE_MODEL  AND EVE.TPP_ID = RG.TPP_ID   WHERE EVE.EVENT_TYPE='REM'  AND EVE.TPP_ID = " & TPP_ID & " )E )AS NO_OF_EVENTS"
    Else
        sqlCmd = " SELECT DISTINCT  (SELECT  DISTINCT  CONVERT(VARCHAR,DATE_FROM,101)DATE_FROM FROM INPUT_PARAMETERS_T WHERE TPP_ID = " & TPP_ID & ") AS DATEFROM,(SELECT  DISTINCT CONVERT(VARCHAR,DATE_TO,101)DATE_TO FROM INPUT_PARAMETERS_T WHERE TPP_ID = " & TPP_ID & ") AS DATETO,(SELECT COUNT (*) FROM ( SELECT DISTINCT RG.EVENT_ID     FROM [DBO].[PFM_RG_CHART_T] RG  JOIN [ALL_FDM_EVENTS_T] EVE     ON EVE.ESN = RG.ENGINE_SERIALNO    AND EVE.EVENT_ID = RG.EVENT_ID  AND EVE.ENGINE_MODEL = RG.ENGINE_MODEL  AND EVE.TPP_ID = RG.TPP_ID   WHERE EVE.EVENT_TYPE='REM'  AND EVE.TPP_ID = " & TPP_ID & " )E )AS NO_OF_EVENTS"
    End If
 
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    ClearCell "REM Data", "C5:C13"
    WS_REM.Cells(1, 27).CopyFromRecordset RecordSet
    RecordSet.Close
    
    sqlCmd = "SELECT TOP 1 'HRS' SELECTED_MEASURES,ISNULL(INTERCEPT,0) RG_ALPHA,  ISNULL(CUST_SLOPE,0) RG_BETA,    ISNULL(CUST_R2,0) R_POWER2,     ISNULL(CUST_INSTANTANEOUS_RATE,0) INST_RATE,    ISNULL(CUST_12M_ROLLING_RATE,0) MO12_RATE   FROM [DBO].[PFM_RG_CHART_T]  "
    sqlCmd = sqlCmd & " WHERE EVENT_TYPE= 'REM'   AND  TPP_ID = " & TPP_ID

    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    If RecordSet.RecordCount > 0 Then
        WS_REM.Cells(1, 30).CopyFromRecordset RecordSet
    Else
        RecordSet.Close
        RecordSet.Open "SELECT TOP 1 'HRS' SELECTED_MEASURES,0 , 0, 0, 0, 0  ", conn
        WS_REM.Cells(1, 30).CopyFromRecordset RecordSet
    End If
    
    'HYPOTHETICAL DATA
    sqlCmd = " SELECT TOP 1  CUMULATIVE_UTILIZATION , '',(SELECT MAX(ROWNUMBER) + 1 FROM(SELECT DISTINCT ESN ,  ROW_NUMBER() OVER (ORDER BY EVENT.EVENT_DATE) ROWNUMBER  FROM   ALL_FDM_EVENTS_T EVENT  INNER JOIN PFM_RG_CHART_T RG ON RG.ENGINE_MODEL = EVENT.ENGINE_MODEL AND RG.EVENT_TYPE = EVENT.EVENT_TYPE AND RG.EVENT_DATE = EVENT.EVENT_DATE AND RG.ENGINE_SERIALNO = EVENT.ESN AND RG.EVENT_ID = EVENT.EVENT_ID AND RG.TPP_ID =  EVENT.TPP_ID AND UPPER(RG.RATE) = CASE WHEN UPPER(EVENT.EVENT_CAUSE) ='NON-BASIC' THEN 'TOTAL' ELSE UPPER(EVENT.EVENT_CAUSE) END WHERE EVENT.EVENT_TYPE = 'REM' AND EVENT.TPP_ID =  " & TPP_ID & " ) E ) AS COUNTS FROM PFM_RG_CHART_T WHERE EVENT_TYPE = 'REM'  AND EVENT_ID = 0  AND TPP_ID = " & TPP_ID & " ORDER BY CUST_EVENT_COUNT DESC"
    
    WS_REM.Cells(24, 16) = ""
    WS_REM.Cells(24, 18) = ""
    
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    WS_REM.Cells(24, 16).CopyFromRecordset RecordSet
    RecordSet.Close
    
    WS_REM.Range("AA1:AI1").Copy
    WS_REM.Range("C5:C13").PasteSpecial Transpose:=True
    ClearCell "REM Data", "AA1:AI1"
    WS_REM.Range("C5:C13").Font.Size = 8
    WS_REM.Range("C5:C13").HorizontalAlignment = xlRight
    

    '======================================================================
    S1 = "REM Data"
    RC = Sheets(S1).Cells(Rows.Count, 20).End(xlUp).Row
    Dim Carray
    If RC > 25 Then
        Carray = Sheets(S1).Range(Sheets(S1).Cells(26, 20), Sheets(S1).Cells(RC, 20)).Value
        Sheets(S1).Range(Sheets(S1).Cells(26, 20), Sheets(S1).Cells(RC, 20)).Value = Carray
        If RC > 26 Then Erase Carray
    End If
End Sub
'******** REM Tab *****************************

'******** SVR Tab *****************************
Sub GetDataFor_SVR_FDM_EVENTS_T(Optional MONTHS As Variant, Optional AirlineNameForCG As String)
    Dim sqlCmd As String
    Dim RecordSet  As ADODB.RecordSet
    
     Dim WS_SVR As Worksheet
    Set WS_SVR = Sheets("SVR Data")
    
    Dim FromDate As Date
    Dim ToDate As Date
    
    If MONTHS > 0 Then
        FromDate = DateAdd("m", -MONTHS, Date)
        ToDate = Date
    End If

    FDays_I = DatePart("d", FromDate)
    FromDate_I = DateAdd("d", -FDays_I + 1, FromDate)
    
    TDays_I = DatePart("d", ToDate)
    ToDate_I = DateAdd("d", -TDays_I, ToDate)
        
    'SVR_TOP10_EVENTS_FLEET_DATA_T
    sqlCmd = ""
    
    If AirlineNameForCG = "" Then
        If MONTHS > 0 Then
            sqlCmd = " SELECT TOP 10 Component_Event_Driver,COUNT(Component_Event_Driver) FROM  SVR_TOP10_EVENTS_FLEET_DATA_T WHERE EVENT_DATE >= '" & FromDate & "'  AND TPP_ID = " & TPP_ID & "  GROUP BY Component_Event_Driver ORDER BY COUNT(Component_Event_Driver) DESC "
        Else
            sqlCmd = " SELECT TOP 10 Component_Event_Driver,COUNT(Component_Event_Driver) FROM  SVR_TOP10_EVENTS_FLEET_DATA_T  WHERE TPP_ID = " & TPP_ID & "  GROUP BY Component_Event_Driver ORDER BY COUNT(Component_Event_Driver) DESC  "
        End If
    Else
        If MONTHS > 0 Then
            sqlCmd = " SELECT TOP 10 Component_Event_Driver,COUNT(Component_Event_Driver) FROM  SVR_TOP10_EVENTS_FLEET_DATA_T WHERE EVENT_DATE >= '" & FromDate & "'  AND TPP_ID = " & TPP_ID & " AND AIRLINE_NAME IN (" & AirlineNameForCG & ") GROUP BY Component_Event_Driver ORDER BY COUNT(Component_Event_Driver) DESC "
        Else
            sqlCmd = " SELECT TOP 10 Component_Event_Driver,COUNT(Component_Event_Driver) FROM  SVR_TOP10_EVENTS_FLEET_DATA_T  WHERE TPP_ID = " & TPP_ID & " AND AIRLINE_NAME IN (" & AirlineNameForCG & ") GROUP BY Component_Event_Driver ORDER BY COUNT(Component_Event_Driver) DESC  "
        End If
    End If
   
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    ClearCell "SVR Data", "H6:I6"
    WS_SVR.Cells(6, 8).CopyFromRecordset RecordSet
    RecordSet.Close

    'SVR_TOP10_EVENTS_AIRLINE_DATA_T() 'ALL
    sqlCmd = ""
    If MONTHS > 0 Then
        sqlCmd = " SELECT TOP 10 Component_Event_Driver,COUNT(Component_Event_Driver) FROM  SVR_TOP10_EVENTS_AIRLINE_DATA_T WHERE EVENT_DATE >= '" & FromDate & "'  AND TPP_ID = " & TPP_ID & "  GROUP BY Component_Event_Driver ORDER BY COUNT(Component_Event_Driver) DESC"
    Else
        sqlCmd = " SELECT TOP 10 Component_Event_Driver,COUNT(Component_Event_Driver) FROM  SVR_TOP10_EVENTS_AIRLINE_DATA_T  WHERE TPP_ID = " & TPP_ID & "  GROUP BY Component_Event_Driver ORDER BY COUNT(Component_Event_Driver) DESC"
    End If
    
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    ClearCell "SVR Data", "K6:L6"
    WS_SVR.Cells(6, 11).CopyFromRecordset RecordSet
    RecordSet.Close

    'SVR_TOP10_EVENTS_AIRLINE_DATA_T() ' 12 Months Basic
    dt = DateAdd("m", -12, ToDate_I)
    sqlCmd = ""
    sqlCmd = "SELECT TOP 10 Component_Event_Driver,COUNT(Component_Event_Driver)  FROM SVR_TOP10_EVENTS_AIRLINE_DATA_T  "
    sqlCmd = sqlCmd & " WHERE EVENT_DATE >= '" & dt & "' "
    sqlCmd = sqlCmd & " AND EVENT_DATE <= '" & ToDate_I & "' "
    sqlCmd = sqlCmd & " AND UPPER(ENG_CAUSED_NON_ENG_CAUSED) ='BASIC' AND TPP_ID = " & TPP_ID & "  "
    sqlCmd = sqlCmd & " GROUP BY Component_Event_Driver ORDER BY COUNT(Component_Event_Driver) DESC  "
    
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    ClearCell "SVR Data", "Q6:R6"
    WS_SVR.Cells(6, 17).CopyFromRecordset RecordSet
    RecordSet.Close
    
    'SVR_TOP10_EVENTS_AIRLINE_DATA_T() ' 12 Months Basic and Non Basic
    dt = DateAdd("m", -12, ToDate_I)
    sqlCmd = ""
    sqlCmd = "SELECT TOP 10 Component_Event_Driver,COUNT(Component_Event_Driver)  FROM SVR_TOP10_EVENTS_AIRLINE_DATA_T  "
    sqlCmd = sqlCmd & " WHERE EVENT_DATE >= '" & dt & "' "
    sqlCmd = sqlCmd & " AND EVENT_DATE <= '" & ToDate_I & "' "
    sqlCmd = sqlCmd & " AND TPP_ID = " & TPP_ID & "  "
    sqlCmd = sqlCmd & " GROUP BY Component_Event_Driver ORDER BY COUNT(Component_Event_Driver) DESC  "
            
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    ClearCell "SVR Data", "N6:O6"
    WS_SVR.Cells(6, 14).CopyFromRecordset RecordSet
    RecordSet.Close
    
    'SVR_FDM_EVENTS_T
    
    sqlCmd = " SELECT DISTINCT ESN , CONVERT(VARCHAR(10),EVENT.EVENT_DATE,105) EVENT_DATE , EVENT.EVENT_TYPE ,  EVENT.COMPONENT_EVENT_DRIVER ,  TAIL_NUMBER  ,  AIRCRAFT_TYPE , EVENT.ENGINE_MODEL ,TSN ,CSN ,TSV ,CSV ,FDM_EVENT_NUMBER  , EVENT.EVENT_CAUSE AS RATE  ,BOTTOM_TASK_NUM  ,  ROUND(RG.CUMULATIVE_UTILIZATION,3) AS CUMULATIVE_UTILIZATION,   CASE    WHEN  ROUND(COALESCE(SUM (RG.CUMULATIVE_UTILIZATION ) OVER (ORDER BY EVENT.EVENT_DATE ASC ROWS BETWEEN 1 PRECEDING    AND 1 PRECEDING),0),3) = 0 THEN '0'   ELSE     (RG.CUMULATIVE_UTILIZATION - ROUND(COALESCE(SUM (RG.CUMULATIVE_UTILIZATION ) OVER (ORDER BY EVENT.EVENT_DATE ASC ROWS BETWEEN 1 PRECEDING    AND 1 PRECEDING),0),3))   END as ELAPSED_HOURS_BTW_EVENTS  ,  ROW_NUMBER() OVER (ORDER BY EVENT.EVENT_DATE) ROWNUMBER  FROM   ALL_FDM_EVENTS_T EVENT  INNER JOIN PFM_RG_CHART_T RG ON RG.ENGINE_MODEL = EVENT.ENGINE_MODEL AND RG.EVENT_TYPE = EVENT.EVENT_TYPE AND  RG.COMPONENT_EVENT_DRIVER = EVENT.COMPONENT_EVENT_DRIVER "
    sqlCmd = sqlCmd & " AND RG.EVENT_DATE = EVENT.EVENT_DATE AND RG.ENGINE_SERIALNO = EVENT.ESN AND RG.EVENT_ID = EVENT.EVENT_ID  AND UPPER(RG.RATE) = CASE WHEN UPPER(EVENT.EVENT_CAUSE) ='NON-BASIC' THEN 'TOTAL' ELSE UPPER(EVENT.EVENT_CAUSE) END  AND EVENT.TPP_ID = RG.TPP_ID AND RG.TPP_ID = " & TPP_ID
    sqlCmd = sqlCmd & " WHERE EVENT.EVENT_TYPE = 'SVR'  AND  EVENT.TPP_ID = " & TPP_ID & " ORDER BY ROWNUMBER DESC "
            
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    ClearCell "SVR Data", "B26:R26"
    WS_SVR.Cells(26, 2).CopyFromRecordset RecordSet
    RecordSet.Close
    
    'SVR_CalculationData
    sqlCmd = ""
    sqlCmd = " SELECT CONVERT(VARCHAR,CAST(AIR.[YEAR MONTH] + '01' AS DATE),101) as [YEAR MONTH],AIR.[Total Shop Visit Rate 12M],AIR.[Basic Shop Visit Rate 12M],FLEET.[Total Shop Visit Rate 12M],FLEET.[Basic Shop Visit Rate 12M]  "
    sqlCmd = sqlCmd & " from [FLEET_SIMPLE_STATISTICS] FLEET join [AIRLINE_SIMPLE_STATISTICS] AIR  ON AIR.[Engine Model] = FLEET.[Engine Model] AND AIR.[Year Month] = FLEET.[Year Month]  AND AIR.TPP_ID = FLEET.TPP_ID AND  AIR.TPP_ID = " & TPP_ID
    If MONTHS > 0 Then
        Days = DatePart("d", FromDate)
        FromDate = DateAdd("m", -MONTHS, Date)
        sqlCmd = sqlCmd & " WHERE CONVERT(VARCHAR,CAST(AIR.[YEAR MONTH] + '01' AS DATE),101) >= Cast('" & FromDate & "' as Date)"
    End If

    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    ClearCell "SVR Data", "T26:X26"
    WS_SVR.Cells(26, 20).CopyFromRecordset RecordSet
    RecordSet.Close
    
    'SVR
    If MONTHS > 0 Then
        sqlCmd = " SELECT DISTINCT  (SELECT  '" & FromDate & "'  ) AS DATEFROM,(SELECT  '" & ToDate & "' ) AS DATETO,(SELECT COUNT (*) FROM ( SELECT DISTINCT RG.EVENT_ID     FROM [DBO].[PFM_RG_CHART_T] RG  JOIN [ALL_FDM_EVENTS_T] EVE     ON EVE.ESN = RG.ENGINE_SERIALNO    AND EVE.EVENT_ID = RG.EVENT_ID  AND EVE.ENGINE_MODEL = RG.ENGINE_MODEL   AND EVE.TPP_ID = RG.TPP_ID   WHERE EVE.EVENT_TYPE='SVR'  AND EVE.TPP_ID = " & TPP_ID & " )E )AS NO_OF_EVENTS"
    Else
        sqlCmd = " SELECT DISTINCT  (SELECT  DISTINCT  CONVERT(VARCHAR,DATE_FROM,101)DATE_FROM FROM INPUT_PARAMETERS_T WHERE TPP_ID = " & TPP_ID & ") AS DATEFROM,(SELECT  DISTINCT CONVERT(VARCHAR,DATE_TO,101)DATE_TO FROM INPUT_PARAMETERS_T WHERE TPP_ID = " & TPP_ID & ") AS DATETO,(SELECT COUNT (*) FROM ( SELECT DISTINCT RG.EVENT_ID     FROM [DBO].[PFM_RG_CHART_T] RG  JOIN [ALL_FDM_EVENTS_T] EVE     ON EVE.ESN = RG.ENGINE_SERIALNO    AND EVE.EVENT_ID = RG.EVENT_ID  AND EVE.ENGINE_MODEL = RG.ENGINE_MODEL   AND EVE.TPP_ID = RG.TPP_ID   WHERE EVE.EVENT_TYPE='SVR'  AND EVE.TPP_ID = " & TPP_ID & ")E )AS NO_OF_EVENTS"
    End If
 
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    ClearCell "SVR Data", "C5:C13"
    WS_SVR.Cells(1, 27).CopyFromRecordset RecordSet
    RecordSet.Close
    
    sqlCmd = "SELECT TOP 1 'HRS' SELECTED_MEASURES,ISNULL(INTERCEPT,0) RG_ALPHA,  ISNULL(CUST_SLOPE,0) RG_BETA,    ISNULL(CUST_R2,0) R_POWER2,     ISNULL(CUST_INSTANTANEOUS_RATE,0) INST_RATE,    ISNULL(CUST_12M_ROLLING_RATE,0) MO12_RATE   FROM [DBO].[PFM_RG_CHART_T]  "
    sqlCmd = sqlCmd & " WHERE EVENT_TYPE= 'SVR'  AND  TPP_ID = " & TPP_ID
    
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    If RecordSet.RecordCount > 0 Then
        WS_SVR.Cells(1, 30).CopyFromRecordset RecordSet
    Else
        RecordSet.Close
        RecordSet.Open "SELECT TOP 1 'HRS' SELECTED_MEASURES,0 , 0, 0, 0, 0  ", conn
        WS_SVR.Cells(1, 30).CopyFromRecordset RecordSet
    End If
    
    'HYPOTHETICAL DATA
    sqlCmd = " SELECT TOP 1  CUMULATIVE_UTILIZATION , '',(SELECT MAX(ROWNUMBER) + 1 FROM(SELECT DISTINCT ESN ,  ROW_NUMBER() OVER (ORDER BY EVENT.EVENT_DATE) ROWNUMBER  FROM   ALL_FDM_EVENTS_T EVENT  INNER JOIN PFM_RG_CHART_T RG ON RG.ENGINE_MODEL = EVENT.ENGINE_MODEL AND RG.EVENT_TYPE = EVENT.EVENT_TYPE AND RG.EVENT_DATE = EVENT.EVENT_DATE AND RG.ENGINE_SERIALNO = EVENT.ESN AND RG.EVENT_ID = EVENT.EVENT_ID AND RG.TPP_ID =  EVENT.TPP_ID AND UPPER(RG.RATE) = CASE WHEN UPPER(EVENT.EVENT_CAUSE) ='NON-BASIC' THEN 'TOTAL' ELSE UPPER(EVENT.EVENT_CAUSE) END WHERE EVENT.EVENT_TYPE = 'SVR' AND EVENT.TPP_ID =  " & TPP_ID & " ) E ) AS COUNTS FROM PFM_RG_CHART_T WHERE EVENT_TYPE = 'SVR'  AND EVENT_ID = 0  AND TPP_ID = " & TPP_ID & " ORDER BY CUST_EVENT_COUNT DESC"
    
    WS_SVR.Cells(24, 16) = ""
    WS_SVR.Cells(24, 18) = ""
    
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    WS_SVR.Cells(24, 16).CopyFromRecordset RecordSet
    RecordSet.Close
    
    WS_SVR.Range("AA1:AI1").Copy
    WS_SVR.Range("C5:C13").PasteSpecial Transpose:=True
    ClearCell "SVR Data", "AA1:AI1"
    WS_SVR.Range("C5:C13").Font.Size = 8
    WS_SVR.Range("C5:C13").HorizontalAlignment = xlRight
    
    '======================================================================
    S1 = "SVR Data"
    RC = Sheets(S1).Cells(Rows.Count, 20).End(xlUp).Row
    Dim Carray
    If RC > 25 Then
        Carray = Sheets(S1).Range(Sheets(S1).Cells(26, 20), Sheets(S1).Cells(RC, 20)).Value
        Sheets(S1).Range(Sheets(S1).Cells(26, 20), Sheets(S1).Cells(RC, 20)).Value = Carray
        If RC > 26 Then Erase Carray
    End If
End Sub
'******** SVR Tab *****************************

'******** SE Tab *****************************
Sub GetDataFor_SE_FDM_EVENTS_T(Optional MONTHS As Variant, Optional AirlineNameForCG As String)
    Dim sqlCmd As String
    Dim RecordSet  As ADODB.RecordSet
    
    'OpenSQLConnection
     Dim WS_SE As Worksheet
    Set WS_SE = Sheets("SE Data")
    
    Dim FromDate As Date
    Dim ToDate As Date
    
    If MONTHS > 0 Then
        FromDate = DateAdd("m", -MONTHS, Date)
        ToDate = Date
    End If
   
    FDays_I = DatePart("d", FromDate)
    FromDate_I = DateAdd("d", -FDays_I + 1, FromDate)
    
    TDays_I = DatePart("d", ToDate)
    ToDate_I = DateAdd("d", -TDays_I, ToDate)
    
    'SE_TOP10_EVENTS_FLEET_DATA_T() 'ALL
    sqlCmd = ""
    
    If AirlineNameForCG = "" Then
        If MONTHS > 0 Then
            sqlCmd = " SELECT TOP 10 Component_Event_Driver,COUNT(Component_Event_Driver) FROM  SE_TOP10_EVENTS_FLEET_DATA_T WHERE EVENT_DATE >= '" & FromDate & "'  AND TPP_ID = " & TPP_ID & "  GROUP BY Component_Event_Driver ORDER BY COUNT(Component_Event_Driver) DESC "
        Else
            sqlCmd = " SELECT TOP 10 Component_Event_Driver,COUNT(Component_Event_Driver) FROM  SE_TOP10_EVENTS_FLEET_DATA_T  WHERE TPP_ID = " & TPP_ID & "  GROUP BY Component_Event_Driver ORDER BY COUNT(Component_Event_Driver) DESC "
        End If
    Else
        If MONTHS > 0 Then
            sqlCmd = " SELECT TOP 10 Component_Event_Driver,COUNT(Component_Event_Driver) FROM  SE_TOP10_EVENTS_FLEET_DATA_T WHERE EVENT_DATE >= '" & FromDate & "'  AND TPP_ID = " & TPP_ID & " AND AIRLINE_NAME IN (" & AirlineNameForCG & ") GROUP BY Component_Event_Driver ORDER BY COUNT(Component_Event_Driver) DESC "
        Else
            sqlCmd = " SELECT TOP 10 Component_Event_Driver,COUNT(Component_Event_Driver) FROM  SE_TOP10_EVENTS_FLEET_DATA_T  WHERE TPP_ID = " & TPP_ID & " AND AIRLINE_NAME IN (" & AirlineNameForCG & ") GROUP BY Component_Event_Driver ORDER BY COUNT(Component_Event_Driver) DESC "
        End If
    End If
   
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    ClearCell "SE Data", "H6:I6"
    WS_SE.Cells(6, 8).CopyFromRecordset RecordSet
    RecordSet.Close

     'SE_TOP10_EVENTS_AIRLINE_DATA_T() 'ALL
    
    sqlCmd = ""
    If MONTHS > 0 Then
        sqlCmd = " SELECT TOP 10 Component_Event_Driver,COUNT(Component_Event_Driver) FROM  SE_TOP10_EVENTS_AIRLINE_DATA_T WHERE EVENT_DATE >= '" & FromDate & "'  AND TPP_ID = " & TPP_ID & "  GROUP BY Component_Event_Driver ORDER BY COUNT(Component_Event_Driver) DESC"
    Else
        sqlCmd = " SELECT TOP 10 Component_Event_Driver,COUNT(Component_Event_Driver) FROM  SE_TOP10_EVENTS_AIRLINE_DATA_T  WHERE TPP_ID = " & TPP_ID & "  GROUP BY Component_Event_Driver ORDER BY COUNT(Component_Event_Driver) DESC"
    End If
   
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    ClearCell "SE Data", "K6:L6"
    WS_SE.Cells(6, 11).CopyFromRecordset RecordSet
    RecordSet.Close
    
    'SE_TOP10_EVENTS_AIRLINE_DATA_T() ' 12 Months Basic
    dt = DateAdd("m", -12, ToDate_I)
    sqlCmd = ""
    sqlCmd = "SELECT TOP 10 Component_Event_Driver,COUNT(Component_Event_Driver)  FROM SE_TOP10_EVENTS_AIRLINE_DATA_T  "
    sqlCmd = sqlCmd & " WHERE EVENT_DATE >= '" & dt & "' "
    sqlCmd = sqlCmd & " AND EVENT_DATE <= '" & ToDate_I & "' "
    sqlCmd = sqlCmd & " AND UPPER(ENG_CAUSED_NON_ENG_CAUSED) ='BASIC' AND TPP_ID = " & TPP_ID & "  "
    sqlCmd = sqlCmd & " GROUP BY Component_Event_Driver ORDER BY COUNT(Component_Event_Driver) DESC  "
    
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    ClearCell "SE Data", "Q6:R6"
    WS_SE.Cells(6, 17).CopyFromRecordset RecordSet
    RecordSet.Close
    
    'SE_TOP10_EVENTS_AIRLINE_DATA_T() ' 12 Months Basic and Non Basic
    dt = DateAdd("m", -12, ToDate_I)
    sqlCmd = ""
    sqlCmd = "SELECT TOP 10 Component_Event_Driver,COUNT(Component_Event_Driver)  FROM SE_TOP10_EVENTS_AIRLINE_DATA_T  "
    sqlCmd = sqlCmd & " WHERE EVENT_DATE >= '" & dt & "' "
    sqlCmd = sqlCmd & " AND EVENT_DATE <= '" & ToDate_I & "' "
    sqlCmd = sqlCmd & " AND TPP_ID = " & TPP_ID & "  "
    sqlCmd = sqlCmd & " GROUP BY Component_Event_Driver ORDER BY COUNT(Component_Event_Driver) DESC  "
    
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    ClearCell "SE Data", "N6:O6"
    WS_SE.Cells(6, 14).CopyFromRecordset RecordSet
    RecordSet.Close
    
    'SE_FDM_EVENTS_T
    
    sqlCmd = " SELECT DISTINCT ESN , CONVERT(VARCHAR(10),EVENT.EVENT_DATE,105) EVENT_DATE , EVENT.EVENT_TYPE ,  EVENT.COMPONENT_EVENT_DRIVER ,  TAIL_NUMBER  ,  AIRCRAFT_TYPE , EVENT.ENGINE_MODEL ,TSN ,CSN ,TSV ,CSV ,FDM_EVENT_NUMBER  , EVENT.EVENT_CAUSE AS RATE  ,BOTTOM_TASK_NUM  ,  ROUND(RG.CUMULATIVE_UTILIZATION,3) AS CUMULATIVE_UTILIZATION,   CASE    WHEN  ROUND(COALESCE(SUM (RG.CUMULATIVE_UTILIZATION ) OVER (ORDER BY EVENT.EVENT_DATE ASC ROWS BETWEEN 1 PRECEDING    AND 1 PRECEDING),0),3) = 0 THEN '0'   ELSE     (RG.CUMULATIVE_UTILIZATION - ROUND(COALESCE(SUM (RG.CUMULATIVE_UTILIZATION ) OVER (ORDER BY EVENT.EVENT_DATE ASC ROWS BETWEEN 1 PRECEDING    AND 1 PRECEDING),0),3))   END as ELAPSED_HOURS_BTW_EVENTS  ,  ROW_NUMBER() OVER (ORDER BY EVENT.EVENT_DATE) ROWNUMBER  FROM   ALL_FDM_EVENTS_T EVENT  INNER JOIN PFM_RG_CHART_T RG ON RG.ENGINE_MODEL = EVENT.ENGINE_MODEL AND RG.EVENT_TYPE = EVENT.EVENT_TYPE AND  RG.COMPONENT_EVENT_DRIVER = EVENT.COMPONENT_EVENT_DRIVER "
    sqlCmd = sqlCmd & " AND RG.EVENT_DATE = EVENT.EVENT_DATE AND RG.ENGINE_SERIALNO = EVENT.ESN AND RG.EVENT_ID = EVENT.EVENT_ID  AND UPPER(RG.RATE) = CASE WHEN UPPER(EVENT.EVENT_CAUSE) ='NON-BASIC' THEN 'TOTAL' ELSE UPPER(EVENT.EVENT_CAUSE) END  AND EVENT.TPP_ID = RG.TPP_ID"
    sqlCmd = sqlCmd & " WHERE EVENT.EVENT_TYPE = 'SE' AND  EVENT.TPP_ID = " & TPP_ID & " ORDER BY ROWNUMBER DESC "
        
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    ClearCell "SE Data", "B26:R26"
    WS_SE.Cells(26, 2).CopyFromRecordset RecordSet
    RecordSet.Close

    'SE_CalculationData
    sqlCmd = ""
    sqlCmd = " SELECT CONVERT(VARCHAR,CAST(AIR.[YEAR MONTH] + '01' AS DATE),101) as [YEAR MONTH],AIR.[Total Significant Event Rate 12M],AIR.[Basic Significant Event Rate 12M],FLEET.[Total Significant Event Rate 12M],FLEET.[Basic Significant Event Rate 12M]"
    sqlCmd = sqlCmd & " from [FLEET_SIMPLE_STATISTICS] FLEET join [AIRLINE_SIMPLE_STATISTICS] AIR  ON AIR.[Engine Model] = FLEET.[Engine Model] AND AIR.[Year Month] = FLEET.[Year Month] AND AIR.TPP_ID = FLEET.TPP_ID AND  AIR.TPP_ID = " & TPP_ID
    If MONTHS > 0 Then
        Days = DatePart("d", FromDate)
        FromDate = DateAdd("m", -MONTHS, Date)
        sqlCmd = sqlCmd & " WHERE CONVERT(VARCHAR,CAST(AIR.[YEAR MONTH] + '01' AS DATE),101) >= Cast('" & FromDate & "' as Date)"
    End If
    
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    ClearCell "SE Data", "T26:X26"
    WS_SE.Cells(26, 20).CopyFromRecordset RecordSet
    RecordSet.Close
    
    'SE
    If MONTHS > 0 Then
        sqlCmd = " SELECT DISTINCT  (SELECT  '" & FromDate & "'  ) AS DATEFROM,(SELECT  '" & ToDate & "' ) AS DATETO,(SELECT COUNT (*) FROM ( SELECT DISTINCT RG.EVENT_ID     FROM [DBO].[PFM_RG_CHART_T] RG  JOIN [ALL_FDM_EVENTS_T] EVE     ON EVE.ESN = RG.ENGINE_SERIALNO    AND EVE.EVENT_ID = RG.EVENT_ID  AND EVE.ENGINE_MODEL = RG.ENGINE_MODEL  AND EVE.TPP_ID = RG.TPP_ID  WHERE EVE.EVENT_TYPE='SE' AND EVE.TPP_ID = " & TPP_ID & ")E )AS NO_OF_EVENTS"
    Else
        sqlCmd = " SELECT DISTINCT  (SELECT  DISTINCT  CONVERT(VARCHAR,DATE_FROM,101)DATE_FROM FROM INPUT_PARAMETERS_T WHERE TPP_ID = " & TPP_ID & ") AS DATEFROM,(SELECT  DISTINCT CONVERT(VARCHAR,DATE_TO,101)DATE_TO FROM INPUT_PARAMETERS_T WHERE TPP_ID = " & TPP_ID & ") AS DATETO,(SELECT COUNT (*) FROM ( SELECT DISTINCT RG.EVENT_ID     FROM [DBO].[PFM_RG_CHART_T] RG  JOIN [ALL_FDM_EVENTS_T] EVE     ON EVE.ESN = RG.ENGINE_SERIALNO    AND EVE.EVENT_ID = RG.EVENT_ID  AND EVE.ENGINE_MODEL = RG.ENGINE_MODEL AND EVE.TPP_ID = RG.TPP_ID WHERE EVE.EVENT_TYPE='SE' AND EVE.TPP_ID = " & TPP_ID & ")E )AS NO_OF_EVENTS"
    End If
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    ClearCell "SE Data", "C5:C13"
    WS_SE.Cells(1, 27).CopyFromRecordset RecordSet
    RecordSet.Close
    
    sqlCmd = "SELECT TOP 1 'DEP' SELECTED_MEASURES,ISNULL(INTERCEPT,0) RG_ALPHA,  ISNULL(CUST_SLOPE,0) RG_BETA,    ISNULL(CUST_R2,0) R_POWER2,     ISNULL(CUST_INSTANTANEOUS_RATE,0) INST_RATE,    ISNULL(CUST_12M_ROLLING_RATE,0) MO12_RATE   FROM [DBO].[PFM_RG_CHART_T]  "
    sqlCmd = sqlCmd & " WHERE EVENT_TYPE= 'SE'   AND  TPP_ID = " & TPP_ID
    
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    If RecordSet.RecordCount > 0 Then
        WS_SE.Cells(1, 30).CopyFromRecordset RecordSet
    Else
        RecordSet.Close
        RecordSet.Open "SELECT TOP 1 'DEP' SELECTED_MEASURES,0 , 0, 0, 0, 0  ", conn
        WS_SE.Cells(1, 30).CopyFromRecordset RecordSet
    End If
    
    'HYPOTHETICAL DATA
    sqlCmd = " SELECT TOP 1  CUMULATIVE_UTILIZATION , '',(SELECT MAX(ROWNUMBER) + 1 FROM(SELECT DISTINCT ESN ,  ROW_NUMBER() OVER (ORDER BY EVENT.EVENT_DATE) ROWNUMBER  FROM   ALL_FDM_EVENTS_T EVENT  INNER JOIN PFM_RG_CHART_T RG ON RG.ENGINE_MODEL = EVENT.ENGINE_MODEL AND RG.EVENT_TYPE = EVENT.EVENT_TYPE AND RG.EVENT_DATE = EVENT.EVENT_DATE AND RG.ENGINE_SERIALNO = EVENT.ESN AND RG.EVENT_ID = EVENT.EVENT_ID AND RG.TPP_ID =  EVENT.TPP_ID AND UPPER(RG.RATE) = CASE WHEN UPPER(EVENT.EVENT_CAUSE) ='NON-BASIC' THEN 'TOTAL' ELSE UPPER(EVENT.EVENT_CAUSE) END WHERE EVENT.EVENT_TYPE = 'SE' AND EVENT.TPP_ID =  " & TPP_ID & " ) E ) AS COUNTS FROM PFM_RG_CHART_T WHERE EVENT_TYPE = 'SE'  AND EVENT_ID = 0 AND TPP_ID = " & TPP_ID & " ORDER BY CUST_EVENT_COUNT DESC"
    
    WS_SE.Cells(24, 16) = ""
    WS_SE.Cells(24, 18) = ""
    
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    WS_SE.Cells(24, 16).CopyFromRecordset RecordSet
    RecordSet.Close
    
    WS_SE.Range("AA1:AI1").Copy
    WS_SE.Range("C5:C13").PasteSpecial Transpose:=True
    ClearCell "SE Data", "AA1:AI1"
    WS_SE.Range("C5:C13").Font.Size = 8
    WS_SE.Range("C5:C13").HorizontalAlignment = xlRight
    
    '======================================================================
    S1 = "SE Data"
    RC = Sheets(S1).Cells(Rows.Count, 20).End(xlUp).Row
    Dim Carray
    If RC > 25 Then
        Carray = Sheets(S1).Range(Sheets(S1).Cells(26, 20), Sheets(S1).Cells(RC, 20)).Value
        Sheets(S1).Range(Sheets(S1).Cells(26, 20), Sheets(S1).Cells(RC, 20)).Value = Carray
        If RC > 26 Then Erase Carray
    End If
End Sub
'******** SE Tab End *****************************

'======================================
Sub ResetHeadingsOnAllTabs()
    Dim allSheets As Variant
    Dim i As Integer
    Dim SheetToFind As String
    
    Dim WS As Worksheet
    
    'WS.Activate
    
    allSheets = Array("IFSD Data", "TOA Data", "Interruption Data", "UER Data", _
                            "Departure Reliability Data")
    
    For i = 0 To UBound(allSheets)
    SheetToFind = allSheets(i)
        Set WS = Sheets(SheetToFind)
        WS.Activate
        WS.Cells(25, 2).Value = "Esn"
        WS.Cells(25, 3).Value = "Event Date"
        WS.Cells(25, 4).Value = "Event Type"
        WS.Cells(25, 5).Value = "Event Driver"
        WS.Cells(25, 6).Value = "Tail Number"
        WS.Cells(25, 7).Value = "Aircraft Type"
        WS.Cells(25, 8).Value = "Engine Model"
        WS.Cells(25, 9).Value = "TSN"
        WS.Cells(25, 10).Value = "CSN"
        WS.Cells(25, 11).Value = "TSV"
        WS.Cells(25, 12).Value = "CSV"
        WS.Cells(25, 13).Value = "Event Number"
        WS.Cells(25, 14).Value = "Rate"
        WS.Cells(25, 15).Value = "ATA"
        WS.Cells(25, 16).Value = "Cumulative"
        WS.Cells(25, 17).Value = "Elapsed Hours Btw Events"
        WS.Cells(25, 18).Value = "Count"
    Next i
End Sub

Sub GetOperationalEventsData()

    '================================
    ' Last updated: 02/27/2018
    ' Code by TCS & Asko Soimakallio
    '================================

    S0 = "Supporting Data"
    S1 = "Op Events"
    S2 = "Calculation Source"
    
    Dim sqlCmd As String
    Dim RecordSet  As ADODB.RecordSet

    sqlCmd = " SELECT CONVERT(VARCHAR(10),EVENT_DATE,101) EVENT_DATE   ,CONVERT(VARCHAR(10),ENGINE_INSTALL_DATE,101) ENGINE_INSTALL_DATE  ,EVENT_NO   ,ENGINE_SERIAL_NUMBER   ,AIRCRAFT_TYPE  ,AIRLINE_CODE   ,AIRLINE_NAME   ,ENGINE_MODEL   ,ENGINE_SERIES   ,CONVERT(INT,ISNULL(ENGINE_THRUST,0))ENGINE_THRUST  ,BOTTOM_FUNCTION    ,BOTTOM_FUNC_DESCR  ,COMPONENT_EVENT_DRIVER ,  RCAUSE_DEFECT_NAME ,RCAUSE_DEFECT_LOCATION ,CONVERT(INT,ISNULL(ENGINE_TIME_SINCE_NEW,0)) ENGINE_TIME_SINCE_NEW, CONVERT(INT,ISNULL(ENGINE_CYCLES_SINCE_NEW,0)) ENGINE_CYCLES_SINCE_NEW,CONVERT(INT,ISNULL(ENGINE_TIME_SINCE_INSTAL,0)) ENGINE_TIME_SINCE_INSTAL,CONVERT(INT,ISNULL(ENGINE_CYCLES_SINCE_INSTAL,0)) ENGINE_CYCLES_SINCE_INSTAL,CONVERT(INT,ISNULL(ENGINE_TIME_SINCE_SV,0)) ENGINE_TIME_SINCE_SV ,CONVERT(INT,ISNULL(ENGINE_CYCLES_SINCE_SV,0)) ENGINE_CYCLES_SINCE_SV ,DISRUPTION_NAME, "
    sqlCmd = sqlCmd & " SIDE_EFFECT_DES ,BASIC_NONBASIC ,SIGNIFICANT_EVENT  ,CONVERT(INT,ISNULL(CURRENT_REMOVAL_COUNT,0))CURRENT_REMOVAL_COUNT  ,CONVERT(INT,ISNULL(CURRENT_SHOP_VISIT_COUNT,0))CURRENT_SHOP_VISIT_COUNT  ,SHOP_VISIT_SC_UN   ,REMOVAL_SC_UN  ,SHOP_VISIT_REASON  ,REMOVAL_REASON ,CONVERT(INT,ISNULL(DELAY_U,0))DELAY_U    ,PSE_CAUSE_DESC ,FPR_FLAG   ,CONVERT(INT,ISNULL(HOURS_SINCE_FPR,0))HOURS_SINCE_FPR    ,CONVERT(INT,ISNULL(CYCLES_SINCE_FPR,0)) CYCLES_SINCE_FPR   ,ENGINE_WORK_SCOPE ,MAINTENANCE_ACTION_ACTION,MAINTENANCE_ACTION_CATEGORY FROM FLEET_OPERATIONAL_EVENTS_T  WHERE TPP_ID = " & TPP_ID & "  ORDER BY EVENT_DATE "

    'Set RecordSet = New ADODB.RecordSet
    'RecordSet.Open sqlCmd, conn
    
    Dim cmd As New ADODB.Command
    cmd.ActiveConnection = conn
    cmd.CommandTimeout = 0
    cmd.CommandType = adCmdText
    cmd.CommandText = sqlCmd
    Set RecordSet = cmd.Execute(, , adCmdText)

    RCC = Sheets(S1).Cells(Rows.Count, 1).End(xlUp).Row
    Sheets(S1).Rows("1:" & RCC).Clear
    
    Sheets(S1).Columns(4).NumberFormat = "@"
    Sheets(S1).Columns(7).NumberFormat = "@"
    Sheets(S1).Cells(1, 1).CopyFromRecordset RecordSet

    OPrc = Sheets(S1).Cells(Rows.Count, 1).End(xlUp).Row
    opCC = 40
    
    OParray = Sheets(S1).Range(Sheets(S1).Cells(1, 1), Sheets(S1).Cells(OPrc, opCC + 1)).Value
    
'    RecordSet.Close
    
    Sheets(S0).Range(Sheets(S0).Cells(31, 13), Sheets(S0).Cells(54, 16)).Clear
    Dim SVarray
    SVarray = Sheets(S0).Range(Sheets(S0).Cells(31, 13), Sheets(S0).Cells(54, 16)).Value
    
    For i = 1 To 24
        For j = 1 To 4
            SVarray(i, j) = 0
        Next j
    Next i
    
    UpdateDate = Sheets(S2).Cells(2, 2).Value
    YTDdate = CDate(DateSerial(Year(UpdateDate), 1, 1))
    RateEndDate = (UpdateDate - Day(UpdateDate))
    EngineSeries = Sheets(S0).Cells(8, 10).Value

    RateStartDate = CDate(DateSerial(Year(UpdateDate) - 1, Month(UpdateDate), 1))
    
    FleetTotal1 = 0
    FleetTotal2 = 0
    FleetBasic1 = 0
    FleetBasic2 = 0
    
    YFleetTotal1 = 0
    YFleetTotal2 = 0
    YFleetBasic1 = 0
    YFleetBasic2 = 0
    
    TOWcolH1 = 20
    TOWcolC1 = 21
    
    TOWcolH2 = 35
    TOWcolC2 = 36
    
    BYTDifsd = 0
    BYTDtoa = 0
    BYTDint = 0
    BYTDse = 0
    BYTDuer = 0
    BYTDdc = 0
    
    FBYTDifsd = 0
    FBYTDtoa = 0
    FBYTDint = 0
    FBYTDse = 0
    FBYTDuer = 0
    FBYTDdc = 0
        
    TYTDifsd = 0
    TYTDtoa = 0
    TYTDint = 0
    TYTDse = 0
    TYTDuer = 0
    TYTDdc = 0
        
    FTYTDifsd = 0
    FTYTDtoa = 0
    FTYTDint = 0
    FTYTDse = 0
    FTYTDuer = 0
    FTYTDdc = 0
    
    If UBound(OParray) > 1 Then
    
        For k = 15 To 19
            AirlineN = Sheets(S0).Cells(k, 13).Value
            
            If AirlineN <> "" Then
                For ii = 1 To UBound(OParray)
                
                    If k = 15 Then
                        ' YTD Events
                        If CDate(OParray(ii, 1)) >= YTDdate Then
                            If InStr(OParray(ii, 22), "IFSD") > 0 Then
                                FTYTDifsd = FTYTDifsd + 1
                                If OParray(ii, 24) = "Basic" Then
                                    FBYTDifsd = FBYTDifsd + 1
                                End If
                            End If
                            If InStr(OParray(ii, 22), "TOA") > 0 Then
                                FTYTDtoa = FTYTDtoa + 1
                                If OParray(ii, 24) = "Basic" Then
                                    FBYTDtoa = FBYTDtoa + 1
                                End If
                            End If
                            If InStr(OParray(ii, 22), "INTERRUPTION") > 0 Then
                                FTYTDint = FTYTDint + 1
                                If OParray(ii, 24) = "Basic" Then
                                    FBYTDint = FBYTDint + 1
                                End If
                            End If
                            If InStr(OParray(ii, 25), "Y") > 0 Then
                                FTYTDse = FTYTDse + 1
                                If OParray(ii, 24) = "Basic" Then
                                    FBYTDse = FBYTDse + 1
                                End If
                            End If
                            If InStr(OParray(ii, 29), "U") > 0 Then
                                FTYTDuer = FTYTDuer + 1
                                If OParray(ii, 24) = "Basic" Then
                                    FBYTDuer = FBYTDuer + 1
                                End If
                            End If
                            If (InStr(OParray(ii, 22), "DELAY") > 0 Or InStr(OParray(ii, 22), "CANCELLATION") > 0) Then
                                FTYTDdc = FTYTDdc + 1
                                If OParray(ii, 24) = "Basic" Then
                                    FBYTDdc = FBYTDdc + 1
                                End If
                            End If
                        End If
                    End If
                
                    ' YTD Events
                    If CDate(OParray(ii, 1)) >= YTDdate And InStr(OParray(ii, 6), AirlineN) > 0 Then
                        If InStr(OParray(ii, 22), "IFSD") > 0 Then
                            TYTDifsd = TYTDifsd + 1
                            If OParray(ii, 24) = "Basic" Then
                                BYTDifsd = BYTDifsd + 1
                            End If
                        End If
                        If InStr(OParray(ii, 22), "TOA") > 0 Then
                            TYTDtoa = TYTDtoa + 1
                            If OParray(ii, 24) = "Basic" Then
                                BYTDtoa = BYTDtoa + 1
                            End If
                        End If
                        If InStr(OParray(ii, 22), "INTERRUPTION") > 0 Then
                            TYTDint = TYTDint + 1
                            If OParray(ii, 24) = "Basic" Then
                                BYTDint = BYTDint + 1
                            End If
                        End If
                        If InStr(OParray(ii, 25), "Y") > 0 Then
                            TYTDse = TYTDse + 1
                            If OParray(ii, 24) = "Basic" Then
                                BYTDse = BYTDse + 1
                            End If
                        End If
                        If InStr(OParray(ii, 29), "U") > 0 Then
                            TYTDuer = TYTDuer + 1
                            If OParray(ii, 24) = "Basic" Then
                                BYTDuer = BYTDuer + 1
                            End If
                        End If
                        If (InStr(OParray(ii, 22), "DELAY") > 0 Or InStr(OParray(ii, 22), "CANCELLATION") > 0) Then
                            TYTDdc = TYTDdc + 1
                            If OParray(ii, 24) = "Basic" Then
                                BYTDdc = BYTDdc + 1
                            End If
                        End If
                    End If
                    
                    ' Last 12M
                    If CDate(OParray(ii, 1)) >= RateStartDate And CDate(OParray(ii, 1)) <= RateEndDate Then
                    
                        ' SV
                        If (OParray(ii, 28) = "S" Or OParray(ii, 28) = "U") Then
                            If InStr(OParray(ii, 6), AirlineN) > 0 Then
                                SVarray(1, 1) = SVarray(1, 1) + 1
                                FleetTotal1 = FleetTotal1 + 1
                                SVarray(3, 1) = SVarray(3, 1) + OParray(ii, TOWcolH1)
                                SVarray(4, 1) = SVarray(4, 1) + OParray(ii, TOWcolH1)
                                SVarray(5, 1) = SVarray(5, 1) + OParray(ii, TOWcolC1)
                                SVarray(6, 1) = SVarray(6, 1) + OParray(ii, TOWcolC1)
                                
                                If OParray(ii, 28) = "S" Then SVarray(2, 1) = SVarray(2, 1) + 1
                                
                                If OParray(ii, 24) = "Basic" Then
                                    SVarray(7, 1) = SVarray(7, 1) + 1
                                    FleetBasic1 = FleetBasic1 + 1
                                    SVarray(9, 1) = SVarray(9, 1) + OParray(ii, TOWcolH1)
                                    SVarray(10, 1) = SVarray(10, 1) + OParray(ii, TOWcolH1)
                                    SVarray(11, 1) = SVarray(11, 1) + OParray(ii, TOWcolC1)
                                    SVarray(12, 1) = SVarray(12, 1) + OParray(ii, TOWcolC1)
                                    If OParray(ii, 28) = "S" Then SVarray(8, 1) = SVarray(8, 1) + 1
                                End If
                            Else
                                FleetTotal1 = FleetTotal1 + 1
                                SVarray(4, 1) = SVarray(4, 1) + OParray(ii, TOWcolH1)
                                SVarray(6, 1) = SVarray(6, 1) + OParray(ii, TOWcolC1)
                                If OParray(ii, 24) = "Basic" Then
                                    FleetBasic1 = FleetBasic1 + 1
                                    SVarray(10, 1) = SVarray(10, 1) + OParray(ii, TOWcolH1)
                                    SVarray(12, 1) = SVarray(12, 1) + OParray(ii, TOWcolC1)
                                End If
                            End If
                        End If
                        ' PERF/OVH
                        If (OParray(ii, 28) = "S" Or OParray(ii, 28) = "U") And (OParray(ii, 34) = "YES") Then
                            If InStr(OParray(ii, 6), AirlineN) > 0 Then
                                SVarray(1, 2) = SVarray(1, 2) + 1
                                FleetTotal2 = FleetTotal2 + 1
                                SVarray(3, 2) = SVarray(3, 2) + OParray(ii, TOWcolH2)
                                SVarray(4, 2) = SVarray(4, 2) + OParray(ii, TOWcolH2)
                                SVarray(5, 2) = SVarray(5, 2) + OParray(ii, TOWcolC2)
                                SVarray(6, 2) = SVarray(6, 2) + OParray(ii, TOWcolC2)
                                
                                If OParray(ii, 28) = "S" Then SVarray(2, 2) = SVarray(2, 2) + 1
                                
                                If OParray(ii, 24) = "Basic" Then
                                    SVarray(7, 2) = SVarray(7, 2) + 1
                                    FleetBasic2 = FleetBasic2 + 1
                                    SVarray(9, 2) = SVarray(9, 2) + OParray(ii, TOWcolH2)
                                    SVarray(10, 2) = SVarray(10, 2) + OParray(ii, TOWcolH2)
                                    SVarray(11, 2) = SVarray(11, 2) + OParray(ii, TOWcolC2)
                                    SVarray(12, 2) = SVarray(12, 2) + OParray(ii, TOWcolC2)
                                    If OParray(ii, 28) = "S" Then SVarray(8, 2) = SVarray(8, 2) + 1
                                End If
                            Else
                                FleetTotal2 = FleetTotal2 + 1
                                SVarray(4, 2) = SVarray(4, 2) + OParray(ii, TOWcolH2)
                                SVarray(6, 2) = SVarray(6, 2) + OParray(ii, TOWcolC2)
                                If OParray(ii, 24) = "Basic" Then
                                    FleetBasic2 = FleetBasic2 + 1
                                    SVarray(10, 2) = SVarray(10, 2) + OParray(ii, TOWcolH2)
                                    SVarray(12, 2) = SVarray(12, 2) + OParray(ii, TOWcolC2)
                                End If
                            End If
                        End If
                        ' QT
                        If InStr(OParray(ii, 38), "QT") > 0 Or InStr(OParray(ii, 38), "TOP") > 0 Then
                            If InStr(OParray(ii, 6), AirlineN) > 0 Then
                                SVarray(1, 3) = SVarray(1, 3) + 1
                                If OParray(ii, 28) = "S" Then SVarray(2, 3) = SVarray(2, 3) + 1
                                
                                If OParray(ii, 24) = "Basic" Then
                                    SVarray(7, 3) = SVarray(7, 3) + 1
                                    If OParray(ii, 28) = "S" Then SVarray(8, 3) = SVarray(8, 3) + 1
                                End If
                            End If
                        End If
                        ' REM
                        If (OParray(ii, 29) = "S" Or OParray(ii, 29) = "U") Then
                            If InStr(OParray(ii, 6), AirlineN) > 0 Then
                                SVarray(1, 4) = SVarray(1, 4) + 1
                                If OParray(ii, 29) = "S" Then SVarray(2, 4) = SVarray(2, 4) + 1
                                
                                If OParray(ii, 24) = "Basic" Then
                                    SVarray(7, 4) = SVarray(7, 4) + 1
                                    If OParray(ii, 29) = "S" Then SVarray(8, 4) = SVarray(8, 4) + 1
                                End If
                            End If
                        End If
                    End If
                    
                    ' YTD
                    If CDate(OParray(ii, 1)) >= YTDdate Then
                        ' SV
                        If (OParray(ii, 28) = "S" Or OParray(ii, 28) = "U") Then
                            If InStr(OParray(ii, 6), AirlineN) > 0 Then
                                SVarray(13, 1) = SVarray(13, 1) + 1
                                YFleetTotal1 = YFleetTotal1 + 1
                                SVarray(15, 1) = SVarray(15, 1) + OParray(ii, TOWcolH1)
                                SVarray(16, 1) = SVarray(16, 1) + OParray(ii, TOWcolH1)
                                SVarray(17, 1) = SVarray(17, 1) + OParray(ii, TOWcolC1)
                                SVarray(18, 1) = SVarray(18, 1) + OParray(ii, TOWcolC1)
                                
                                If OParray(ii, 28) = "S" Then SVarray(14, 1) = SVarray(14, 1) + 1
                                
                                If OParray(ii, 24) = "Basic" Then
                                    SVarray(19, 1) = SVarray(19, 1) + 1
                                    YFleetBasic1 = YFleetBasic1 + 1
                                    SVarray(21, 1) = SVarray(21, 1) + OParray(ii, TOWcolH1)
                                    SVarray(22, 1) = SVarray(22, 1) + OParray(ii, TOWcolH1)
                                    SVarray(23, 1) = SVarray(23, 1) + OParray(ii, TOWcolC1)
                                    SVarray(24, 1) = SVarray(24, 1) + OParray(ii, TOWcolC1)
                                    If OParray(ii, 28) = "S" Then SVarray(20, 1) = SVarray(20, 1) + 1
                                End If
                            Else
                                YFleetTotal1 = YFleetTotal1 + 1
                                SVarray(16, 1) = SVarray(16, 1) + OParray(ii, TOWcolH1)
                                SVarray(18, 1) = SVarray(18, 1) + OParray(ii, TOWcolC1)
                                If OParray(ii, 24) = "Basic" Then
                                    YFleetBasic1 = YFleetBasic1 + 1
                                    SVarray(22, 1) = SVarray(22, 1) + OParray(ii, TOWcolH1)
                                    SVarray(24, 1) = SVarray(24, 1) + OParray(ii, TOWcolC1)
                                End If
                            End If
                        End If
                        ' PERF/OVH
                        If (OParray(ii, 28) = "S" Or OParray(ii, 28) = "U") And (OParray(ii, 34) = "YES") Then
                            If InStr(OParray(ii, 6), AirlineN) > 0 Then
                                SVarray(13, 2) = SVarray(13, 2) + 1
                                YFleetTotal2 = YFleetTotal2 + 1
                                SVarray(15, 2) = SVarray(15, 2) + OParray(ii, TOWcolH2)
                                SVarray(16, 2) = SVarray(16, 2) + OParray(ii, TOWcolH2)
                                SVarray(17, 2) = SVarray(17, 2) + OParray(ii, TOWcolC2)
                                SVarray(18, 2) = SVarray(18, 2) + OParray(ii, TOWcolC2)
                                
                                If OParray(ii, 28) = "S" Then SVarray(14, 2) = SVarray(14, 2) + 1
                                
                                If OParray(ii, 24) = "Basic" Then
                                    SVarray(19, 2) = SVarray(19, 2) + 1
                                    YFleetBasic2 = YFleetBasic2 + 1
                                    SVarray(21, 2) = SVarray(21, 2) + OParray(ii, TOWcolH2)
                                    SVarray(22, 2) = SVarray(22, 2) + OParray(ii, TOWcolH2)
                                    SVarray(23, 2) = SVarray(23, 2) + OParray(ii, TOWcolC2)
                                    SVarray(24, 2) = SVarray(24, 2) + OParray(ii, TOWcolC2)
                                    If OParray(ii, 28) = "S" Then SVarray(20, 2) = SVarray(20, 2) + 1
                                End If
                            Else
                                YFleetTotal2 = YFleetTotal2 + 1
                                SVarray(16, 2) = SVarray(16, 2) + OParray(ii, TOWcolH2)
                                SVarray(18, 2) = SVarray(18, 2) + OParray(ii, TOWcolC2)
                                If OParray(ii, 24) = "Basic" Then
                                    YFleetBasic2 = YFleetBasic2 + 1
                                    SVarray(22, 2) = SVarray(22, 2) + OParray(ii, TOWcolH2)
                                    SVarray(24, 2) = SVarray(24, 2) + OParray(ii, TOWcolC2)
                                End If
                            End If
                        End If
                        ' QT
                        If InStr(OParray(ii, 38), "QT") > 0 Or InStr(OParray(ii, 38), "TOP") > 0 Then
                            If InStr(OParray(ii, 6), AirlineN) > 0 Then
                                SVarray(13, 3) = SVarray(13, 3) + 1
                                If OParray(ii, 28) = "S" Then SVarray(14, 3) = SVarray(14, 3) + 1
                                
                                If OParray(ii, 24) = "Basic" Then
                                    SVarray(19, 3) = SVarray(19, 3) + 1
                                    If OParray(ii, 28) = "S" Then SVarray(20, 3) = SVarray(20, 3) + 1
                                End If
                            End If
                        End If
                        ' REM
                        If (OParray(ii, 29) = "S" Or OParray(ii, 29) = "U") Then
                            If InStr(OParray(ii, 6), AirlineN) > 0 Then
                                SVarray(13, 4) = SVarray(13, 4) + 1
                                If OParray(ii, 28) = "S" Then SVarray(14, 4) = SVarray(14, 4) + 1
                                
                                If OParray(ii, 24) = "Basic" Then
                                    SVarray(19, 4) = SVarray(19, 4) + 1
                                    If OParray(ii, 28) = "S" Then SVarray(20, 4) = SVarray(20, 4) + 1
                                End If
                            End If
                        End If
                    End If
                Next ii
            End If
        Next k
                
    End If
    
    For j = 1 To 4
        If j = 1 Then
            j1 = 3
            j2 = 5
        End If
        If j = 2 Then
            j1 = 9
            j2 = 11
        End If
        If j = 3 Then
            j1 = 15
            j2 = 17
        End If
        If j = 4 Then
            j1 = 21
            j2 = 23
        End If
        
        For i = 1 To 4
            If SVarray(j1 - 2, i) <> 0 Then
                SVarray(j1, i) = Round(SVarray(j1, i) / SVarray(j1 - 2, i))
            Else
                SVarray(j1, i) = ""
            End If
            If SVarray(j2 - 4, i) <> 0 Then
                SVarray(j2, i) = Round(SVarray(j2, i) / SVarray(j2 - 4, i))
            Else
                SVarray(j2, i) = ""
            End If
        Next i
    Next j
    
    If FleetTotal1 <> 0 Then
        SVarray(4, 1) = Round(SVarray(4, 1) / FleetTotal1)
        SVarray(6, 1) = Round(SVarray(6, 1) / FleetTotal1)
    Else
        SVarray(4, 1) = ""
        SVarray(6, 1) = ""
    End If
    If FleetTotal2 <> 0 Then
        SVarray(4, 2) = Round(SVarray(4, 2) / FleetTotal2)
        SVarray(6, 2) = Round(SVarray(6, 2) / FleetTotal2)
    Else
        SVarray(4, 2) = ""
        SVarray(6, 2) = ""
    End If
    
    If FleetBasic1 <> 0 Then
        SVarray(10, 1) = Round(SVarray(10, 1) / FleetBasic1)
        SVarray(12, 1) = Round(SVarray(12, 1) / FleetBasic1)
    Else
        SVarray(10, 1) = ""
        SVarray(12, 1) = ""
    End If
    If FleetBasic2 <> 0 Then
        SVarray(10, 2) = Round(SVarray(10, 2) / FleetBasic2)
        SVarray(12, 2) = Round(SVarray(12, 2) / FleetBasic2)
    Else
        SVarray(10, 2) = ""
        SVarray(12, 2) = ""
    End If
    
'--------------

    If YFleetTotal1 <> 0 Then
        SVarray(16, 1) = Round(SVarray(16, 1) / YFleetTotal1)
        SVarray(18, 1) = Round(SVarray(18, 1) / YFleetTotal1)
    Else
        SVarray(16, 1) = ""
        SVarray(18, 1) = ""
    End If
    If YFleetTotal2 <> 0 Then
        SVarray(16, 2) = Round(SVarray(16, 2) / YFleetTotal2)
        SVarray(18, 2) = Round(SVarray(18, 2) / YFleetTotal2)
    Else
        SVarray(16, 2) = ""
        SVarray(18, 2) = ""
    End If
    
    If YFleetBasic1 <> 0 Then
        SVarray(22, 1) = Round(SVarray(22, 1) / YFleetBasic1)
        SVarray(24, 1) = Round(SVarray(24, 1) / YFleetBasic1)
    Else
        SVarray(22, 1) = ""
        SVarray(24, 1) = ""
    End If
    If YFleetBasic2 <> 0 Then
        SVarray(22, 2) = Round(SVarray(22, 2) / YFleetBasic2)
        SVarray(24, 2) = Round(SVarray(24, 2) / YFleetBasic2)
    Else
        SVarray(22, 2) = ""
        SVarray(24, 2) = ""
    End If
    
    Sheets(S0).Range(Sheets(S0).Cells(31, 13), Sheets(S0).Cells(54, 16)).Value = SVarray
    
    Sheets(S0).Cells(30, 20).Value = TYTDifsd
    Sheets(S0).Cells(30, 21).Value = BYTDifsd
    
    Sheets(S0).Cells(31, 20).Value = TYTDtoa
    Sheets(S0).Cells(31, 21).Value = BYTDtoa
    
    Sheets(S0).Cells(32, 20).Value = TYTDint
    Sheets(S0).Cells(32, 21).Value = BYTDint
    
    Sheets(S0).Cells(33, 20).Value = TYTDuer
    Sheets(S0).Cells(33, 21).Value = BYTDuer
    
    Sheets(S0).Cells(34, 20).Value = TYTDdc
    Sheets(S0).Cells(34, 21).Value = BYTDdc
    
    Sheets(S0).Cells(35, 20).Value = TYTDse
    Sheets(S0).Cells(35, 21).Value = BYTDse

    ' Fleet
    
    Sheets(S0).Cells(30, 22).Value = FTYTDifsd
    Sheets(S0).Cells(30, 23).Value = FBYTDifsd
    
    Sheets(S0).Cells(31, 22).Value = FTYTDtoa
    Sheets(S0).Cells(31, 23).Value = FBYTDtoa
    
    Sheets(S0).Cells(32, 22).Value = FTYTDint
    Sheets(S0).Cells(32, 23).Value = FBYTDint
    
    Sheets(S0).Cells(33, 22).Value = FTYTDuer
    Sheets(S0).Cells(33, 23).Value = FBYTDuer
    
    Sheets(S0).Cells(34, 22).Value = FTYTDdc
    Sheets(S0).Cells(34, 23).Value = FBYTDdc
    
    Sheets(S0).Cells(35, 22).Value = FTYTDse
    Sheets(S0).Cells(35, 23).Value = FBYTDse

End Sub
Sub GetSBArrayData()
    
    '================================
    ' Last updated: 02/28/2018
    ' Code by TCS & Asko Soimakallio
    '================================
    
    S1 = "SBArrayData"
    
    Dim sqlCmd As String
    Dim RecordSet  As ADODB.RecordSet
    
    sqlCmd = " SELECT CR.SERVICE_BULLETIN_NUMBER, CR.ENGINE_SERIAL_NUMBER, LTRIM(RTRIM(CR.COMPLIANCE)),CR.COMPLIANCE_STATUS FROM [CRITICAL_ITEM_STATUS_T] CR WHERE CR.TPP_ID = " & TPP_ID
        
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    
    RCC = Sheets(S1).Cells(Rows.Count, 1).End(xlUp).Row
    Sheets(S1).Rows("1:" & RCC).Clear
    
    Sheets("SBArrayData").Columns(2).NumberFormat = "@"
    Sheets("SBArrayData").Cells(1, 1).CopyFromRecordset RecordSet
    
    RecordSet.Close
    
End Sub
Sub Get_MPD_Data(Optional EngineModel As String)

    ' =====================================================
    '   Last updated: 11/16/2020
    '   Code by Asko Soimakallio & TCS
    ' =====================================================

    Dim sqlCmd As String
    Dim RecordSet  As ADODB.RecordSet

    If EngineModel = "CF34-3A" Or EngineModel = "CF34-3B" Or EngineModel = "CF34-3A1" Then
        sqlCmd = "SELECT ITEM_NAME,'',CALCULATION_BASIS,CASE WHEN ISNUMERIC(INTERVAL) = 1 THEN CAST(INTERVAL as int) ELSE INTERVAL END INTERVAL,CASE WHEN ISNUMERIC(ITEM_LABOR_HOURS) = 1 THEN CAST(ITEM_LABOR_HOURS as float) ELSE ITEM_LABOR_HOURS END ITEM_LABOR_HOURS,CASE WHEN ISNUMERIC(FALLOUT_RATE) = 1 THEN CAST(FALLOUT_RATE as float) ELSE FALLOUT_RATE END FALLOUT_RATE,CASE WHEN ISNUMERIC(FALLOUT_LABOR_HOURS) = 1 THEN CAST(FALLOUT_LABOR_HOURS as int) ELSE FALLOUT_LABOR_HOURS END FALLOUT_LABOR_HOURS FROM [dbo].[TPP_MPD_T] WHERE engine_model Like 'CF34-3%' "
    Else
        sqlCmd = "SELECT ITEM_NAME,'',CALCULATION_BASIS,CASE WHEN ISNUMERIC(INTERVAL) = 1 THEN CAST(INTERVAL as int) ELSE INTERVAL END INTERVAL,CASE WHEN ISNUMERIC(ITEM_LABOR_HOURS) = 1 THEN CAST(ITEM_LABOR_HOURS as float) ELSE ITEM_LABOR_HOURS END ITEM_LABOR_HOURS,CASE WHEN ISNUMERIC(FALLOUT_RATE) = 1 THEN CAST(FALLOUT_RATE as float) ELSE FALLOUT_RATE END FALLOUT_RATE,CASE WHEN ISNUMERIC(FALLOUT_LABOR_HOURS) = 1 THEN CAST(FALLOUT_LABOR_HOURS as int) ELSE FALLOUT_LABOR_HOURS END FALLOUT_LABOR_HOURS FROM [dbo].[TPP_MPD_T] WHERE engine_model= '" & EngineModel & "' "
    End If
       
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    ClearCell "MPD Raw Data", "A1:F1"
    Sheets("MPD Raw Data").Cells(1, 1).CopyFromRecordset RecordSet
    RecordSet.Close

End Sub

Sub Get_FLEET_PROGRAM_Data(Optional EngineModel As String)

    ' =====================================================
    '   Last updated: 10/14/2020
    '   Code by Asko Soimakallio & TCS
    ' =====================================================
    
    If EngineModel = "CF34-3A" Or EngineModel = "CF34-3B" Or EngineModel = "CF34-3A1" Then
        EngineModel_1 = "CF34-3"
    Else
        EngineModel_1 = EngineModel
    End If
    
    S1 = "FLEET PROG Raw Data"
    
    Dim sqlCmd As String
    Dim RecordSet As ADODB.RecordSet
   
    sqlCmd = " SELECT   [PROGRAM_NAME],PROGRAM_TRACKING,DATA_SOURCE,PROGRAM_TYPE,"
    sqlCmd = sqlCmd & " SERVICE_BULLETIN_REFRENCE,ROLL_UP_BY_SB,CRITICAL_ITEM_NUMBER,ROLL_UP_BY_CI,AD_NUMBER, "
    sqlCmd = sqlCmd & " ROLL_UP_BY_AD,ACTION_TYPE,ACTION_METHOD,INSPECTION_PROGRAM,SOFTWARE_RELEASE,"
    sqlCmd = sqlCmd & " CONVERT(VARCHAR(10), [START_DATE],101)[START_DATE],"
    sqlCmd = sqlCmd & " CONVERT(VARCHAR(10),TARGET_END_DATE,101)TARGET_END_DATE,PRIMARY_TIMING_BASIS,"
    sqlCmd = sqlCmd & " CASE WHEN isNumeric(PRIMARY_INITIAL_THRESHOLD) = 1 THEN CONVERT(INT,ISNULL(PRIMARY_INITIAL_THRESHOLD,0)) ELSE PRIMARY_INITIAL_THRESHOLD END PRIMARY_INITIAL_THRESHOLD,"
    sqlCmd = sqlCmd & " CASE WHEN isNumeric(PRIMARY_REPETITIVE_INTERVAL) = 1 THEN   CONVERT(INT,ISNULL(PRIMARY_REPETITIVE_INTERVAL,0)) ELSE PRIMARY_REPETITIVE_INTERVAL END PRIMARY_REPETITIVE_INTERVAL,"
    'sqlCmd = sqlCmd & " CASE WHEN isNumeric(SECONDARY_TIMING_BASIS) = 1 THEN    CONVERT(INT,ISNULL(SECONDARY_TIMING_BASIS,0))ELSE SECONDARY_TIMING_BASIS END SECONDARY_TIMING_BASIS,"
    sqlCmd = sqlCmd & " SECONDARY_TIMING_BASIS , "
    sqlCmd = sqlCmd & " CASE WHEN isNumeric(SECONDARY_INITIAL_THRESHOLD) = 1 THEN   CONVERT(INT,ISNULL(SECONDARY_INITIAL_THRESHOLD,0)) ELSE SECONDARY_INITIAL_THRESHOLD END SECONDARY_INITIAL_THRESHOLD, "
    sqlCmd = sqlCmd & " CASE WHEN isNumeric(SECONDARY_REPETITIVE_INTERVAL) = 1 THEN CONVERT(INT,ISNULL(SECONDARY_REPETITIVE_INTERVAL,0)) ELSE SECONDARY_REPETITIVE_INTERVAL END SECONDARY_REPETITIVE_INTERVAL,"
    sqlCmd = sqlCmd & " CASE WHEN isNumeric(LABOR_HOURS) = 1 THEN   CONVERT(INT,ISNULL(LABOR_HOURS,0)) ELSE LABOR_HOURS END LABOR_HOURS,"
    sqlCmd = sqlCmd & " CASE WHEN isNumeric(GROUND_TIME_HRS) = 1 THEN   CONVERT(INT,ISNULL(GROUND_TIME_HRS,0)) ELSE GROUND_TIME_HRS END GROUND_TIME_HRS, "
    sqlCmd = sqlCmd & " CASE WHEN isNumeric(FALLOUT_RATE) = 1 THEN  CONVERT(FLOAT,ISNULL(FALLOUT_RATE,0)) ELSE FALLOUT_RATE END FALLOUT_RATE,"
    sqlCmd = sqlCmd & " CASE WHEN isNumeric(FALLOUT_LABOR_HOURS) = 1 THEN   CONVERT(INT,ISNULL(FALLOUT_LABOR_HOURS,0)) ELSE FALLOUT_LABOR_HOURS END FALLOUT_LABOR_HOURS,"
    sqlCmd = sqlCmd & " CASE WHEN isNumeric(FALLOUT_GROUND_TIME_HRS) = 1 THEN   CONVERT(INT,ISNULL(FALLOUT_GROUND_TIME_HRS,0)) ELSE FALLOUT_GROUND_TIME_HRS END FALLOUT_GROUND_TIME_HRS, "
    sqlCmd = sqlCmd & " REMOVAL_WORKSCOPE,"
    sqlCmd = sqlCmd & " CASE WHEN isNumeric(WING_TO_WING_TAT) = 1 THEN  CONVERT(INT,ISNULL(WING_TO_WING_TAT,0)) ELSE WING_TO_WING_TAT END WING_TO_WING_TAT,"
    sqlCmd = sqlCmd & " CASE WHEN isNumeric(REMOVAL_LABOR_HOURS) = 1 THEN   CONVERT(INT,ISNULL(REMOVAL_LABOR_HOURS,0)) ELSE REMOVAL_LABOR_HOURS END REMOVAL_LABOR_HOURS, "
    sqlCmd = sqlCmd & " CASE WHEN isNumeric(REMOVAL_GROUND_TIME_HRS) = 1 THEN   CONVERT(INT,ISNULL(REMOVAL_GROUND_TIME_HRS,0)) ELSE REMOVAL_GROUND_TIME_HRS END REMOVAL_GROUND_TIME_HRS"
    sqlCmd = sqlCmd & " ,WEIBULL_VISIBLE,WEIBULL_EDITABLE,"
    sqlCmd = sqlCmd & " CASE WHEN isNumeric(WEIBULL_BETA) = 1 THEN  convert(decimal(10,4),round(WEIBULL_BETA,4)) ELSE WEIBULL_BETA END WEIBULL_BETA,"
    sqlCmd = sqlCmd & " CASE WHEN isNumeric(WEIBULL_ETA) = 1 THEN   CONVERT(INT,ISNULL(WEIBULL_ETA,0)) ELSE WEIBULL_ETA END WEIBULL_ETA, "
    sqlCmd = sqlCmd & " CASE WHEN isNumeric(WEIBULL_PERCENTAGE) = 1 THEN    CONVERT(INT,ISNULL(WEIBULL_PERCENTAGE,0)) ELSE WEIBULL_PERCENTAGE END WEIBULL_PERCENTAGE,"
    sqlCmd = sqlCmd & " [USE_WEIBULL_GENERATE_INSPECTION/REMOVAL_DATES],CALCULATE_FLEET_CUMULATIVE_VALUE ,"
    sqlCmd = sqlCmd & " [TIME_RANGE(MNTHS)], IFSD,TOA,INTERRUPTION,SIGNIFICANT_EVENT,DELAY_AOG,CANCELLATION,ENGINE_REMOVAL ,"
    sqlCmd = sqlCmd & " MAINTENANCE_BURDEN,UNSCHEDULED_GROUND_TIME,TIME_CYCLES_THRESHOLD_MODEL,WEIBULL_MODEL,DISCRETE_MODEL ,"
    sqlCmd = sqlCmd & " PARAMETRIC_MODEL,PARAMETER_A_NAME , PARAMETER_B_NAME,FORMULA,RANDOM_MODEL,MANUAL_FALLOUT_MODEL ,"
    sqlCmd = sqlCmd & " CASE WHEN isNumeric(MANUAL_FALLOUT_VALUE) = 1 THEN  CONVERT(decimal(10,4),round(MANUAL_FALLOUT_VALUE,4)) ELSE MANUAL_FALLOUT_VALUE END MANUAL_FALLOUT_VALUE,"
    sqlCmd = sqlCmd & " CASE WHEN isNumeric(PROGRAM_IMPACT_SCORE) = 1 THEN  CONVERT(INT,ISNULL(PROGRAM_IMPACT_SCORE,0)) ELSE PROGRAM_IMPACT_SCORE END PROGRAM_IMPACT_SCORE, INSTRUCTIONS,PROBABILITY_AT_THRESHOLD,ANALYTIC_NAME,DRM_DELTA,CDM_DELTA,PART_NUMBER,MODULE,ANALYTIC_TYPE,ANALYTIC_THRESHOLD"
    sqlCmd = sqlCmd & " FROM [TPP_FLEET_PROGRAM_T] WHERE ENGINE_MODEL = '" & EngineModel_1 & "'"

           
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    ClearCell "FLEET PROG Raw Data", "A1:BJ1"
    Sheets(S1).Cells(1, 1).CopyFromRecordset RecordSet
    RecordSet.Close
    
    RC = Sheets(S1).Cells(Rows.Count, 1).End(xlUp).Row
    CC = 100
    Sheets(S1).Range(Sheets(S1).Cells(1, 1), Sheets(S1).Cells(RC, CC)).Sort key1:=Sheets(S1).Range(Sheets(S1).Cells(1, 1), Sheets(S1).Cells(RC, 1)), order1:=xlAscending

End Sub

Sub GetACarray_Data()

    Dim sqlCmd As String
    Dim RecordSet  As ADODB.RecordSet
    
    sqlCmd = "SELECT AIRCRAFT_TAIL_NUMBER,FLT_HRS_PER_DAY,DEP_CYCLES_PER_DAY,ESN1,ESN2,ESN3,ESN4 FROM [DBO].[ACARRAY_DATA_T]"
    
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    
    ClearCell "Fleet Aircraft", "B6:H6"
    
    Sheets("Fleet Aircraft").Cells(6, 2).CopyFromRecordset RecordSet
    RecordSet.Close

End Sub

Sub Calculate_Linest()

    Dim sqlCmd As String
    Dim RecordSet  As ADODB.RecordSet
    
    ReadConnectionXML
    OpenSQLConnection

    Dim x() As Variant
    Dim y() As Variant
    
    sqlCmd = "SELECT  ACTUAL_VALUE, FLIGHT_DATETIME FROM  DIAGNOSTIC_LINEST_T   " 'WHERE ESN = '956103'
        
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    Dim rc1 As Integer
    rc1 = RecordSet.RecordCount
    ClearCell "Temp", "A1:B1"
    Sheets("Temp").Cells(1, 1).CopyFromRecordset RecordSet
    RecordSet.Close
    
    ran1 = "A1:A" & rc1
    ran2 = "B1:B" & rc1
    
    name1 = "INDEX(LINEST(" & ran1 & "," & ran2 & "),1)"
    name2 = "INDEX(LINEST(" & ran1 & "," & ran2 & "),2)"
    
    v1 = Evaluate(name1)
    v2 = Evaluate(name2)
    
    ClearCell "Temp", "A1:B1"
    
    sqlCmd = ""
    sqlCmd = "UPDATE DIAGNOSTIC_LINEST_T SET Linest1 = " & v1 & ",Linest2 = " & v2 & " "
    'sqlCmd = sqlCmd & "WHERE ESN = '956103'"
    conn.Execute sqlCmd
    
End Sub

Sub BtnDownload_Click()

    '==================================
    '   Code by TCS & Asko Soimakallio
    '   Last updated: 9/17/2020
    '==================================
        
    Dim i As Integer
    Dim oShell As Object
    Set oShell = CreateObject("Wscript.Shell")
    If (TDPassword = "" Or TDPassword = "N/A") Then
        AuthenticationWindow.Show
        If TDPassword = "N/A" Then
            TDPassword = ""
            Application.Cursor = Default
            Exit Sub
        End If
        Dim tppObj As Object
        Set tppObj = CreateObject("TPPLibrary.TPPLibraryV8")
        
        LibraryCheck = tppObj.GetTPPLibraryVersion()
        
        If LibraryCheck = "2.0" Then
            
            MessageToUser = ""
            Flag = tppObj.ValidateUserFDMConnection(TDPassword)
            
            PublishValidator = tppObj.IsReleasedVersionMatched()
            
            If PublishValidator = 1 Then
                            
                Application.Cursor = Default
                If Flag = "Success" Then
                    UpdateWindow.Show
                    TDPassword = ""
                ElseIf (InStr(Flag, "Password") > 0) Then
                    i = MsgBox("Incorrect Password  Or  Password has expired. " & vbCrLf & "Please Retry Or To Reset the Password,Click Cancel button. ", vbRetryCancel, "Access")
                    If i = vbRetry Then
                        TDPassword = ""
                        BtnDownload_Click
                    Else
                            oShell.Run ("https://idm.infra.ge.com/idm/user/geidm/home.xhtml")
                    End If
                    
                    '"Incorrect Username Or Password. Unable to connect to server !"
                    Application.Cursor = xlDefault
                    TDPassword = ""
                    Exit Sub
                End If
            Else
                If PublishValidator = 2 Then
                    MessageToUser = "TPP version is not current."
                    MsgBox MessageToUser
                End If
                If PublishValidator = 3 Then
                    MessageToUser = "TPP version could not be checked due to a network issue."
                    MsgBox MessageToUser
                End If
            End If
        Else
            MessageToUser = "Invalid library version detected"
            MsgBox MessageToUser
        End If
    Else
        UpdateWindow.Show
    End If

End Sub

Sub GetDerateDataArray(Airline As String, EngineModel As String)
    '==========================
    '   Code by TCS
    '   Last updated: 06/26/2015
    '==========================
    
    OpenSQLConnection
    
    Dim sqlCmd As String
    Dim RecordSet  As ADODB.RecordSet
    
    Dim cmd As New ADODB.Command
    cmd.ActiveConnection = conn
    cmd.CommandTimeout = 0
    cmd.CommandType = adCmdText
    cmd.CommandText = " SELECT DISTINCT D.DEPARTURE_STATION, AVG(D.DELFN) OVER (PARTITION BY D.DEPARTURE_STATION) TAKEOFF_DERATE,AVG(D.DELFNX) OVER (PARTITION BY D.DEPARTURE_STATION) CLIMB_DERATE FROM DIAGNOSTIC_DERATE_T D WHERE AIRLINE_CODE IN (SELECT DISTINCT AIRLINE_SHORT_NAME FROM AIRLINE_ENGINE_LOOKUP_T WHERE (CHARINDEX(';'+ CAST(AIRLINE_NAME as nvarchar(1000)) +';',';'+ '" & Airline & "' +';', 1) > 0 )) AND ENGINE_MODEL = '" & EngineModel & "' ORDER BY D.DEPARTURE_STATION "
 
    Set RecordSet = cmd.Execute(, , adCmdText)
    
    If (RecordSet.RecordCount > 0) Then
    
        ClearCell "Derate Data", "A2:D2"
        Sheets("Derate Data").Cells(2, 1).CopyFromRecordset RecordSet
        
    End If
    
End Sub

Sub GetDiagnosticDataArray(Airline As String, EngineModel As String)
    
    '==================================
    '   Code by TCS & Asko Soimakallio
    '   Last updated: 02/27/2018
    '==================================
    
    OpenSQLConnection

    'First execute the SP
    Dim cmd As New ADODB.Command
    Dim rs As New ADODB.RecordSet
    Dim prm As ADODB.Parameter
    
    cmd.ActiveConnection = conn
    cmd.CommandTimeout = 0
    cmd.CommandType = adCmdStoredProc
    cmd.CommandText = "SP_GET_DIAGNOSTIC_DATA"
    
    AirlineCode = GetShortNameOfAirline(Airline)
    
    Set prm = cmd.CreateParameter("AirlineCode", adVarChar, adParamInput, 30, AirlineCode)
    cmd.Parameters.Append prm
    
    Set prm = cmd.CreateParameter("EngineModel", adVarChar, adParamInput, 30, EngineModel)
    cmd.Parameters.Append prm
    
   
    Set rs = cmd.Execute(, , adCmdStoredProc)
    
    'Second - Get the data
    
    Dim sqlCmd As String
    Dim RecordSet  As New ADODB.RecordSet
    sqlCmd = " SELECT T1.ESN,T1.[INTALL DATE],T1.[FIRST DATA POINT],T1.[LAST DATA POINT],T1.[FIRST SMOOTH VALUE],T1.[LAST SMOOTH VALUE],T1.[Engine Specific Curve Fit (deg/day)],T1.[Average EGT Det. / Day (Initialized > 1 Year Ago)],T1.[Average EGT Det. / Day (Initialized > 2 Year Ago)],T1.[LINEAR FIT SLOPE],T1.[CONSTANT],T3.[LINEAR FIT SLOPE] as [MAXCON SLOPE],T3.[CONSTANT] as [MAXCON CONSTANT],T2.TAKEOFF_DERATE ,T2.CLIMB_DERATE FROM TEMP_DIAGNOSTIC_TAKEOFF_T T1 INNER JOIN TEMP_DERATE_T T2 ON  T1.ESN = T2.ESN LEFT JOIN TEMP_DIAGNOSTIC_CRUISE_T T3 ON T1.ESN = T3.ESN "
    RecordSet.Open sqlCmd, conn
    
    ClearCell "Diagnostics Data", "A4:P4"
    
    If (RecordSet.RecordCount > 0) Then
        Sheets("Diagnostics Data").Columns(1).NumberFormat = "@"
        Sheets("Diagnostics Data").Cells(4, 1).CopyFromRecordset RecordSet
        
    End If
    RecordSet.Close
    
    
    'Averages values
    sqlCmd = "SELECT AVG(T1.[Engine Specific Curve Fit (deg/day)]),AVG(T1.[Average EGT Det. / Day (Initialized > 1 Year Ago)]),AVG(T1.[Average EGT Det. / Day (Initialized > 2 Year Ago)]) ,NULL,NULL,NULL,NULL,AVG(T2.TAKEOFF_DERATE) ,AVG(T2.CLIMB_DERATE) FROM TEMP_DIAGNOSTIC_TAKEOFF_T T1 INNER JOIN TEMP_DERATE_T T2 ON  T1.ESN = T2.ESN LEFT JOIN TEMP_DIAGNOSTIC_CRUISE_T T3 ON T1.ESN = T3.ESN "
    RecordSet.Open sqlCmd, conn
    Sheets("Diagnostics Data").Cells(2, 7).CopyFromRecordset RecordSet
    
End Sub
'CRUISE date
Sub GetDiagnosticGenxValues(Airline As String, EngineModel As String)

    '==========================
    '   Code by TCS
    '   Last updated: 06/26/2015
    '==========================
    
    OpenSQLConnection
    
 
    'Get all esn in a array
    ' Run loop for each esn and calculate it linest values
    
   
    Dim sqlCmd As String
    Dim RecordSet  As ADODB.RecordSet
    
    Dim cmd As New ADODB.Command
    cmd.ActiveConnection = conn
    cmd.CommandTimeout = 0
    cmd.CommandType = adCmdText
    cmd.CommandText = "SELECT DISTINCT ESN FROM [DIAGNOSTIC_GENX_T] WHERE AIRLINE_CODE IN (SELECT DISTINCT AIRLINE_SHORT_NAME FROM AIRLINE_ENGINE_LOOKUP_T WHERE (CHARINDEX(';'+ CAST(AIRLINE_NAME as nvarchar(1000)) +';',';'+ '" & Airline & "' +';', 1) > 0 )) AND ENGINE_MODEL = '" & EngineModel & "' "
    
    
    Dim x() As Variant
    Dim y() As Variant
        
    Set RecordSet = cmd.Execute(, , adCmdText)
    
    
    If (RecordSet.RecordCount > 0) Then
    
        Dim ESNarray As Variant
        ESNarray = RecordSet.GetRows
        
        Dim ESN As Variant
        Dim tableName As String
        
        tableName = "DIAGNOSTIC_GENX_T"
        For Each ESN In ESNarray
            DoLinestCalc ESN, tableName
        Next ESN
        
    End If
    
    RecordSet.Close
    
End Sub

'Takeoff data
Sub GetDiagnosticNonGenxValues(Airline As String, EngineModel As String)

    '==========================
    '   Code by TCS
    '   Last updated: 06/26/2015
    '==========================
    
    OpenSQLConnection
    
    Dim sqlCmd As String
    Dim RecordSet  As ADODB.RecordSet
    
    Dim cmd As New ADODB.Command
    cmd.ActiveConnection = conn
    cmd.CommandTimeout = 0
    cmd.CommandType = adCmdText
    cmd.CommandText = "SELECT DISTINCT ESN FROM [DIAGNOSTIC_NONGENX_T] WHERE AIRLINE_CODE IN (SELECT DISTINCT AIRLINE_SHORT_NAME FROM AIRLINE_ENGINE_LOOKUP_T WHERE (CHARINDEX(';'+ CAST(AIRLINE_NAME as nvarchar(1000)) +';',';'+ '" & Airline & "' +';', 1) > 0 )) AND ENGINE_MODEL = '" & EngineModel & "' "
    
    
    Dim x() As Variant
    Dim y() As Variant
        
    Set RecordSet = cmd.Execute(, , adCmdText)
    
    If (RecordSet.RecordCount > 0) Then
    
        Dim ESNarray As Variant
        ESNarray = RecordSet.GetRows
        
        Dim ESN As Variant
        Dim tableName As String
    
        tableName = "DIAGNOSTIC_NONGENX_T"
        For Each ESN In ESNarray
            
            DoLinestCalc ESN, tableName
        Next ESN
        
    End If
    
    RecordSet.Close
    
End Sub

Sub DoLinestCalc(ESN As Variant, tableName As String)

    '============================
    '   Code by TCS
    '   Last updated: 12/16/2016
    '============================
        
    Dim sqlCmd As String
    Dim RecordSet  As ADODB.RecordSet
    
    Dim cmd As New ADODB.Command
    cmd.ActiveConnection = conn
    cmd.CommandTimeout = 0
    cmd.CommandType = adCmdText
    cmd.CommandText = "SELECT DISTINCT ACTUAL_VALUE, FLIGHT_DATETIME FROM  " & tableName & "  WHERE ESN = '" & ESN & "' AND ACTUAL_VALUE IS NOT NULL"
    Set RecordSet = cmd.Execute(, , adCmdText)
    
    Dim rc1 As Integer
    rc1 = RecordSet.RecordCount
    ClearCell "Temp", "A1:AZ1"
    Sheets("Temp").Cells(1, 1).CopyFromRecordset RecordSet
    
    If (RecordSet.RecordCount > 0) Then
    
        ran1 = "A1:A" & rc1
        ran2 = "B1:B" & rc1
        
        name1 = "INDEX(LINEST(" & ran1 & "," & ran2 & "),1)"
        name2 = "INDEX(LINEST(" & ran1 & "," & ran2 & "),2)"
        
        v1 = Evaluate(name1)
        v2 = Evaluate(name2)
        
        If IsError(v1) Then
           Exit Sub
        End If
        
        ClearCell "Temp", "A1:AZ1"
        
        sqlCmd = ""
        sqlCmd = "UPDATE " & tableName & "  SET LINEAR_FIT_SLOPE = " & v1 & ",CONSTANT = " & v2 & " "
        sqlCmd = sqlCmd & "WHERE ESN = '" & ESN & "'"
        conn.Execute sqlCmd
    End If
    RecordSet.Close
    
End Sub
Sub RelFfReCalc(MONTHS As Variant, EventType As Variant, Engine_Model As Variant, TPP_ID As Integer)
    
    '==================================
    '   Code by TCS & Asko Soimakallio
    '   Last updated: 06/06/2017
    '==================================
    
    Dim cmd As New ADODB.Command
    Dim rs As New ADODB.RecordSet
    Dim prm As ADODB.Parameter
    Dim GetSelectedItemsCG As String
    
    ReadConnectionXML
    OpenSQLConnection
   
    cmd.ActiveConnection = conn
    cmd.CommandTimeout = 0
    cmd.CommandType = adCmdStoredProc
    cmd.CommandText = "SP_RGCHART_BY_EVENT_TYPE"
    
    If EventType = "DEP REL" Then EventType = "DC"
    If EventType = "INT" Then EventType = "ITRR"
    If EventType = "SV" Then EventType = "SVR"
    
    Set prm = cmd.CreateParameter("Months", adInteger, adParamInput, 8, MONTHS)
    cmd.Parameters.Append prm
    
    Set prm = cmd.CreateParameter("EventType", adVarChar, adParamInput, 20, EventType)
    cmd.Parameters.Append prm
    
    Set prm = cmd.CreateParameter("Engine_Model", adVarChar, adParamInput, 100, Engine_Model)
    cmd.Parameters.Append prm


    Set prm = cmd.CreateParameter("TPP_ID", adInteger, adParamInput, 20, TPP_ID)
    cmd.Parameters.Append prm

    Set rs = cmd.Execute(, , adCmdStoredProc)
    
    ' Create comparison group
    S1 = "Supporting Data"
    RC = Sheets(S1).Cells(Rows.Count, 8).End(xlUp).Row
    GetSelectedItemsCG = ""
    If RC > 53 Then
        '## Otherwise, return the array of items as a string,
        '   delimited by commas
        For k = 54 To RC
            GetSelectedItemsCG = GetSelectedItemsCG + "'" + Sheets(S1).Cells(k, 8).Value + "',"
        Next k
    End If
    If (Len(GetSelectedItemsCG) > 0) Then
        GetSelectedItemsCG = Left(GetSelectedItemsCG, Len(GetSelectedItemsCG) - 1)
    End If
    
    'Need to load ALL Tab values again here
    If (EventType = "IFSD") Then
        GetDataFor_IFSD_FDM_EVENTS_T MONTHS, GetSelectedItemsCG
    ElseIf (EventType = "TOA") Then
        GetDataFor_TOA_FDM_EVENTS_T MONTHS, GetSelectedItemsCG
    ElseIf (EventType = "ITRR") Then
        GetDataFor_INT_FDM_EVENTS_T MONTHS, GetSelectedItemsCG
    ElseIf (EventType = "UER") Then
        GetDataFor_UER_FDM_EVENTS_T MONTHS, GetSelectedItemsCG
    ElseIf (EventType = "REM") Then
        GetDataFor_REM_FDM_EVENTS_T MONTHS, GetSelectedItemsCG
    ElseIf (EventType = "SVR") Then
        GetDataFor_SVR_FDM_EVENTS_T MONTHS, GetSelectedItemsCG
    ElseIf (EventType = "DC") Then
        GetDataFor_DEPREL_FDM_EVENTS_T MONTHS, GetSelectedItemsCG
    ElseIf (EventType = "SE") Then
        GetDataFor_SE_FDM_EVENTS_T MONTHS, GetSelectedItemsCG
    End If
    
    CloseSQLConnection
End Sub


Public Function GetNewTPP_ID() As Integer

    Dim sqlCmd As String
    Dim RecordSet  As ADODB.RecordSet
    
    sqlCmd = "SELECT ISNULL(MAX(TPP_ID),0) FROM INPUT_PARAMETERS_T"
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn

    If RecordSet.RecordCount > 0 Then
        GetNewTPP_ID = RecordSet.Fields(0).Value + 1
    End If
    
End Function

Public Function GetExistingTPP_ID(EngineModel As String, airlinesNames As String, EngineSeries As String, aircraftType As String) As Integer

    '==================================
    '   Code by TCS & Asko Soimakallio
    '   Last updated: 05/19/2015
    '==================================

    Dim sqlCmd As String
    Dim RecordSet  As ADODB.RecordSet
    
    sqlCmd = "SELECT ISNULL(TPP_ID,0) AS TPP_ID FROM INPUT_PARAMETERS_T "
    sqlCmd = sqlCmd & " WHERE Engine_Model = '" & EngineModel & "' AND Engine_Series = '" & EngineSeries & "' And Aircraft_Type = '" & aircraftType & "' AND (CHARINDEX(';'+ CAST(AIRLINE_NAME as nvarchar(1000)) +';',';'+ '" & airlinesNames & "' +';', 1) > 0 )"
  
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn

    If RecordSet.RecordCount > 0 Then
        GetExistingTPP_ID = RecordSet.Fields(0).Value
    Else
        GetExistingTPP_ID = 0
    End If
    
End Function

Function GetShortNameOfAirline(AirlineNames As String)

    '==================================
    '   Code by TCS & Asko Soimakallio
    '   Last updated: 05/19/2015
    '==================================
    

    ReadConnectionXML
    OpenSQLConnection
    
    Dim sqlCmd As String
    Dim RecordSet  As ADODB.RecordSet
    
    sqlCmd = " SELECT DISTINCT AIRLINE_SHORT_NAME FROM AIRLINE_ENGINE_LOOKUP_T WHERE  (CHARINDEX(';'+ CAST(AIRLINE_NAME as nvarchar(1000)) +';',';'+ '" & AirlineNames & "' +';', 1) > 0 ) "
    
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    
    Do While Not RecordSet.EOF
    
        strOutput = strOutput + RecordSet.Fields("AIRLINE_SHORT_NAME") + ","
    
    RecordSet.MoveNext
    Loop
    
    If (Len(strOutput) > 0) Then
        GetShortNameOfAirline = Left(strOutput, Len(strOutput) - 1)
    Else
        GetShortNameOfAirline = ""
        
    End If

End Function


'*************************ENGINE 12M UTILIZATION *******************

Sub GetEngine12MUtilization()

    '==================================
    '   Code by TCS & Asko Soimakallio
    '   Last updated: 04/05/2018
    '==================================
    
        ReadConnectionXML
        OpenSQLConnection
    
    S1 = "Engine 12M Utilization"
    Dim sqlCmd As String
    Dim RecordSet  As ADODB.RecordSet
    
    sqlCmd = " SELECT ENGINE_SERIAL_NUMBER , TOTAL_HOURS_12M , TOTAL_CYCLES_12M FROM [dbo].[ENGINE_12M_UTILIZATION_T] WHERE  TPP_ID = " & TPP_ID
    
    Dim cmd As New ADODB.Command
    cmd.ActiveConnection = conn
    cmd.CommandTimeout = 0
    cmd.CommandType = adCmdText
    cmd.CommandText = sqlCmd
    Set RecordSet = cmd.Execute(, , adCmdText)

    'Set RecordSet = New ADODB.RecordSet
    'RecordSet.Open sqlCmd, conn
    
    RCC = Sheets(S1).Cells(Rows.Count, 1).End(xlUp).Row
    If RCC > 1 Then Sheets(S1).Rows("2:" & RCC).Clear
    
    Sheets("Engine 12M Utilization").Cells(2, 1).CopyFromRecordset RecordSet
        
    RC = Sheets("Engine 12M Utilization").Cells(Rows.Count, 1).End(xlUp).Row
    Dim Carray
    If RC > 1 Then
        Carray = Sheets("Engine 12M Utilization").Range(Sheets("Engine 12M Utilization").Cells(2, 2), Sheets("Engine 12M Utilization").Cells(RC, 3)).Value
        Sheets("Engine 12M Utilization").Range(Sheets("Engine 12M Utilization").Cells(2, 1), Sheets("Engine 12M Utilization").Cells(RC, 1)).NumberFormat = "@"
        Sheets("Engine 12M Utilization").Range(Sheets("Engine 12M Utilization").Cells(2, 2), Sheets("Engine 12M Utilization").Cells(RC, 3)).Value = Carray
        Erase Carray
    End If
        
    RecordSet.Close
    
End Sub

'********* PSE CAUSE DESC***********
Sub GetPSECauseData()


   ReadConnectionXML
   OpenSQLConnection
    
    S1 = "Supporting Data"
    Dim sqlCmd As String
    Dim RecordSet  As ADODB.RecordSet
    
    '1ST MODEL
    sqlCmd = " SELECT PSE_CAUSE_DESC FROM [dbo].[PSE_CAUSE_DESC_T] WHERE ENGINE_MODEL ='CF34-10E' " & "AND TPP_ID= " & TPP_ID
    
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    
    Set WS = Sheets(S1)
    WS.Activate
    
    RCC = Sheets(S1).Cells(Rows.Count, 151).End(xlUp).Row
    If RCC > 8 Then WS.Range(Sheets(S1).Cells(9, 151), Sheets(S1).Cells(RCC, 151)).Clear
    'Sheets(S1).Rows("9:" & RCc).Clear
        Sheets(S1).Cells(9, 151).CopyFromRecordset RecordSet
        RecordSet.Close

    
    RCC = Sheets(S1).Cells(Rows.Count, 152).End(xlUp).Row
    If RCC > 5 Then Sheets(S1).Range(Sheets(S1).Cells(6, 152), Sheets(S1).Cells(RCC, 152)).Clear
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    Sheets(S1).Cells(6, 152).CopyFromRecordset RecordSet
    RecordSet.Close
    
    '2ND MODEL
    sqlCmd = " SELECT PSE_CAUSE_DESC FROM [dbo].[PSE_CAUSE_DESC_T] WHERE ENGINE_MODEL IN ('CF34-3') " & "AND TPP_ID= " & TPP_ID
    
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    
    RCC = Sheets(S1).Cells(Rows.Count, 154).End(xlUp).Row
    If RCC > 8 Then Sheets(S1).Range(Sheets(S1).Cells(9, 154), Sheets(S1).Cells(RCC, 154)).Clear
    'Sheets(S1).Rows("9:" & RCc).Clear
        Sheets(S1).Cells(9, 154).CopyFromRecordset RecordSet
        
    RCC = Sheets(S1).Cells(Rows.Count, 155).End(xlUp).Row
    If RCC > 5 Then Sheets(S1).Range(Sheets(S1).Cells(6, 155), Sheets(S1).Cells(RCC, 155)).Clear
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    Sheets(S1).Cells(6, 155).CopyFromRecordset RecordSet
    RecordSet.Close
    
     '3RD MODEL
    sqlCmd = " SELECT PSE_CAUSE_DESC FROM [dbo].[PSE_CAUSE_DESC_T] WHERE ENGINE_MODEL ='CF34-8C' " & "AND TPP_ID= " & TPP_ID
    
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    
    RCC = Sheets(S1).Cells(Rows.Count, 157).End(xlUp).Row
    If RCC > 8 Then Sheets(S1).Range(Sheets(S1).Cells(9, 157), Sheets(S1).Cells(RCC, 157)).Clear
    'Sheets(S1).Rows("9:" & RCc).Clear
        Sheets(S1).Cells(9, 157).CopyFromRecordset RecordSet
        
    RCC = Sheets(S1).Cells(Rows.Count, 158).End(xlUp).Row
    If RCC > 5 Then Sheets(S1).Range(Sheets(S1).Cells(6, 158), Sheets(S1).Cells(RCC, 158)).Clear
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    Sheets(S1).Cells(6, 158).CopyFromRecordset RecordSet
    RecordSet.Close
    
    '4TH MODEL
    sqlCmd = " SELECT PSE_CAUSE_DESC FROM [dbo].[PSE_CAUSE_DESC_T] WHERE ENGINE_MODEL ='CF34-8E' " & "AND TPP_ID= " & TPP_ID

    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    
    RCC = Sheets(S1).Cells(Rows.Count, 160).End(xlUp).Row
    If RCC > 8 Then Sheets(S1).Range(Sheets(S1).Cells(9, 160), Sheets(S1).Cells(RCC, 160)).Clear
    'Sheets(S1).Rows("9:" & RCc).Clear
        Sheets(S1).Cells(9, 160).CopyFromRecordset RecordSet
        
    RCC = Sheets(S1).Cells(Rows.Count, 161).End(xlUp).Row
    If RCC > 5 Then Sheets(S1).Range(Sheets(S1).Cells(6, 161), Sheets(S1).Cells(RCC, 161)).Clear
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    Sheets(S1).Cells(6, 161).CopyFromRecordset RecordSet
    RecordSet.Close
    
    '5TH MODEL
    sqlCmd = " SELECT PSE_CAUSE_DESC FROM [dbo].[PSE_CAUSE_DESC_T] WHERE ENGINE_MODEL ='CF6-50' " & "AND TPP_ID= " & TPP_ID

    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    
    RCC = Sheets(S1).Cells(Rows.Count, 163).End(xlUp).Row
    If RCC > 8 Then Sheets(S1).Range(Sheets(S1).Cells(9, 163), Sheets(S1).Cells(RCC, 163)).Clear
    'Sheets(S1).Rows("9:" & RCc).Clear
        Sheets(S1).Cells(9, 163).CopyFromRecordset RecordSet
        
    RCC = Sheets(S1).Cells(Rows.Count, 164).End(xlUp).Row
    If RCC > 5 Then Sheets(S1).Range(Sheets(S1).Cells(6, 164), Sheets(S1).Cells(RCC, 164)).Clear
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    Sheets(S1).Cells(6, 164).CopyFromRecordset RecordSet
    RecordSet.Close
    
    '6TH MODEL
    sqlCmd = " SELECT PSE_CAUSE_DESC FROM [dbo].[PSE_CAUSE_DESC_T] WHERE ENGINE_MODEL ='CF6-6' " & "AND TPP_ID= " & TPP_ID

    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    
    RCC = Sheets(S1).Cells(Rows.Count, 166).End(xlUp).Row
    If RCC > 8 Then Sheets(S1).Range(Sheets(S1).Cells(9, 166), Sheets(S1).Cells(RCC, 166)).Clear
    'Sheets(S1).Rows("9:" & RCc).Clear
        Sheets(S1).Cells(9, 166).CopyFromRecordset RecordSet
        
    RCC = Sheets(S1).Cells(Rows.Count, 167).End(xlUp).Row
    If RCC > 5 Then Sheets(S1).Range(Sheets(S1).Cells(6, 167), Sheets(S1).Cells(RCC, 167)).Clear
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    Sheets(S1).Cells(6, 167).CopyFromRecordset RecordSet
    RecordSet.Close
    
       '7TH MODEL
    sqlCmd = " SELECT PSE_CAUSE_DESC FROM [dbo].[PSE_CAUSE_DESC_T] WHERE ENGINE_MODEL ='CF6-80A' " & "AND TPP_ID= " & TPP_ID
    
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    
    RCC = Sheets(S1).Cells(Rows.Count, 169).End(xlUp).Row
    If RCC > 8 Then Sheets(S1).Range(Sheets(S1).Cells(9, 169), Sheets(S1).Cells(RCC, 169)).Clear
    'Sheets(S1).Rows("9:" & RCc).Clear
        Sheets(S1).Cells(9, 169).CopyFromRecordset RecordSet
        
    RCC = Sheets(S1).Cells(Rows.Count, 170).End(xlUp).Row
    If RCC > 5 Then Sheets(S1).Range(Sheets(S1).Cells(6, 170), Sheets(S1).Cells(RCC, 170)).Clear
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    Sheets(S1).Cells(6, 170).CopyFromRecordset RecordSet
    RecordSet.Close
  
  
    '8TH MODEL
    sqlCmd = " SELECT PSE_CAUSE_DESC FROM [dbo].[PSE_CAUSE_DESC_T] WHERE ENGINE_MODEL ='CF6-80C' " & "AND TPP_ID= " & TPP_ID
    
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    
    RCC = Sheets(S1).Cells(Rows.Count, 172).End(xlUp).Row
    If RCC > 8 Then Sheets(S1).Range(Sheets(S1).Cells(9, 172), Sheets(S1).Cells(RCC, 172)).Clear
    'Sheets(S1).Rows("9:" & RCc).Clear
        Sheets(S1).Cells(9, 172).CopyFromRecordset RecordSet
        
    RCC = Sheets(S1).Cells(Rows.Count, 173).End(xlUp).Row
    If RCC > 5 Then Sheets(S1).Range(Sheets(S1).Cells(6, 173), Sheets(S1).Cells(RCC, 173)).Clear
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    Sheets(S1).Cells(6, 173).CopyFromRecordset RecordSet
    RecordSet.Close
  
    
    '9TH MODEL
    sqlCmd = " SELECT PSE_CAUSE_DESC FROM [dbo].[PSE_CAUSE_DESC_T] WHERE ENGINE_MODEL ='CF6-80E' " & "AND TPP_ID= " & TPP_ID

    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    
    RCC = Sheets(S1).Cells(Rows.Count, 175).End(xlUp).Row
    If RCC > 8 Then Sheets(S1).Range(Sheets(S1).Cells(9, 175), Sheets(S1).Cells(RCC, 175)).Clear
    'Sheets(S1).Rows("9:" & RCc).Clear
        Sheets(S1).Cells(9, 175).CopyFromRecordset RecordSet
        
    RCC = Sheets(S1).Cells(Rows.Count, 176).End(xlUp).Row
    If RCC > 5 Then Sheets(S1).Range(Sheets(S1).Cells(6, 176), Sheets(S1).Cells(RCC, 176)).Clear
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    Sheets(S1).Cells(6, 176).CopyFromRecordset RecordSet
    RecordSet.Close
    
    '10TH MODEL
    sqlCmd = " SELECT PSE_CAUSE_DESC FROM [dbo].[PSE_CAUSE_DESC_T] WHERE ENGINE_MODEL ='CFM56-2B' " & "AND TPP_ID= " & TPP_ID


    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    
    RCC = Sheets(S1).Cells(Rows.Count, 178).End(xlUp).Row
    If RCC > 8 Then Sheets(S1).Range(Sheets(S1).Cells(9, 178), Sheets(S1).Cells(RCC, 178)).Clear
    'Sheets(S1).Rows("9:" & RCc).Clear
        Sheets(S1).Cells(9, 178).CopyFromRecordset RecordSet
        
    RCC = Sheets(S1).Cells(Rows.Count, 179).End(xlUp).Row
    If RCC > 5 Then Sheets(S1).Range(Sheets(S1).Cells(6, 179), Sheets(S1).Cells(RCC, 179)).Clear
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    Sheets(S1).Cells(6, 179).CopyFromRecordset RecordSet
    RecordSet.Close
    
    '11TH MODEL
    sqlCmd = " SELECT PSE_CAUSE_DESC FROM [dbo].[PSE_CAUSE_DESC_T] WHERE ENGINE_MODEL ='CFM56-3' " & "AND TPP_ID= " & TPP_ID


    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    
    RCC = Sheets(S1).Cells(Rows.Count, 181).End(xlUp).Row
    If RCC > 8 Then Sheets(S1).Range(Sheets(S1).Cells(9, 181), Sheets(S1).Cells(RCC, 181)).Clear
    'Sheets(S1).Rows("9:" & RCc).Clear
        Sheets(S1).Cells(9, 181).CopyFromRecordset RecordSet
        
    RCC = Sheets(S1).Cells(Rows.Count, 182).End(xlUp).Row
    If RCC > 5 Then Sheets(S1).Range(Sheets(S1).Cells(6, 182), Sheets(S1).Cells(RCC, 182)).Clear
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    Sheets(S1).Cells(6, 182).CopyFromRecordset RecordSet
    RecordSet.Close
    
    '12TH MODEL
    sqlCmd = " SELECT PSE_CAUSE_DESC FROM [dbo].[PSE_CAUSE_DESC_T] WHERE ENGINE_MODEL ='CFM56-5A' " & "AND TPP_ID= " & TPP_ID

    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    
    RCC = Sheets(S1).Cells(Rows.Count, 184).End(xlUp).Row
    If RCC > 8 Then Sheets(S1).Range(Sheets(S1).Cells(9, 184), Sheets(S1).Cells(RCC, 184)).Clear
    'Sheets(S1).Rows("9:" & RCc).Clear
        Sheets(S1).Cells(9, 184).CopyFromRecordset RecordSet
        
    RCC = Sheets(S1).Cells(Rows.Count, 185).End(xlUp).Row
    If RCC > 5 Then Sheets(S1).Range(Sheets(S1).Cells(6, 185), Sheets(S1).Cells(RCC, 185)).Clear
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    Sheets(S1).Cells(6, 185).CopyFromRecordset RecordSet
    RecordSet.Close
    
    
     '13TH MODEL
    sqlCmd = " SELECT PSE_CAUSE_DESC FROM [dbo].[PSE_CAUSE_DESC_T] WHERE ENGINE_MODEL ='CFM56-5B' " & "AND TPP_ID= " & TPP_ID


    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    
    RCC = Sheets(S1).Cells(Rows.Count, 187).End(xlUp).Row
    If RCC > 8 Then Sheets(S1).Range(Sheets(S1).Cells(9, 187), Sheets(S1).Cells(RCC, 187)).Clear
    'Sheets(S1).Rows("9:" & RCc).Clear
        Sheets(S1).Cells(9, 187).CopyFromRecordset RecordSet
        
    RCC = Sheets(S1).Cells(Rows.Count, 188).End(xlUp).Row
    If RCC > 5 Then Sheets(S1).Range(Sheets(S1).Cells(6, 188), Sheets(S1).Cells(RCC, 188)).Clear
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    Sheets(S1).Cells(6, 188).CopyFromRecordset RecordSet
    RecordSet.Close
    
      '14TH MODEL
    sqlCmd = " SELECT PSE_CAUSE_DESC FROM [dbo].[PSE_CAUSE_DESC_T] WHERE ENGINE_MODEL ='CFM56-5C' " & "AND TPP_ID= " & TPP_ID
   
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    
    RCC = Sheets(S1).Cells(Rows.Count, 190).End(xlUp).Row
    If RCC > 8 Then Sheets(S1).Range(Sheets(S1).Cells(9, 190), Sheets(S1).Cells(RCC, 190)).Clear
    'Sheets(S1).Rows("9:" & RCc).Clear
        Sheets(S1).Cells(9, 190).CopyFromRecordset RecordSet
        
    RCC = Sheets(S1).Cells(Rows.Count, 191).End(xlUp).Row
    If RCC > 5 Then Sheets(S1).Range(Sheets(S1).Cells(6, 191), Sheets(S1).Cells(RCC, 191)).Clear
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    Sheets(S1).Cells(6, 191).CopyFromRecordset RecordSet
    RecordSet.Close
    
     '15TH MODEL
    sqlCmd = " SELECT PSE_CAUSE_DESC FROM [dbo].[PSE_CAUSE_DESC_T] WHERE ENGINE_MODEL ='CFM56-7B' " & "AND TPP_ID= " & TPP_ID


    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    
    RCC = Sheets(S1).Cells(Rows.Count, 193).End(xlUp).Row
    If RCC > 8 Then Sheets(S1).Range(Sheets(S1).Cells(9, 193), Sheets(S1).Cells(RCC, 193)).Clear
    'Sheets(S1).Rows("9:" & RCc).Clear
        Sheets(S1).Cells(9, 193).CopyFromRecordset RecordSet
        
    RCC = Sheets(S1).Cells(Rows.Count, 194).End(xlUp).Row
    If RCC > 5 Then Sheets(S1).Range(Sheets(S1).Cells(6, 194), Sheets(S1).Cells(RCC, 194)).Clear
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    Sheets(S1).Cells(6, 194).CopyFromRecordset RecordSet
    RecordSet.Close
    
     '16TH MODEL
    sqlCmd = " SELECT PSE_CAUSE_DESC FROM [dbo].[PSE_CAUSE_DESC_T] WHERE ENGINE_MODEL ='CT7-5A' " & "AND TPP_ID= " & TPP_ID

    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    
    RCC = Sheets(S1).Cells(Rows.Count, 196).End(xlUp).Row
    If RCC > 8 Then Sheets(S1).Range(Sheets(S1).Cells(9, 196), Sheets(S1).Cells(RCC, 196)).Clear
    'Sheets(S1).Rows("9:" & RCc).Clear
        Sheets(S1).Cells(9, 196).CopyFromRecordset RecordSet
        
    RCC = Sheets(S1).Cells(Rows.Count, 197).End(xlUp).Row
    If RCC > 5 Then Sheets(S1).Range(Sheets(S1).Cells(6, 197), Sheets(S1).Cells(RCC, 197)).Clear
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    Sheets(S1).Cells(6, 197).CopyFromRecordset RecordSet
    RecordSet.Close
    
    
    '17TH MODEL
    sqlCmd = " SELECT PSE_CAUSE_DESC FROM [dbo].[PSE_CAUSE_DESC_T] WHERE ENGINE_MODEL ='CT7-8' " & "AND TPP_ID= " & TPP_ID

    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    
    RCC = Sheets(S1).Cells(Rows.Count, 199).End(xlUp).Row
    If RCC > 8 Then Sheets(S1).Range(Sheets(S1).Cells(9, 199), Sheets(S1).Cells(RCC, 199)).Clear
    'Sheets(S1).Rows("9:" & RCc).Clear
        Sheets(S1).Cells(9, 199).CopyFromRecordset RecordSet
        
    RCC = Sheets(S1).Cells(Rows.Count, 200).End(xlUp).Row
    If RCC > 5 Then Sheets(S1).Range(Sheets(S1).Cells(6, 200), Sheets(S1).Cells(RCC, 200)).Clear
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    Sheets(S1).Cells(6, 200).CopyFromRecordset RecordSet
    RecordSet.Close
    
    '18TH MODEL
    sqlCmd = " SELECT PSE_CAUSE_DESC FROM [dbo].[PSE_CAUSE_DESC_T] WHERE ENGINE_MODEL ='CT7-9B' " & "AND TPP_ID= " & TPP_ID

    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    
    RCC = Sheets(S1).Cells(Rows.Count, 202).End(xlUp).Row
    If RCC > 8 Then Sheets(S1).Range(Sheets(S1).Cells(9, 202), Sheets(S1).Cells(RCC, 202)).Clear
    'Sheets(S1).Rows("9:" & RCc).Clear
        Sheets(S1).Cells(9, 202).CopyFromRecordset RecordSet
        
    RCC = Sheets(S1).Cells(Rows.Count, 203).End(xlUp).Row
    If RCC > 5 Then Sheets(S1).Range(Sheets(S1).Cells(6, 203), Sheets(S1).Cells(RCC, 203)).Clear
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    Sheets(S1).Cells(6, 203).CopyFromRecordset RecordSet
    RecordSet.Close
    
    '19TH MODEL
    sqlCmd = " SELECT PSE_CAUSE_DESC FROM [dbo].[PSE_CAUSE_DESC_T] WHERE ENGINE_MODEL ='GE90-100' " & "AND TPP_ID= " & TPP_ID

    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    
    RCC = Sheets(S1).Cells(Rows.Count, 205).End(xlUp).Row
    If RCC > 8 Then Sheets(S1).Range(Sheets(S1).Cells(9, 205), Sheets(S1).Cells(RCC, 205)).Clear
    'Sheets(S1).Rows("9:" & RCc).Clear
        Sheets(S1).Cells(9, 205).CopyFromRecordset RecordSet
        
    RCC = Sheets(S1).Cells(Rows.Count, 206).End(xlUp).Row
    If RCC > 5 Then Sheets(S1).Range(Sheets(S1).Cells(6, 206), Sheets(S1).Cells(RCC, 206)).Clear
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    Sheets(S1).Cells(6, 206).CopyFromRecordset RecordSet
    RecordSet.Close
    
    '20TH MODEL
    sqlCmd = " SELECT PSE_CAUSE_DESC FROM [dbo].[PSE_CAUSE_DESC_T] WHERE ENGINE_MODEL ='GE90-90' " & "AND TPP_ID= " & TPP_ID
 
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    
    RCC = Sheets(S1).Cells(Rows.Count, 208).End(xlUp).Row
    If RCC > 8 Then Sheets(S1).Range(Sheets(S1).Cells(9, 208), Sheets(S1).Cells(RCC, 208)).Clear
    'Sheets(S1).Rows("9:" & RCc).Clear
        Sheets(S1).Cells(9, 208).CopyFromRecordset RecordSet
        
    RCC = Sheets(S1).Cells(Rows.Count, 209).End(xlUp).Row
    If RCC > 5 Then Sheets(S1).Range(Sheets(S1).Cells(6, 209), Sheets(S1).Cells(RCC, 209)).Clear
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    Sheets(S1).Cells(6, 209).CopyFromRecordset RecordSet
    RecordSet.Close
    
     '21TH MODEL
    sqlCmd = " SELECT PSE_CAUSE_DESC FROM [dbo].[PSE_CAUSE_DESC_T] WHERE ENGINE_MODEL ='GENX-1B' " & "AND TPP_ID= " & TPP_ID

    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    
    RCC = Sheets(S1).Cells(Rows.Count, 211).End(xlUp).Row
    If RCC > 8 Then Sheets(S1).Range(Sheets(S1).Cells(9, 211), Sheets(S1).Cells(RCC, 211)).Clear
    'Sheets(S1).Rows("9:" & RCc).Clear
        Sheets(S1).Cells(9, 211).CopyFromRecordset RecordSet
        
    RCC = Sheets(S1).Cells(Rows.Count, 212).End(xlUp).Row
    If RCC > 5 Then Sheets(S1).Range(Sheets(S1).Cells(6, 212), Sheets(S1).Cells(RCC, 212)).Clear
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    Sheets(S1).Cells(6, 212).CopyFromRecordset RecordSet
    RecordSet.Close
    
     '22TH MODEL
    sqlCmd = " SELECT PSE_CAUSE_DESC FROM [dbo].[PSE_CAUSE_DESC_T] WHERE ENGINE_MODEL ='GENX-2B' " & "AND TPP_ID= " & TPP_ID
    
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    
    RCC = Sheets(S1).Cells(Rows.Count, 214).End(xlUp).Row
    If RCC > 8 Then Sheets(S1).Range(Sheets(S1).Cells(9, 214), Sheets(S1).Cells(RCC, 214)).Clear
    'Sheets(S1).Rows("9:" & RCc).Clear
        Sheets(S1).Cells(9, 214).CopyFromRecordset RecordSet
        
    RCC = Sheets(S1).Cells(Rows.Count, 215).End(xlUp).Row
    If RCC > 5 Then Sheets(S1).Range(Sheets(S1).Cells(6, 215), Sheets(S1).Cells(RCC, 215)).Clear
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    Sheets(S1).Cells(6, 215).CopyFromRecordset RecordSet
    RecordSet.Close
    
     '23RD MODEL
    sqlCmd = " SELECT PSE_CAUSE_DESC FROM [dbo].[PSE_CAUSE_DESC_T] WHERE ENGINE_MODEL ='GP7200' " & "AND TPP_ID= " & TPP_ID
    
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    
    RCC = Sheets(S1).Cells(Rows.Count, 217).End(xlUp).Row
    If RCC > 8 Then Sheets(S1).Range(Sheets(S1).Cells(9, 217), Sheets(S1).Cells(RCC, 217)).Clear
    'Sheets(S1).Rows("9:" & RCc).Clear
        Sheets(S1).Cells(9, 217).CopyFromRecordset RecordSet
        
    RCC = Sheets(S1).Cells(Rows.Count, 218).End(xlUp).Row
    If RCC > 5 Then Sheets(S1).Range(Sheets(S1).Cells(6, 218), Sheets(S1).Cells(RCC, 218)).Clear
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    Sheets(S1).Cells(6, 218).CopyFromRecordset RecordSet
    RecordSet.Close
    
    '24TH MODEL
    sqlCmd = " SELECT PSE_CAUSE_DESC FROM [dbo].[PSE_CAUSE_DESC_T] WHERE ENGINE_MODEL ='LEAP-1A' " & "AND TPP_ID= " & TPP_ID
    
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    
    RCC = Sheets(S1).Cells(Rows.Count, 220).End(xlUp).Row
    If RCC > 8 Then Sheets(S1).Range(Sheets(S1).Cells(9, 220), Sheets(S1).Cells(RCC, 220)).Clear
    'Sheets(S1).Rows("9:" & RCc).Clear
        Sheets(S1).Cells(9, 220).CopyFromRecordset RecordSet
        
    RCC = Sheets(S1).Cells(Rows.Count, 221).End(xlUp).Row
    If RCC > 5 Then Sheets(S1).Range(Sheets(S1).Cells(6, 221), Sheets(S1).Cells(RCC, 221)).Clear
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    Sheets(S1).Cells(6, 221).CopyFromRecordset RecordSet
    RecordSet.Close
    
    '25TH MODEL
    sqlCmd = " SELECT PSE_CAUSE_DESC FROM [dbo].[PSE_CAUSE_DESC_T] WHERE ENGINE_MODEL ='LEAP-1B' " & "AND TPP_ID= " & TPP_ID
    
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    
    RCC = Sheets(S1).Cells(Rows.Count, 223).End(xlUp).Row
    If RCC > 8 Then Sheets(S1).Range(Sheets(S1).Cells(9, 223), Sheets(S1).Cells(RCC, 223)).Clear
    'Sheets(S1).Rows("9:" & RCc).Clear
        Sheets(S1).Cells(9, 223).CopyFromRecordset RecordSet
        
    RCC = Sheets(S1).Cells(Rows.Count, 224).End(xlUp).Row
    If RCC > 5 Then Sheets(S1).Range(Sheets(S1).Cells(6, 224), Sheets(S1).Cells(RCC, 224)).Clear
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    Sheets(S1).Cells(6, 224).CopyFromRecordset RecordSet
    RecordSet.Close
    
    '26TH MODEL
    sqlCmd = " SELECT PSE_CAUSE_DESC FROM [dbo].[PSE_CAUSE_DESC_T] WHERE ENGINE_MODEL ='LEAP-1C' " & "AND TPP_ID= " & TPP_ID
    
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    
    RCC = Sheets(S1).Cells(Rows.Count, 226).End(xlUp).Row
    If RCC > 8 Then Sheets(S1).Range(Sheets(S1).Cells(9, 226), Sheets(S1).Cells(RCC, 226)).Clear
    'Sheets(S1).Rows("9:" & RCc).Clear
        Sheets(S1).Cells(9, 226).CopyFromRecordset RecordSet
        
    RCC = Sheets(S1).Cells(Rows.Count, 227).End(xlUp).Row
    If RCC > 5 Then Sheets(S1).Range(Sheets(S1).Cells(6, 227), Sheets(S1).Cells(RCC, 227)).Clear
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    Sheets(S1).Cells(6, 227).CopyFromRecordset RecordSet
    RecordSet.Close
    
End Sub

Sub Get_ANALYTICS_Data()

    '===========================
    ' Update: 10/28/2020
    '===========================
   
    ReadConnectionXML
    OpenSQLConnection
    
    S0 = "Supporting Data"
    S1 = "Analytics Data"
    S2 = "Probabilistic Data"
    
    '===============================
    ' Analytics Data table
    
    Dim sqlCmd As String
    Dim RecordSet  As ADODB.RecordSet

    sqlCmd = " SELECT  [ANALYTIC_NAME], [ANALYTIC_TYPE],[MODULE], [ESN] , [AGE_BASIS], CONVERT(VARCHAR(10),[MODEL_UPDATE],101) AS [MODEL_UPDATE] ,[MODEL_REVISION] ,[TI] , [TC] ,[CUR_ANALYTIC_VALUE],[INITIAL_LIM_ANALYTIC_VALUE],[ULTIMATE_LIM_ANALYTIC_VALUE],[EXPOSURE],[REASON],[TYPE_OF_REMOVAL],[NEXT_INSPECTION_BASIS],[NEXT_INSPECTION_INTERVAL],[NEXT_INSPECTION_PROBABILITY] FROM [dbo].[ANALYTICS] WHERE TPP_ID = " & TPP_ID
    
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn

    'Clear old data
    RCC1 = Sheets(S1).Cells(Rows.Count, 1).End(xlUp).Row
    If RCC1 > 1 Then
        Sheets(S1).Rows("2:" & RCC1).Clear
    End If
    
    Sheets(S1).Columns(4).NumberFormat = "@"
    Sheets(S1).Cells(2, 1).CopyFromRecordset RecordSet
    RecordSet.Close

    RC = Sheets(S1).Cells(Rows.Count, 4).End(xlUp).Row
    If RC > 1 Then
        Dim Tarray
        Tarray = Sheets(S1).Range(Sheets(S1).Cells(2, 6), Sheets(S1).Cells(RC, 6)).Value
        Sheets(S1).Range(Sheets(S1).Cells(2, 6), Sheets(S1).Cells(RC, 6)).Value = Tarray
        
        If RC > 2 Then
            Erase Tarray
        End If
    End If

    '===============================
    ' Probabilistic Data table
    
    Dim sqlCmd2 As String
    Dim RecordSet2  As ADODB.RecordSet
    
    sqlCmd2 = " SELECT  [ANALYTIC_NAME], [ANALYTIC_TYPE],[MODULE], [ESN] , [AGE_BASIS], CONVERT(VARCHAR(10),[MODEL_UPDATE],101) AS [MODEL_UPDATE] ,[UTILIZATION_VALUE] ,[CONFIGURATION] ,[RAW_PROBABILITY],[ADJUSTED_PROBABILITY],CONVERT(VARCHAR(10),[ANCHOR_DATE],101),[REMOVAL_PROBABILITY_THRESHOLD],[INSPECTION_PROBABILITY_THRSHLD] FROM [dbo].[PROBABILISTICS] WHERE TPP_ID = " & TPP_ID
    
    Set RecordSet2 = New ADODB.RecordSet
    RecordSet2.Open sqlCmd2, conn
    
    ' Clear old data
    CC2 = Sheets(S2).Cells(Rows.Count, 1).End(xlUp).Row
    If CC2 > 1 Then
        Sheets(S2).Rows("2:" & CC2).Clear
    End If
    
    Sheets(S2).Columns(4).NumberFormat = "@"
    Sheets(S2).Cells(2, 1).CopyFromRecordset RecordSet2
    RecordSet2.Close
    
    RC = Sheets(S2).Cells(Rows.Count, 4).End(xlUp).Row
    If RC > 1 Then
        Dim Tarray3
        Tarray3 = Sheets(S2).Range(Sheets(S2).Cells(2, 6), Sheets(S2).Cells(RC, 6)).Value
        Sheets(S2).Range(Sheets(S2).Cells(2, 6), Sheets(S2).Cells(RC, 6)).Value = Tarray3
        
        If RC > 2 Then
            Erase Tarray3
        End If
    End If
    
    ' Update SAW model list
    RCC0 = Sheets(S0).Cells(Rows.Count, 135).End(xlUp).Row
    AnalyticCount = Sheets(S2).Cells(Rows.Count, 1).End(xlUp).Row
    
    If AnalyticCount > 1 Then
        
        'Sort data
        Sheets(S2).Range(Sheets(S2).Cells(2, 1), Sheets(S2).Cells(AnalyticCount, 13)).Sort key1:=Sheets(S2).Range(Sheets(S2).Cells(2, 9), Sheets(S2).Cells(AnalyticCount, 9)), order1:=xlAscending
        Sheets(S2).Range(Sheets(S2).Cells(2, 1), Sheets(S2).Cells(AnalyticCount, 13)).Sort key1:=Sheets(S2).Range(Sheets(S2).Cells(2, 4), Sheets(S2).Cells(AnalyticCount, 4)), order1:=xlAscending
       
        Dim Tarray2
        Tarray2 = Sheets(S2).Range(Sheets(S2).Cells(2, 1), Sheets(S2).Cells(AnalyticCount, 13)).Value
        
        If RCC0 > 4 Then
            Sheets(S0).Range(Sheets(S0).Cells(5, 135), Sheets(S0).Cells(RCC0, 135)).Clear
        End If
        
        Aarray = Sheets(S0).Range(Sheets(S0).Cells(5, 135), Sheets(S0).Cells(AnalyticCount, 135)).Value

        Counter = 2
        Aarray(2, 1) = "All models"
        For i = 1 To UBound(Tarray2)
            AnalyticName = Tarray2(i, 1)
        
            For j = 3 To UBound(Aarray)
                If i = 1 Then
                    Aarray(j, 1) = AnalyticName
                    Counter = Counter + 1
                    Exit For
                Else
                    If Aarray(j, 1) = AnalyticName Then
                        Exit For
                    Else
                        If Aarray(j, 1) = "" Then
                            Aarray(j, 1) = AnalyticName
                            Counter = Counter + 1
                            Exit For
                        End If
                    End If
                End If
            Next j
        Next i
        
        Sheets(S0).Range(Sheets(S0).Cells(5, 135), Sheets(S0).Cells(Counter - 1 + 5, 135)).Value = Aarray
        Sheets(S0).Range(Sheets(S0).Cells(6, 135), Sheets(S0).Cells(Counter - 1 + 5, 135)).Sort key1:=Sheets(S0).Range(Sheets(S0).Cells(6, 135), Sheets(S0).Cells(Counter - 1 + 5, 135)), order1:=xlAscending
        
        Sheets(S2).Range(Sheets(S2).Cells(2, 1), Sheets(S2).Cells(AnalyticCount, 13)).Sort key1:=Sheets(S2).Range(Sheets(S2).Cells(2, 1), Sheets(S2).Cells(AnalyticCount, 1)), order1:=xlAscending

        Erase Tarray2
        Erase Aarray
    End If
    
End Sub

Sub GetEGTPlotting_Data(ESN As Variant, EngineModel As Variant)
   
   ReadConnectionXML
   OpenSQLConnection
    
    S1 = "Engine History"
    Dim sqlCmd As String
    Dim RecordSet  As ADODB.RecordSet
    
    sqlCmd = "SELECT DISTINCT FLIGHT_DATETIME,ACTUAL_VALUE  FROM [DBO].[DIAGNOSTIC_NONGENX_T]  WHERE ESN = " & ESN
    sqlCmd = sqlCmd & " AND FLIGHT_DATETIME >= (SELECT MAX(ENGINE_INSTALL_DATE) FROM [DBO].[DIAGNOSTIC_NONGENX_T] WHERE ESN  = " & ESN
    sqlCmd = sqlCmd & ") ORDER BY FLIGHT_DATETIME"
     
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    
    Set WS = Sheets(S1)
    WS.Activate
    
    ClearCell "Engine History", "D5:E5"
        
    Sheets(S1).Cells(5, 4).CopyFromRecordset RecordSet
    RecordSet.Close
   
   
End Sub
'=================================================================================
                            'Code for Write Back Start
'=================================================================================


Sub Publish_Data()
    
    '===========================
    ' Last updated: 10/23/2020
    '===========================
    
    On Error GoTo errorhandler:
    
    Dim sqlCmd As String
    
    ReadConnectionXML
    OpenSQLConnection
    
    ErrorFlag = False
    IsSuccess = True
    
    Dim Rst As ADODB.RecordSet
    Dim TPPID As Integer
    Dim SSO_ID As String
    Dim Engine_Model As String
    Dim AIRLINE_NAME As String
    Dim Airline_SHORT_NAME As String
    Dim AirlineNameParam As String
    Dim HeaderID As String
    
    Dim tppObj As Object
    Set tppObj = CreateObject("TPPLibrary.TPPLibraryV8")
    SSO_ID = tppObj.GetSSO()

    TPP_ID = Sheets("Supporting Data").Cells(19, 7)
    
    If TPP_ID = 0 Then
        MsgBox ("No Record found for this TPP. Please download data at least once before publish!")
        Exit Sub
    End If

    EngineModelParam = Sheets("Supporting Data").Cells(6, 71)
    AirlineNameParam = ""
    
    For i = 15 To 19
        x = Sheets("Supporting Data").Cells(i, 12)
        If x <> "" Then
            AirlineNameParam = AirlineNameParam + x + ";"
        End If
    Next i
    
    AirlineNameParam = Left(AirlineNameParam, Len(AirlineNameParam) - 1)
    
    
    sqlCmd = "select  *  from [dbo].[INPUT_PARAMETERS_T] where TPP_ID = " & TPP_ID & " AND ENGINE_MODEL = '" & EngineModelParam & "' AND AIRLINE_NAME = '" & AirlineNameParam & "' "
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    If RecordSet.RecordCount = 0 Then
        MsgBox ("This TPP file is not recognized on your machine. Please download data into this file first and then proceed with the publish.")
        Exit Sub
    End If
    
    Engine_Model = EngineModelParam
    
    ENGINE_SERIES = Sheets("Supporting Data").Cells(10, 10)
    
    Airline_SHORT_NAME = GetShortNameOfAirline(AirlineNameParam)
   
    If (Airline_SHORT_NAME = "" Or Engine_Model = "" Or TPP_ID = 0) Then
        MsgBox ("This TPP file is not recognized on your machine. Please download data into this file first and then proceed with the publish.")
        Exit Sub
    End If
    
    Application.DisplayAlerts = False
    Application.ScreenUpdating = False
    
    HeaderID = Header_WriteBack(SSO_ID, TPP_ID, Engine_Model, Airline_SHORT_NAME)
    
    Application.DisplayAlerts = False
    Application.ScreenUpdating = False
    
    IsSuccess = FrontPage_WriteBack(HeaderID, TPP_ID, Engine_Model, Airline_SHORT_NAME, SSO_ID)
    If IsSuccess = False Then
        Exit Sub
    End If
    
    Application.DisplayAlerts = False
    Application.ScreenUpdating = False
    
    IsSuccess = ExposureStatus_WriteBack(HeaderID, TPP_ID, Engine_Model, Airline_SHORT_NAME, SSO_ID)
    If IsSuccess = False Then
        Exit Sub
    End If
    
    Application.DisplayAlerts = False
    Application.ScreenUpdating = False
    
    IsSuccess = FPplotData_WriteBack(HeaderID, TPP_ID, Engine_Model, Airline_SHORT_NAME, SSO_ID)
    If IsSuccess = False Then
        Exit Sub
    End If
    
    Application.DisplayAlerts = False
    Application.ScreenUpdating = False
    
    IsSuccess = MaintenanceBurden_WriteBack(HeaderID, TPP_ID, Engine_Model, Airline_SHORT_NAME, SSO_ID)
    If IsSuccess = False Then
        Exit Sub
    End If
    
    Application.DisplayAlerts = False
    Application.ScreenUpdating = False
    
    IsSuccess = MBICalculations_WriteBack(HeaderID, TPP_ID, Engine_Model, Airline_SHORT_NAME, SSO_ID)
    If IsSuccess = False Then
        Exit Sub
    End If
    
    Application.DisplayAlerts = False
    Application.ScreenUpdating = False
    
    IsSuccess = FSECustomerContacts_WriteBack(HeaderID, TPP_ID, Engine_Model, Airline_SHORT_NAME, SSO_ID)
    If IsSuccess = False Then
        Exit Sub
    End If
    
    Application.DisplayAlerts = False
    Application.ScreenUpdating = False
    
    IsSuccess = SpareStatus_WriteBack(HeaderID, TPP_ID, Engine_Model, Airline_SHORT_NAME, SSO_ID)
    If IsSuccess = False Then
        Exit Sub
    End If
    
    Application.DisplayAlerts = False
    Application.ScreenUpdating = False
    
    IsSuccess = DerateData_WriteBack(HeaderID, TPP_ID, Engine_Model, Airline_SHORT_NAME, SSO_ID)
    If IsSuccess = False Then
        Exit Sub
    End If
    
    Application.DisplayAlerts = False
    Application.ScreenUpdating = False
    
    IsSuccess = MpdData_WriteBack(HeaderID, TPP_ID, Engine_Model, Airline_SHORT_NAME, SSO_ID)
    If IsSuccess = False Then
        Exit Sub
    End If
    
    Application.DisplayAlerts = False
    Application.ScreenUpdating = False
    
    IsSuccess = AircraftMaintenance_WriteBack(HeaderID, TPP_ID, Engine_Model, Airline_SHORT_NAME, SSO_ID)
    If IsSuccess = False Then
        Exit Sub
    End If
    
    Application.DisplayAlerts = False
    Application.ScreenUpdating = False
    
    IsSuccess = FleetAircraft_WriteBack(HeaderID, TPP_ID, Engine_Model, Airline_SHORT_NAME, SSO_ID)
    If IsSuccess = False Then
        Exit Sub
    End If
        
    Application.DisplayAlerts = False
    Application.ScreenUpdating = False
    
    IsSuccess = DiagnosticData_WriteBack(HeaderID, TPP_ID, Engine_Model, Airline_SHORT_NAME, SSO_ID)
    If IsSuccess = False Then
        Exit Sub
    End If
    
    Application.DisplayAlerts = False
    Application.ScreenUpdating = False
    
    IsSuccess = Diagnostics_WriteBack(HeaderID, TPP_ID, Engine_Model, Airline_SHORT_NAME, SSO_ID)
    If IsSuccess = False Then
        Exit Sub
    End If
    
    Application.DisplayAlerts = False
    Application.ScreenUpdating = False
    
    IsSuccess = StressTest_WriteBack(HeaderID, TPP_ID, Engine_Model, Airline_SHORT_NAME, SSO_ID)
    If IsSuccess = False Then
        Exit Sub
    End If
    
    Application.DisplayAlerts = False
    Application.ScreenUpdating = False
    
    IsSuccess = FleetProgram_Writeback(HeaderID, TPP_ID, Engine_Model, Airline_SHORT_NAME, SSO_ID)
    If IsSuccess = False Then
        Exit Sub
    End If
    
    Application.DisplayAlerts = False
    Application.ScreenUpdating = False
    
    IsSuccess = CalculationSrc3_Writeback(HeaderID, TPP_ID, Engine_Model, Airline_SHORT_NAME, SSO_ID)
    If IsSuccess = False Then
        Exit Sub
    End If
    
    Application.DisplayAlerts = False
    Application.ScreenUpdating = False
    
    IsSuccess = CalculationSrc2_WriteBack(HeaderID, TPP_ID, Engine_Model, Airline_SHORT_NAME, SSO_ID)
    If IsSuccess = False Then
        Exit Sub
    End If
    
    Application.DisplayAlerts = False
    Application.ScreenUpdating = False
    
    IsSuccess = CalculationSrc1_Writeback(HeaderID, TPP_ID, Engine_Model, Airline_SHORT_NAME, SSO_ID)
    If IsSuccess = False Then
        Exit Sub
    End If
       
    Application.DisplayAlerts = False
    Application.ScreenUpdating = False
       
    IsSuccess = SUPPDATA6_WRITEBACK(HeaderID, TPP_ID, Engine_Model, Airline_SHORT_NAME, SSO_ID)
    If IsSuccess = False Then
        Exit Sub
    End If
    
    Application.DisplayAlerts = False
    Application.ScreenUpdating = False
    
    IsSuccess = SUPPDATA12_WRITEBACK(HeaderID, TPP_ID, Engine_Model, Airline_SHORT_NAME, SSO_ID)
    If IsSuccess = False Then
        Exit Sub
    End If
    
    Application.DisplayAlerts = False
    Application.ScreenUpdating = False
    
    IsSuccess = SUPPDATA13_WRITEBACK(HeaderID, TPP_ID, Engine_Model, Airline_SHORT_NAME, SSO_ID)
    If IsSuccess = False Then
        Exit Sub
    End If
    
    Application.DisplayAlerts = False
    Application.ScreenUpdating = False
    
    IsSuccess = SUPPDATA9_WRITEBACK(HeaderID, TPP_ID, Engine_Model, Airline_SHORT_NAME, SSO_ID)
    If IsSuccess = False Then
        Exit Sub
    End If
    
    Application.DisplayAlerts = False
    Application.ScreenUpdating = False
    
    IsSuccess = SUPPDATA8_WRITEBACK(HeaderID, TPP_ID, Engine_Model, Airline_SHORT_NAME, SSO_ID)
    If IsSuccess = False Then
        Exit Sub
    End If
    
    Application.DisplayAlerts = False
    Application.ScreenUpdating = False
    
    IsSuccess = SUPPDATA7_WRITEBACK(HeaderID, TPP_ID, Engine_Model, Airline_SHORT_NAME, SSO_ID)
    If IsSuccess = False Then
        Exit Sub
    End If
    
    Application.DisplayAlerts = False
    Application.ScreenUpdating = False
    
    IsSuccess = SUPPDATA5_WRITEBACK(HeaderID, TPP_ID, Engine_Model, Airline_SHORT_NAME, SSO_ID)
    If IsSuccess = False Then
        Exit Sub
    End If
    
    Application.DisplayAlerts = False
    Application.ScreenUpdating = False
    
    IsSuccess = SUPPDATA4_WRITEBACK(HeaderID, TPP_ID, Engine_Model, Airline_SHORT_NAME, SSO_ID)
    If IsSuccess = False Then
        Exit Sub
    End If
    
    Application.DisplayAlerts = False
    Application.ScreenUpdating = False
    
    IsSuccess = SUPPDATA2_WRITEBACK(HeaderID, TPP_ID, Engine_Model, Airline_SHORT_NAME, SSO_ID)
    If IsSuccess = False Then
        Exit Sub
    End If
    
    Application.DisplayAlerts = False
    Application.ScreenUpdating = False
    
    IsSuccess = SUPPDATA1_WRITEBACK(HeaderID, TPP_ID, Engine_Model, Airline_SHORT_NAME, SSO_ID)
    If IsSuccess = False Then
        Exit Sub
    End If
    
    Application.DisplayAlerts = False
    Application.ScreenUpdating = False
    
    IsSuccess = SUPPDATA3_WRITEBACK(HeaderID, TPP_ID, Engine_Model, Airline_SHORT_NAME, SSO_ID)
    If IsSuccess = False Then
        Exit Sub
    End If
    
    Application.DisplayAlerts = False
    Application.ScreenUpdating = False
    
    IsSuccess = SUPPDATA10_WRITEBACK(HeaderID, TPP_ID, Engine_Model, Airline_SHORT_NAME, SSO_ID)
    If IsSuccess = False Then
        Exit Sub
    End If
    
    Application.DisplayAlerts = False
    Application.ScreenUpdating = False
    
    IsSuccess = SUPPDATA11_WRITEBACK(HeaderID, TPP_ID, Engine_Model, Airline_SHORT_NAME, SSO_ID)
    If IsSuccess = False Then
        Exit Sub
    End If
    
    Application.DisplayAlerts = False
    Application.ScreenUpdating = False
    
    IsSuccess = SUPPDATA16_WRITEBACK(HeaderID, TPP_ID, Engine_Model, Airline_SHORT_NAME, SSO_ID)
    If IsSuccess = False Then
        Exit Sub
    End If
    
    Application.DisplayAlerts = False
    Application.ScreenUpdating = False
    
    IsSuccess = SUPPDATA17_WRITEBACK(HeaderID, TPP_ID, Engine_Model, Airline_SHORT_NAME, SSO_ID)
    If IsSuccess = False Then
        Exit Sub
    End If
    
    Application.DisplayAlerts = False
    Application.ScreenUpdating = False
        
    IsSuccess = FleetProgramData_WriteBack(HeaderID, TPP_ID, Engine_Model, Airline_SHORT_NAME, SSO_ID)
    If IsSuccess = False Then
        Exit Sub
    End If
    
    Application.DisplayAlerts = False
    Application.ScreenUpdating = False
        
    conn.Close
     
    If ErrorFlag = True Then
        MsgBox ("While Publishing Data,following errors occured...          " & vbNewLine & vbNewLine & ErrorDesc)
    Else
        
        Flag = tppObj.PublishTPP(HeaderID, TDUsername, Airline_SHORT_NAME, Engine_Model, ENGINE_SERIES)
    
        If Flag = True Then
            MsgBox ("Data publish complete")
            
            S0 = "Front Page"
            S1 = "Cover Page"
            
            Sheets(S0).Cells(4, 23).Value = Date
            Sheets(S1).Cells(14, 10).Value = Date
        Else
            MsgBox ("Data publish failed, please try again")
        End If
    
    End If

errorhandler:

    CloseSQLConnection
    
End Sub

Function Header_WriteBack(SSO_ID As String, TPPID As Integer, Engine_Model As String, Airline_SHORT_NAME As String) As String
    
    '=========================
    ' Last updated: 9/14/2020
    '=========================
    
    
    On Error GoTo errorhandler:

    Header_WriteBack = 0
    
    Dim sqlCmd As String
    
    Dim RecordSet  As ADODB.RecordSet
    
    FDM_DATA = Sheets("Supporting Data").Cells(3, 10)
    AIRLINE_NAME = Sheets("Supporting Data").Cells(4, 10)
    AIRLINE_NAME = Replace(AIRLINE_NAME, "'", "''")
    'AIRLINE_SHORT_NAME = Sheets("Supporting Data").Cells(4, 10)
    AIRCRAFT_TYPE = Sheets("Supporting Data").Cells(3, 71)
    PUBLISHED_DATE = Now
    DOWNLOAD_DATE = Sheets("Supporting Data").Cells(12, 13)
    Valid_Date = Sheets("Calculation Source").Cells(2, 2)
    PRIMARY_FSE = Sheets("Supporting Data").Cells(5, 10)
    PRIMARY_FSE = Replace(PRIMARY_FSE, "'", "''")
    CSM = Sheets("Supporting Data").Cells(6, 10)
    TIME_BOX = Sheets("Supporting Data").Cells(7, 10)
    SERIES_ROLLUP = Sheets("Supporting Data").Cells(8, 10)
    AC_ROLLUP = Sheets("Supporting Data").Cells(9, 10)
    ENGINE_SERIES = Sheets("Supporting Data").Cells(10, 10)
    LAST_TECH_REVIEW = Sheets("Supporting Data").Cells(11, 10)
    COMPARISON_GROUP = Sheets("Supporting Data").Cells(12, 10)
    CPM = Sheets("Supporting Data").Cells(13, 10)
    NEXT_TECH_REVIEW = Sheets("Supporting Data").Cells(14, 10)
    SPM_NAME = Sheets("Supporting Data").Cells(17, 10)
    
    Dim tppObj As Object
    Set tppObj = CreateObject("TPPLibrary.TPPLibraryV8")
    HeaderID = tppObj.GetHeaderID()

    sqlCmd = " INSERT INTO [dbo].[WB_HEADER_T] ([TPP_ID],[SSO_ID],[ENGINE_MODEL],[FDM_DATA],[AIRLINE_SHORT_NAME],[AIRCRAFT_TYPE],[PUBLISHED_DATE],[DOWNLOAD_DATE],[VALID_DATE],[PRIMARY_FSE],[CSM],[TIME_BOX],[SERIES_ROLLUP],[AC_ROLLUP],[ENGINE_SERIES],[LAST_TECH_REVIEW],[COMPARISON_GROUP],[CPM],[NEXT_TECH_REVIEW],[AIRLINE_NAME],[ID] , [SPM_NAME] )"
    sqlCmd = sqlCmd & " VALUES('" & TPP_ID & "', '" & SSO_ID & "','" & Engine_Model & "','" & FDM_DATA & "','" & Airline_SHORT_NAME & "','" & AIRCRAFT_TYPE & "','" & PUBLISHED_DATE & "','" & DOWNLOAD_DATE & "','" & Valid_Date & "','" & PRIMARY_FSE & "','" & CSM & "','" & TIME_BOX & "','" & SERIES_ROLLUP & "','" & AC_ROLLUP & "','" & ENGINE_SERIES & "','" & LAST_TECH_REVIEW & "','" & COMPARISON_GROUP & "','" & CPM & "','" & NEXT_TECH_REVIEW & "','" & AIRLINE_NAME & "','" & HeaderID & "' ,'" & SPM_NAME & "') "

    conn.Execute sqlCmd
    
    Header_WriteBack = HeaderID
    
    Exit Function

errorhandler:
    
    ErrorFlag = True
    ErrorDesc = "Header Info -" & Err.Description & vbNewLine
    
    End Function

Function FrontPage_WriteBack(HeaderID As String, TPPID As Integer, Engine_Model As String, Airline_SHORT_NAME As String, SSO_ID As String) As Boolean

    '===========================
    ' Last updated: 11/11/2016
    '===========================
    
    On Error GoTo errorhandler:
    Dim sqlCmd As String
    'ReadConnectionXML
    'OpenSQLConnection

    Dim RecordSet  As ADODB.RecordSet
    
    FrontPage_WriteBack = True
    
    sqlCmd = " DELETE FROM WB_FP_FLEET_WATERWASH_T WHERE TPP_ID = '" & TPPID & "';"
    conn.Execute sqlCmd
    
   
    Fty = Sheets("Front Page").Cells(7, 18)
    If Len(Fty) > 100 Then
        MsgBox ("Front Page : Fty  is exceeding field limit.")
        FrontPage_WriteBack = False
        Exit Function
    Else
        Fty = Replace(Fty, "'", "''")
    End If

    
    Last_audit = Sheets("Front Page").Cells(7, 19)
    If Len(Last_audit) > 100 Then
        MsgBox ("Front Page : Last_audit  is exceeding field limit.")
        FrontPage_WriteBack = False
        Exit Function
    Else
        Last_audit = Replace(Last_audit, "'", "''")
    End If
    
    Interval = Sheets("Front Page").Cells(7, 21)
    If Len(Interval) > 100 Then
        MsgBox ("Front Page : Interval  is exceeding field limit.")
        FrontPage_WriteBack = False
        Exit Function
    Else
        Interval = Replace(Interval, "'", "''")
    End If
    
    Avg_egt_recovery = Sheets("Front Page").Cells(7, 22)
    If Len(Avg_egt_recovery) > 100 Then
        MsgBox ("Front Page : Avg_egt_recovery  is exceeding field limit.")
        FrontPage_WriteBack = False
        Exit Function
    Else
        Avg_egt_recovery = Replace(Avg_egt_recovery, "'", "''")
    End If
   
    Det_rate = Sheets("Front Page").Cells(7, 23)
    If Len(Det_rate) > 100 Then
        MsgBox ("Front Page : Det_rate  is exceeding field limit.")
        FrontPage_WriteBack = False
        Exit Function
    Else
        Det_rate = Replace(Det_rate, "'", "''")
    End If
    
    Days_below_alert = Sheets("Front Page").Cells(24, 13)
    If Days_below_alert <> "" And IsNumeric(Days_below_alert) = False Then
        MsgBox ("Front Page : Days_below_alert  is not valid number.")
        FrontPage_WriteBack = False
        Exit Function
    Else
        Days_below_alert = Round(Days_below_alert)
    End If
    
    Open_programs = Sheets("Front Page").Cells(26, 13)
    If Len(Open_programs) > 100 Then
        MsgBox ("Front Page : Open_programs  is exceeding field limit.")
        FrontPage_WriteBack = False
        Exit Function
    Else
        Open_programs = Replace(Open_programs, "'", "''")
    End If
 
    sqlCmd = " INSERT INTO [dbo].[WB_FP_FLEET_WATERWASH_T]([ID],[FTY],[LAST_AUDIT],[INTERVAL],[AVG_EGT_RECOVERY],[DET_RATE],[DAYS_BELOW_ALERT],[OPEN_PROGRAMS],[TPP_ID],[ENGINE_MODEL],[AIRLINE_SHORT_NAME],[SSO_ID])"
    sqlCmd = sqlCmd & " VALUES('" & HeaderID & "','" & Fty & "','" & Last_audit & "','" & Interval & "','" & Avg_egt_recovery & "','" & Det_rate & "','" & Days_below_alert & "','" & Open_programs & "','" & TPPID & "','" & Engine_Model & "','" & Airline_SHORT_NAME & "', '" & SSO_ID & "') "
    
    conn.Execute sqlCmd
      
    sqlCmd = " DELETE FROM WB_FP_AC_ENG_DET_T WHERE TPP_ID = '" & TPPID & "';"
    conn.Execute sqlCmd
            
    i = 6

    Do Until i > 7
        TYPE1 = Sheets("Front Page").Cells(i, 2)
        If Len(TYPE1) > 100 Then
            MsgBox ("Front Page : TYPE1  is exceeding field limit.")
            FrontPage_WriteBack = False
            Exit Function
        Else
          TYPE1 = Replace(TYPE1, "'", "''")
        End If
        
        Operator_fleet = Sheets("Front Page").Cells(i, 3)
        If Len(Operator_fleet) > 100 Then
            MsgBox ("Front Page : Operator_fleet  is exceeding field limit.")
            FrontPage_WriteBack = False
            Exit Function
        Else
          Operator_fleet = Replace(Operator_fleet, "'", "''")
        End If
               
        Total_in_ops = Sheets("Front Page").Cells(i, 6)
        If Len(Total_in_ops) > 100 Then
            MsgBox ("Front Page : Total_in_ops  is exceeding field limit.")
            FrontPage_WriteBack = False
            Exit Function
        Else
            Total_in_ops = Replace(Total_in_ops, "'", "''")
        End If
               
        Leased = Sheets("Front Page").Cells(i, 7)
        If Len(Leased) > 100 Then
          MsgBox ("Front Page : Leased  is exceeding field limit.")
          FrontPage_WriteBack = False
          Exit Function
        Else
          Leased = Replace(Leased, "'", "''")
        End If
        
        Spares = Sheets("Front Page").Cells(i, 8)
        If Len(Spares) > 100 Then
            MsgBox ("Front Page : Spares  is exceeding field limit.")
            FrontPage_WriteBack = False
            Exit Function
        Else
            Spares = Replace(Spares, "'", "''")
        End If
        
        Next_12m_chg = Sheets("Front Page").Cells(i, 9)
        If Len(Next_12m_chg) > 100 Then
            MsgBox ("Front Page : Next_12m_chg  is exceeding field limit.")
            FrontPage_WriteBack = False
            Exit Function
        Else
            Next_12m_chg = Replace(Next_12m_chg, "'", "''")
        End If
        
        sqlCmd = " INSERT INTO [dbo].[WB_FP_AC_ENG_DET_T]([ID],[TYPE1],[OPERATOR_FLEET],[TOTAL_IN_OPS],[LEASED],[SPARES],[NEXT_12M_CHG],[TPP_ID],[ENGINE_MODEL],[AIRLINE_SHORT_NAME],[SSO_ID])"
        sqlCmd = sqlCmd & " VALUES('" & HeaderID & "','" & TYPE1 & "','" & Operator_fleet & "','" & Total_in_ops & "','" & Leased & "','" & Spares & "','" & Next_12m_chg & "','" & TPPID & "','" & Engine_Model & "','" & Airline_SHORT_NAME & "', '" & SSO_ID & "') "
        conn.Execute sqlCmd
        i = i + 1
            
    Loop
    
    sqlCmd = " DELETE FROM  WB_FP_REM_PLAN_COMNT_T WHERE TPP_ID = '" & TPPID & "';"
    conn.Execute sqlCmd
    
    l = 18
    
    Do Until l > 20
              M_count = Sheets("Front Page").Cells(l, 15)
              If Len(M_count) > 50 Then
                    MsgBox ("Front Page : M_count  is exceeding field limit.")
                    FrontPage_WriteBack = False
                    Exit Function
                Else
                    M_count = Replace(M_count, "'", "''")
                End If
              
              TOW_hrs_cyc = Sheets("Front Page").Cells(l, 16)
              If Len(TOW_hrs_cyc) > 50 Then
                    MsgBox ("Front Page : TOW_hrs_cyc  is exceeding field limit.")
                    FrontPage_WriteBack = False
                    Exit Function
                Else
                    TOW_hrs_cyc = Replace(TOW_hrs_cyc, "'", "''")
                End If
              
              Removal_plan_comments = Sheets("Front Page").Cells(l, 17)
              If Len(Removal_plan_comments) > 200 Then
                    MsgBox ("Front Page : Removal_plan_comments  is exceeding field limit.")
                    FrontPage_WriteBack = False
                    Exit Function
                Else
                    Removal_plan_comments = Replace(Removal_plan_comments, "'", "''")
                    Removal_plan_comments = Application.WorksheetFunction.Clean(Replace(Removal_plan_comments, Chr(10), " "))
                End If
             
              
              sqlCmd = " INSERT INTO [dbo].[WB_FP_REM_PLAN_COMNT_T]([ID],[12M_COUNT],[TOW_HRS/CYC],[REMOVAL_PLAN_COMNTS],[TPP_ID],[ENGINE_MODEL],[AIRLINE_SHORT_NAME],[SSO_ID])"
              sqlCmd = sqlCmd & " VALUES('" & HeaderID & "','" & M_count & "','" & TOW_hrs_cyc & "','" & Removal_plan_comments & "','" & TPPID & "','" & Engine_Model & "','" & Airline_SHORT_NAME & "', '" & SSO_ID & "') "
              conn.Execute sqlCmd
              l = l + 1
            
    Loop
    
        sqlCmd = " DELETE FROM WB_FP_STATUS_DESCRIPTION_T WHERE TPP_ID = '" & TPPID & "';"
        conn.Execute sqlCmd
    
        Validation = Sheets("Front Page").Cells(24, 15)
        If Validation <> "" And IsNumeric(Validation) = False Then
            MsgBox ("Fleet Program Data : Validation  is not valid number.")
            FrontPage_WriteBack = False
            Exit Function
        Else
            Validation = Round(Validation)
        End If
        
        Status_description = Sheets("Front Page").Cells(24, 16)
        If Len(Status_description) > 2000 Then
                    MsgBox ("Front Page : Status_description  is exceeding field limit.")
                    FrontPage_WriteBack = False
                    Exit Function
                Else
                    Status_description = Replace(Status_description, "'", "''")
                    Status_description = Application.WorksheetFunction.Clean(Replace(Status_description, Chr(10), " "))
                End If
        
        'sqlCmd = " INSERT INTO [dbo].[WB_FP_STATUS_DESCRIPTION_T]([ID],[VALIDATION],[STATUS_DESCRIPTION],[TPP_ID],[ENGINE_MODEL],[AIRLINE_SHORT_NAME],[SSO_ID])"
        'sqlCmd = sqlCmd & " VALUES('" & HeaderID & "','" & Validation & "','" & Status_description & "','" & TPPID & "','" & Engine_Model & "','" & Airline_SHORT_NAME & "', '" & SSO_ID & "') "
        'conn.Execute sqlCmd
        
        ' =====================================================
        '   Last updated: 03/18/2016
        ' =====================================================
        
        Program_quality = Sheets("Front Page").Cells(26, 9)
        If Program_quality <> "" And IsNumeric(Program_quality) = False Then
            MsgBox ("Front Page : Program_quality  is not valid number.")
            FrontPage_WriteBack = False
            Exit Function
        Else
            Program_quality = Round(Program_quality)
        End If
        
        sqlCmd = " INSERT INTO [dbo].[WB_FP_STATUS_DESCRIPTION_T]([ID],[VALIDATION],[STATUS_DESCRIPTION],[TPP_ID],[ENGINE_MODEL],[AIRLINE_SHORT_NAME],[SSO_ID],[PROGRAM_QUALITY])"
        sqlCmd = sqlCmd & " VALUES('" & HeaderID & "','" & Validation & "','" & Status_description & "','" & TPPID & "','" & Engine_Model & "','" & Airline_SHORT_NAME & "', '" & SSO_ID & "', '" & Program_quality & "') "
        conn.Execute sqlCmd
        
        '1st dynamic table
        Sheets("Supporting Data").Activate
        RC = Sheets("Supporting Data").Cells(Rows.Count, 19).End(xlUp).Row
        If RC > 40 Then
        'LastRow = (Range("S40:Y40").End(xlDown).Address)
        'LastRow = Replace(LastRow, "$", "")
        'LastCell = Replace(LastRow, "S", "")
        'LastCell = Right(LastRow, 2)
        k = 41
    
    sqlCmd = " DELETE FROM WB_FP_PROGRAM_DETAILS WHERE TPP_ID = '" & TPPID & "';"
    conn.Execute sqlCmd
    
    Do Until k > RC
                Program_name1 = Sheets("Supporting Data").Cells(k, 19)
                 If Len(Program_name1) > 300 Then
                    MsgBox ("Front Page : Program_name  is exceeding field limit.")
                    FrontPage_WriteBack = False
                    Exit Function
                Else
                    Program_name1 = Replace(Program_name1, "'", "''")
                    Program_name1 = Application.WorksheetFunction.Clean(Replace(Program_name1, Chr(10), " "))
                End If
                
                Program_status = Sheets("Supporting Data").Cells(k, 20)
                 If Len(Program_status) > 100 Then
                    MsgBox ("Front Page : Program_status  is exceeding field limit.")
                    FrontPage_WriteBack = False
                    Exit Function
                Else
                    Program_status = Replace(Program_status, "'", "''")
                End If
                
                Eng_not_complied = Sheets("Supporting Data").Cells(k, 21)
                 If Len(Eng_not_complied) > 100 Then
                    MsgBox ("Front Page : Eng_not_complied  is exceeding field limit.")
                    FrontPage_WriteBack = False
                    Exit Function
                Else
                    Eng_not_complied = Replace(Eng_not_complied, "'", "''")
                End If
                
                Per_complied = Sheets("Supporting Data").Cells(k, 22)
                 If Len(Per_complied) > 100 Then
                    MsgBox ("Front Page : Per_complied  is exceeding field limit.")
                    FrontPage_WriteBack = False
                    Exit Function
                Else
                    Per_complied = Replace(Per_complied, "'", "''")
                End If
                
                Target_completion = Sheets("Supporting Data").Cells(k, 23)
                 If Len(Target_completion) > 100 Then
                    MsgBox ("Front Page : Target_completion  is exceeding field limit.")
                    FrontPage_WriteBack = False
                    Exit Function
                Else
                    Target_completion = Replace(Target_completion, "'", "''")
                End If
                
                Original_burndown = Sheets("Supporting Data").Cells(k, 24)
                 If Len(Original_burndown) > 100 Then
                    MsgBox ("Front Page : Original_burndown  is exceeding field limit.")
                    FrontPage_WriteBack = False
                    Exit Function
                Else
                    Original_burndown = Replace(Original_burndown, "'", "''")
                End If
                
                Needed_burndown = Sheets("Supporting Data").Cells(k, 25)
                 If Len(Needed_burndown) > 100 Then
                    MsgBox ("Front Page : Needed_burndown  is exceeding field limit.")
                    FrontPage_WriteBack = False
                    Exit Function
                Else
                    Needed_burndown = Replace(Needed_burndown, "'", "''")
                End If
                
              
             
              sqlCmd = " INSERT INTO [dbo].[WB_FP_PROGRAM_DETAILS]([ID],[PROGRAM_NAME1],[PROGRAM_STATUS],[ENG_NOT_COMPLIED],[PER_COMPLIED],[TARGET_COMPLETION],[ORIGINAL_BURNDOWN],[NEEDED_BURNDOWN],[TPP_ID],[ENGINE_MODEL],[AIRLINE_SHORT_NAME],[SSO_ID])"
              sqlCmd = sqlCmd & " VALUES('" & HeaderID & "','" & Program_name1 & "','" & Program_status & "','" & Eng_not_complied & "','" & Per_complied & "','" & Target_completion & "','" & Original_burndown & "','" & Needed_burndown & "','" & TPPID & "','" & Engine_Model & "','" & Airline_SHORT_NAME & "', '" & SSO_ID & "') "
              conn.Execute sqlCmd
              k = k + 1
        Loop
        
      End If
              
        '2nd dynamic table
        Dim LastCell As Double
        
        Sheets("Front Page").Activate
        Set RngFound = Columns("B:D").Find("Top Technical Actions & Projects", Cells(Rows.Count, "B"), xlValues, xlWhole)
            
            If Not IsNull(RngFound) Then
        
            StrFirst = RngFound.Address
            rowNumber = Replace(StrFirst, "$", "")
            rowNumber = Replace(rowNumber, "B", "")
            'rowNumber = Right(StrFirst, 2)
            rowNumber = rowNumber + 1
            
            LastRow = (Range("B" & rowNumber & ":W" & rowNumber & "").End(xlDown).Address)
            LastRow = Replace(LastRow, "$", "")
            LastCell = Replace(LastRow, "B", "")
            i = rowNumber + 1

            If Not IsEmpty(Sheets("Front Page").Cells(i, 2)) Then
            sqlCmd = " DELETE FROM WB_FP_TOP_TECHNICAL_ACTIONS_PR WHERE TPP_ID = '" & TPPID & "';"
            conn.Execute sqlCmd
    
           Do Until i > LastCell
      
             Timing = Sheets("Front Page").Cells(i, 2)
             If Len(Timing) > 100 Then
                    MsgBox ("Front Page : Timing  is exceeding field limit.")
                    FrontPage_WriteBack = False
                    Exit Function
                Else
                    Timing = Replace(Timing, "'", "''")
                End If
                
             VOC = Sheets("Front Page").Cells(i, 3)
             If VOC <> "" And IsNumeric(VOC) = False Then
                    MsgBox ("Front Page : VOC  is not valid number.")
                    FrontPage_WriteBack = False
                    Exit Function
                Else
                    VOC = Round(VOC)
                End If
             
             Desc = Sheets("Front Page").Cells(i, 4)
                If Len(Desc) > 4000 Then
                        MsgBox ("Front Page : Desc  is exceeding field limit.")
                        FrontPage_WriteBack = False
                        Exit Function
                    Else
                        Desc = Replace(Desc, "'", "''")
                        Desc = Application.WorksheetFunction.Clean(Replace(Desc, Chr(10), " "))
                End If
             
             Owner = Sheets("Front Page").Cells(i, 18)
             If Len(Owner) > 300 Then
                    MsgBox ("Front Page : Owner  is exceeding field limit.")
                    FrontPage_WriteBack = False
                    Exit Function
                Else
                    Owner = Replace(Owner, "'", "''")
                End If
             
             Project_type = Sheets("Front Page").Cells(i, 22)
             If Len(Project_type) > 100 Then
                    MsgBox ("Front Page : Project_type  is exceeding field limit.")
                    FrontPage_WriteBack = False
                    Exit Function
                Else
                    Project_type = Replace(Project_type, "'", "''")
                End If
             
              Impact = Sheets("Front Page").Cells(i, 23)
              If Len(Impact) > 100 Then
                    MsgBox ("Front Page : Impact  is exceeding field limit.")
                    FrontPage_WriteBack = False
                    Exit Function
                Else
                    Impact = Replace(Impact, "'", "''")
                End If
            
            
             sqlCmd = " INSERT INTO [dbo].[WB_FP_TOP_TECHNICAL_ACTIONS_PR] ([ID],[TIMING],[VOC],[DESCRIPTION],[OWNER],[PROJECT_TYPE],[IMPACT],[TPP_ID],[ENGINE_MODEL],[AIRLINE_SHORT_NAME],[SSO_ID])"
             sqlCmd = sqlCmd & " VALUES('" & HeaderID & "','" & Timing & "', " & VOC & ",'" & Desc & "','" & Owner & "','" & Project_type & "','" & Impact & "','" & TPPID & "','" & Engine_Model & "','" & Airline_SHORT_NAME & "', '" & SSO_ID & "')"
             conn.Execute sqlCmd
             i = i + 1

        Loop
        End If
       End If
       
        
         '3rd dynamic table
     
        Sheets("Front Page").Activate
        Set RngFound = Columns("B:D").Find("Additional Customer Topics", Cells(Rows.Count, "B"), xlValues, xlWhole)
        
        If Not IsNull(RngFound) Then
        
            StrFirst = RngFound.Address
            rowNumber = Replace(StrFirst, "$", "")
            rowNumber = Replace(rowNumber, "B", "")
            'rowNumber = Right(StrFirst, 2)
            rowNumber = rowNumber + 1
            
            LastRow = (Range("B" & rowNumber & ":V" & rowNumber & "").End(xlDown).Address)
            LastRow = Replace(LastRow, "$", "")
            LastCell = Replace(LastRow, "B", "")
            'LastCell = Right(LastRow, 2)
            k = rowNumber + 1
            
            If Not IsEmpty(Sheets("Front Page").Cells(k, 2)) Then
            'Truncate table
            sqlCmd = " DELETE FROM WB_FP_ADDITIONAL_CUSTOMER_TOPI WHERE TPP_ID = '" & TPPID & "';"
            conn.Execute sqlCmd
            
         
            Do Until k > LastCell
                Timing = Sheets("Front Page").Cells(k, 2)
                If Len(Timing) > 100 Then
                    MsgBox ("Front Page : Timing  is exceeding field limit.")
                    FrontPage_WriteBack = False
                    Exit Function
                Else
                    Timing = Replace(Timing, "'", "''")
                End If
                
                VOC = Sheets("Front Page").Cells(k, 3)
                If VOC <> "" And IsNumeric(VOC) = False Then
                    MsgBox ("Fleet Program Data : VOC  is not valid number.")
                    FrontPage_WriteBack = False
                    Exit Function
                Else
                    VOC = Round(VOC)
                End If
                
                Desc = Sheets("Front Page").Cells(k, 4)
                 If Len(Desc) > 4000 Then
                        MsgBox ("Front Page : Desc  is exceeding field limit.")
                        FrontPage_WriteBack = False
                        Exit Function
                    Else
                        Desc = Replace(Desc, "'", "''")
                        Desc = Application.WorksheetFunction.Clean(Replace(Desc, Chr(10), " "))
                End If
                
                Owner = Sheets("Front Page").Cells(k, 22)
                If Len(Owner) > 300 Then
                    MsgBox ("Front Page : Owner  is exceeding field limit.")
                    FrontPage_WriteBack = False
                    Exit Function
                Else
                    Owner = Replace(Owner, "'", "''")
                    Owner = Application.WorksheetFunction.Clean(Replace(Owner, Chr(10), " "))
                End If
               
                sqlCmd = " INSERT INTO [dbo].[WB_FP_ADDITIONAL_CUSTOMER_TOPI] ([ID],[TIMING],[VOC],[DESCRIPTION],[OWNER],[TPP_ID],[ENGINE_MODEL],[AIRLINE_SHORT_NAME],[SSO_ID])"
                sqlCmd = sqlCmd & " VALUES('" & HeaderID & "','" & Timing & "', '" & VOC & "','" & Desc & "','" & Owner & "','" & TPPID & "','" & Engine_Model & "','" & Airline_SHORT_NAME & "', '" & SSO_ID & "') "
                conn.Execute sqlCmd
                k = k + 1
                'LastRow = (Range("B38:T38").End(xlDown))
            Loop
        End If
        End If
    
    'conn.Close
    'MsgBox ("Comments Saved !")
    Exit Function
    
errorhandler:
    'MsgBox ("Error while publishing data (Front Page)" & ":  " & Err.Description)
    'CloseSQLConnection
    ErrorFlag = True
    ErrorDesc = ErrorDesc & "Front Page - " & Err.Description & vbNewLine
End Function

Function ExposureStatus_WriteBack(HeaderID As String, TPPID As Integer, Engine_Model As String, Airline_SHORT_NAME As String, SSO_ID As String) As Boolean

      On Error GoTo errorhandler:
      
      Dim sqlCmd As String
      
      ExposureStatus_WriteBack = True
      
      sqlCmd = " DELETE FROM WB_EXPOSURE_STATUS_T WHERE TPP_ID = '" & TPPID & "';"
      conn.Execute sqlCmd


      Ifsd_count = Sheets("Exposure Status").Cells(7, 2)
      If Ifsd_count <> "" And IsNumeric(Ifsd_count) = False Then
          MsgBox ("Exposure Status : Ifsd_count  is not valid number.")
          ExposureStatus_WriteBack = False
          Exit Function
      
       End If
      
      Toa_count = Sheets("Exposure Status").Cells(7, 3)
      If Toa_count <> "" And IsNumeric(Toa_count) = False Then
              MsgBox ("Exposure Status : Toa_count  is not valid number.")
              ExposureStatus_WriteBack = False
              Exit Function
          
          End If
      
      Int_count = Sheets("Exposure Status").Cells(7, 4)
          If Int_count <> "" And IsNumeric(Int_count) = False Then
              MsgBox ("Exposure Status : Int_count  is not valid number.")
              ExposureStatus_WriteBack = False
              Exit Function
          
          End If
      
      Se_count = Sheets("Exposure Status").Cells(7, 5)
          If Se_count <> "" And IsNumeric(Se_count) = False Then
              MsgBox ("Exposure Status : Se_count  is not valid number.")
              ExposureStatus_WriteBack = False
              Exit Function
          
          End If
      
      Uer_count = Sheets("Exposure Status").Cells(7, 6)
          If Uer_count <> "" And IsNumeric(Uer_count) = False Then
              MsgBox ("Exposure Status : Uer_count  is not valid number.")
              ExposureStatus_WriteBack = False
              Exit Function
          
          End If
      
      Deprel_count = Sheets("Exposure Status").Cells(7, 7)
          If Deprel_count <> "" And IsNumeric(Deprel_count) = False Then
              MsgBox ("Exposure Status : Deprel_count  is not valid number.")
              ExposureStatus_WriteBack = False
              Exit Function
          
          End If
      
    sqlCmd = " INSERT INTO [dbo].[WB_EXPOSURE_STATUS_T]([ID],[IFSD_COUNT],[TOA_COUNT],[INT_COUNT],[SE_COUNT],[UER_COUNT],[DEPREL_COUNT],[TPP_ID],[ENGINE_MODEL],[AIRLINE_SHORT_NAME],[SSO_ID])"
    sqlCmd = sqlCmd & " VALUES('" & HeaderID & "','" & Ifsd_count & "','" & Toa_count & "','" & Int_count & "','" & Se_count & "','" & Uer_count & "','" & Deprel_count & "','" & TPPID & "','" & Engine_Model & "','" & Airline_SHORT_NAME & "', '" & SSO_ID & "') "
    conn.Execute sqlCmd
              

    Exit Function
    
errorhandler:

     ErrorFlag = True
     ErrorDesc = ErrorDesc & "Exposure Status - " & Err.Description & vbNewLine
     
End Function

Function FPplotData_WriteBack(HeaderID As String, TPPID As Integer, Engine_Model As String, Airline_SHORT_NAME As String, SSO_ID As String) As Boolean

On Error GoTo errorhandler:
    Dim sqlCmd As String

    S1 = "FPplotData"

    FPplotData_WriteBack = True
    Dim i As Integer
    
    Sheets(S1).Activate
    
    RC = Sheets(S1).Cells(Rows.Count, 1).End(xlUp).Row
        If RC > 1 Then
 
    i = 2

    'Truncate table
    sqlCmd = " DELETE FROM  WB_FPPLOTDATA_T WHERE TPP_ID = '" & TPPID & "';"
    conn.Execute sqlCmd

    Do Until i > RC
            
        PROGRAM = Sheets(S1).Cells(i, 1)
        If Len(PROGRAM) > 500 Then
            MsgBox ("FP Plot Data : PROGRAM  is exceeding field limit.")
            FPplotData_WriteBack = False
            Exit Function
        Else
            PROGRAM = Replace(PROGRAM, "'", "''")
            PROGRAM = Application.WorksheetFunction.Clean(Replace(PROGRAM, Chr(10), " "))
        End If

        TOTAL_IMPACTED = Sheets(S1).Cells(i, 2)
        If Len(TOTAL_IMPACTED) > 100 Then
            MsgBox ("FP Plot Data : TOTAL_IMPACTED  is exceeding field limit.")
            FPplotData_WriteBack = False
            Exit Function
        Else
            TOTAL_IMPACTED = Replace(TOTAL_IMPACTED, "'", "''")
        End If
        
        COMPLIED = Sheets(S1).Cells(i, 3)
        If Len(COMPLIED) > 100 Then
            MsgBox ("FP Plot Data : COMPLIED  is exceeding field limit.")
            FPplotData_WriteBack = False
            Exit Function
        Else
            COMPLIED = Replace(COMPLIED, "'", "''")
        End If
        
        NON_COMPLIED = Sheets(S1).Cells(i, 4)
        If Len(NON_COMPLIED) > 100 Then
            MsgBox ("FP Plot Data : NON_COMPLIED  is exceeding field limit.")
            FPplotData_WriteBack = False
            Exit Function
        Else
            NON_COMPLIED = Replace(NON_COMPLIED, "'", "''")
        End If
        
        PROGRAM_NAME = Sheets(S1).Cells(i, 7)
        If Len(PROGRAM_NAME) > 500 Then
            MsgBox ("FP Plot Data : PROGRAM_NAME  is exceeding field limit.")
            FPplotData_WriteBack = False
            Exit Function
        Else
            PROGRAM_NAME = Replace(PROGRAM_NAME, "'", "''")
            PROGRAM_NAME = Application.WorksheetFunction.Clean(Replace(PROGRAM_NAME, Chr(10), " "))
        End If
        
        INITIAL_THRESHOLD_AND_NOT_INSPECTED = Sheets(S1).Cells(i, 8)
        If Len(INITIAL_THRESHOLD_AND_NOT_INSPECTED) > 100 Then
            MsgBox ("FP Plot Data : INITIAL_THRESHOLD_AND_NOT_INSPECTED  is exceeding field limit.")
            FPplotData_WriteBack = False
            Exit Function
        Else
            INITIAL_THRESHOLD_AND_NOT_INSPECTED = Replace(INITIAL_THRESHOLD_AND_NOT_INSPECTED, "'", "''")
        End If
        
        INSPECTED_AND_REPEAT_THRESHOLD = Sheets(S1).Cells(i, 9)
        If Len(INSPECTED_AND_REPEAT_THRESHOLD) > 100 Then
            MsgBox ("FP Plot Data : INSPECTED_AND_REPEAT_THRESHOLD  is exceeding field limit.")
            FPplotData_WriteBack = False
            Exit Function
        Else
            INSPECTED_AND_REPEAT_THRESHOLD = Replace(INSPECTED_AND_REPEAT_THRESHOLD, "'", "''")
        End If
        
        NOT_INSPECTED_AND_BEYOND_INITIAL_THRESHOLD = Sheets(S1).Cells(i, 10)
        If Len(NOT_INSPECTED_AND_BEYOND_INITIAL_THRESHOLD) > 100 Then
            MsgBox ("FP Plot Data : NOT_INSPECTED_AND_BEYOND_INITIAL_THRESHOLD  is exceeding field limit.")
            FPplotData_WriteBack = False
            Exit Function
        Else
            NOT_INSPECTED_AND_BEYOND_INITIAL_THRESHOLD = Replace(NOT_INSPECTED_AND_BEYOND_INITIAL_THRESHOLD, "'", "''")
        End If
        
        INSPECTED_AND_BEYOND_REPEAT_THRESHOLD = Sheets(S1).Cells(i, 11)
        If Len(INSPECTED_AND_BEYOND_REPEAT_THRESHOLD) > 100 Then
            MsgBox ("FP Plot Data : INSPECTED_AND_BEYOND_REPEAT_THRESHOLD  is exceeding field limit.")
            FPplotData_WriteBack = False
            Exit Function
        Else
            INSPECTED_AND_BEYOND_REPEAT_THRESHOLD = Replace(INSPECTED_AND_BEYOND_REPEAT_THRESHOLD, "'", "''")
        End If
        
        sqlCmd = " INSERT INTO [dbo].[WB_FPPLOTDATA_T] ([ID],[PROGRAM],[TOTAL_IMPACTED],[COMPLIED],[NON_COMPLIED],[PROGRAM_NAME],[INITIAL_THRESHOLD_AND_NOT_INSPECTED] ,[INSPECTED_AND_REPEAT_THRESHOLD]           ,[NOT_INSPECTED_AND_BEYOND_INITIAL_THRESHOLD]           ,[INSPECTED_AND_BEYOND_REPEAT_THRESHOLD]           ,[TPP_ID]           ,[ENGINE_MODEL]           ,[AIRLINE_SHORT_NAME],[SSO_ID])"
        sqlCmd = sqlCmd & " VALUES('" & HeaderID & "','" & PROGRAM & "','" & TOTAL_IMPACTED & "','" & COMPLIED & "','" & NON_COMPLIED & "','" & PROGRAM_NAME & "', '" & INITIAL_THRESHOLD_AND_NOT_INSPECTED & "','" & INSPECTED_AND_REPEAT_THRESHOLD & "','" & NOT_INSPECTED_AND_BEYOND_INITIAL_THRESHOLD & "','" & INSPECTED_AND_BEYOND_REPEAT_THRESHOLD & "','" & TPPID & "','" & Engine_Model & "','" & Airline_SHORT_NAME & "', '" & SSO_ID & "') "
        conn.Execute sqlCmd
        i = i + 1

     Loop
    
    End If
    Exit Function
    
errorhandler:

   ErrorFlag = True
   ErrorDesc = ErrorDesc & "FP Plot Data - " & Err.Description & vbNewLine
End Function

Function MaintenanceBurden_WriteBack(HeaderID As String, TPPID As Integer, Engine_Model As String, Airline_SHORT_NAME As String, SSO_ID As String) As Boolean

    ' ================================
    ' Last updated: 10/19/2020
    '=================================

    On Error GoTo errorhandler:
    
    Dim sqlCmd As String

    S1 = "Maintenance Burden"
    Dim i As Integer
    
    MaintenanceBurden_WriteBack = True
     
    CC = Sheets(S1).Cells(12, Columns.Count).End(xlToLeft).Column
    If CC > 4 Then
    
        MBdata = Sheets(S1).Range(Sheets(S1).Cells(12, 4), Sheets(S1).Cells(16, CC)).Value
        
        'Truncate table
        sqlCmd = " DELETE FROM WB_MAINTENANCE_BURDEN_T WHERE TPP_ID = '" & TPPID & "';"
        conn.Execute sqlCmd
        
        ' Get new last cell for new transpose location
    
        For i = 4 To CC
                
            PROGRAM_DRIVERS = MBdata(1, i - 3)
            If Len(PROGRAM_DRIVERS) > 500 Then
                MsgBox ("Maintenance burden : PROGRAM_DRIVERS  is exceeding field limit.")
                MaintenanceBurden_WriteBack = False
                Exit Function
            Else
                PROGRAM_DRIVERS = Replace(PROGRAM_DRIVERS, "'", "''")
                PROGRAM_DRIVERS = Application.WorksheetFunction.Clean(Replace(PROGRAM_DRIVERS, Chr(10), " "))
            End If
    
            Total_Fly_Eng_Affected = MBdata(2, i - 3)
            If Len(Total_Fly_Eng_Affected) > 100 Then
                MsgBox ("Maintenance burden : Total_Fly_Eng_Affected  is exceeding field limit.")
                MaintenanceBurden_WriteBack = False
                Exit Function
            Else
                Total_Fly_Eng_Affected = Replace(Total_Fly_Eng_Affected, "'", "''")
            End If
            
            Next_12M_ENG_Impacted = MBdata(3, i - 3)
            If Len(Next_12M_ENG_Impacted) > 100 Then
                MsgBox ("Maintenance burden : Next_12M_ENG_Impacted  is exceeding field limit.")
                MaintenanceBurden_WriteBack = False
                Exit Function
            Else
                Next_12M_ENG_Impacted = Replace(Next_12M_ENG_Impacted, "'", "''")
            End If
            
            Next_12M_Totl_Lab_Hrs = MBdata(4, i - 3)
            If Len(Next_12M_Totl_Lab_Hrs) > 100 Then
                MsgBox ("Maintenance burden : Next_12M_Totl_Lab_Hrs  is exceeding field limit.")
                MaintenanceBurden_WriteBack = False
                Exit Function
            Else
                Next_12M_Totl_Lab_Hrs = Replace(Next_12M_Totl_Lab_Hrs, "'", "''")
            End If
            
            Per_Al_Nxt_12M_Tot_Lab_Hrs = MBdata(5, i - 3)
            If Len(Per_Al_Nxt_12M_Tot_Lab_Hrs) > 100 Then
                MsgBox ("Maintenance burden : Per_Al_Nxt_12M_Tot_Lab_Hrs  is exceeding field limit.")
                MaintenanceBurden_WriteBack = False
                Exit Function
            Else
                Per_Al_Nxt_12M_Tot_Lab_Hrs = Replace(Per_Al_Nxt_12M_Tot_Lab_Hrs, "'", "''")
            End If
            
            
            sqlCmd = " INSERT INTO [dbo].[WB_MAINTENANCE_BURDEN_T] ([ID],[PROGRAM_DRIVERS],[Total_Fly_Eng_Affected],[Next_12M_ENG_Impacted],[Next_12M_Totl_Lab_Hrs],[Per_Al_Nxt_12M_Tot_Lab_Hrs] ,[TPP_ID] ,[ENGINE_MODEL]           ,[AIRLINE_SHORT_NAME],[SSO_ID])"
            sqlCmd = sqlCmd & " VALUES('" & HeaderID & "','" & PROGRAM_DRIVERS & "','" & Total_Fly_Eng_Affected & "','" & Next_12M_ENG_Impacted & "','" & Next_12M_Totl_Lab_Hrs & "','" & Per_Al_Nxt_12M_Tot_Lab_Hrs & "','" & TPPID & "','" & Engine_Model & "','" & Airline_SHORT_NAME & "', '" & SSO_ID & "') "
            conn.Execute sqlCmd
            
         Next i
         Erase MBdata
         
     End If
     
     Exit Function
    
errorhandler:

    ErrorFlag = True
    ErrorDesc = ErrorDesc & "Maintenance Burden - " & Err.Description & vbNewLine
End Function

Function MBICalculations_WriteBack(HeaderID As String, TPPID As Integer, Engine_Model As String, Airline_SHORT_NAME As String, SSO_ID As String) As Boolean

    ' ================================
    ' Last updated: 10/23/2020
    '=================================

On Error GoTo errorhandler:
    Dim sqlCmd As String
    ReadConnectionXML
    OpenSQLConnection

    S1 = "MBIcalculations"
    Dim i As Integer
    
    MBICalculations_WriteBack = True
    
    Sheets(S1).Activate
    
    ' Summary write back
    '-----------------------------------------------------------------------------------------------
    
    RC = Sheets(S1).Cells(Rows.Count, 1).End(xlUp).Row
    If RC > 1 Then

        i = 1
        
        ProgPublish = Sheets(S1).Range(Sheets(S1).Cells(1, 1), Sheets(S1).Cells(RC, 14)).Value

        'Truncate table
        sqlCmd = " DELETE FROM  WB_MBI_CALCULATIONS_T WHERE TPP_ID = '" & TPPID & "';"
        conn.Execute sqlCmd

        Do Until i > RC
                
            If i = 1 Then
                PROGRAM_TYPE = "Date"
            Else
                PROGRAM_TYPE = ProgPublish(i, 1)
            End If
            If Len(PROGRAM_TYPE) > 300 Then
                MsgBox ("MBI Calculations : PROGRAM_TYPE  is exceeding field limit.")
                MBICalculations_WriteBack = False
                Exit Function
            Else
                PROGRAM_TYPE = Replace(PROGRAM_TYPE, "'", "''")
            End If
            
            MONTH1 = ProgPublish(i, 2)
            If Len(MONTH1) > 100 Then
                MsgBox ("MBI Calculations : MONTH  is exceeding field limit.")
                MBICalculations_WriteBack = False
                Exit Function
            Else
                MONTH1 = Replace(MONTH1, "'", "''")
            End If
    
            MONTH2 = ProgPublish(i, 3)
            If Len(MONTH2) > 100 Then
                MsgBox ("MBI Calculations : MONTH  is exceeding field limit.")
                MBICalculations_WriteBack = False
                Exit Function
            Else
                MONTH2 = Replace(MONTH2, "'", "''")
            End If
            
            MONTH3 = ProgPublish(i, 4)
            If Len(MONTH3) > 100 Then
                MsgBox ("MBI Calculations : MONTH  is exceeding field limit.")
                MBICalculations_WriteBack = False
                Exit Function
            Else
                MONTH3 = Replace(MONTH3, "'", "''")
            End If
            
            MONTH4 = ProgPublish(i, 5)
            If Len(MONTH4) > 100 Then
                MsgBox ("MBI Calculations : MONTH  is exceeding field limit.")
                MBICalculations_WriteBack = False
                Exit Function
            Else
                MONTH4 = Replace(MONTH4, "'", "''")
            End If
            
            MONTH5 = ProgPublish(i, 6)
            If Len(MONTH5) > 100 Then
                MsgBox ("MBI Calculations : MONTH  is exceeding field limit.")
                MBICalculations_WriteBack = False
                Exit Function
            Else
                MONTH5 = Replace(MONTH5, "'", "''")
            End If
            
            MONTH6 = ProgPublish(i, 7)
            If Len(MONTH6) > 100 Then
                MsgBox ("MBI Calculations : MONTH  is exceeding field limit.")
                MBICalculations_WriteBack = False
                Exit Function
            Else
                MONTH6 = Replace(MONTH6, "'", "''")
            End If
            
            MONTH7 = ProgPublish(i, 8)
            If Len(MONTH7) > 100 Then
                MsgBox ("MBI Calculations : MONTH  is exceeding field limit.")
                MBICalculations_WriteBack = False
                Exit Function
            Else
                MONTH7 = Replace(MONTH7, "'", "''")
            End If
            
            MONTH8 = ProgPublish(i, 9)
            If Len(MONTH8) > 100 Then
                MsgBox ("MBI Calculations : MONTH  is exceeding field limit.")
                MBICalculations_WriteBack = False
                Exit Function
            Else
                MONTH8 = Replace(MONTH8, "'", "''")
            End If
            
            MONTH9 = ProgPublish(i, 10)
            If Len(MONTH9) > 100 Then
                MsgBox ("MBI Calculations : MONTH  is exceeding field limit.")
                MBICalculations_WriteBack = False
                Exit Function
            Else
                MONTH9 = Replace(MONTH9, "'", "''")
            End If
            
            MONTH10 = ProgPublish(i, 11)
            If Len(MONTH10) > 100 Then
                MsgBox ("MBI Calculations : MONTH  is exceeding field limit.")
                MBICalculations_WriteBack = False
                Exit Function
            Else
                MONTH10 = Replace(MONTH10, "'", "''")
            End If
            
            MONTH11 = ProgPublish(i, 12)
            If Len(MONTH11) > 100 Then
                MsgBox ("MBI Calculations : MONTH  is exceeding field limit.")
                MBICalculations_WriteBack = False
                Exit Function
            Else
                MONTH11 = Replace(MONTH11, "'", "''")
            End If
            
            MONTH12 = ProgPublish(i, 13)
            If Len(MONTH12) > 100 Then
                MsgBox ("MBI Calculations : MONTH  is exceeding field limit.")
                MBICalculations_WriteBack = False
                Exit Function
            Else
                MONTH12 = Replace(MONTH12, "'", "''")
            End If
            
            MONTH13 = ProgPublish(i, 14)
            If Len(MONTH13) > 100 Then
                MsgBox ("MBI Calculations : MONTH  is exceeding field limit.")
                MBICalculations_WriteBack = False
                Exit Function
            Else
                MONTH13 = Replace(MONTH13, "'", "''")
            End If
    
            sqlCmd = " INSERT INTO [dbo].[WB_MBI_CALCULATIONS_T] ([ID],[PROGRAM_TYPE],[MONTH1],[MONTH2],[MONTH3],[MONTH4],[MONTH5] ,[MONTH6],[MONTH7],[MONTH8] ,[MONTH9],[MONTH10],[MONTH11],[MONTH12] ,[MONTH13]  ,[TPP_ID] ,[ENGINE_MODEL]           ,[AIRLINE_SHORT_NAME],[SSO_ID])"
            sqlCmd = sqlCmd & " VALUES('" & HeaderID & "','" & PROGRAM_TYPE & "','" & MONTH1 & "','" & MONTH2 & "','" & MONTH3 & "','" & MONTH4 & "', '" & MONTH5 & "','" & MONTH6 & "','" & MONTH7 & "','" & MONTH8 & "','" & MONTH9 & "','" & MONTH10 & "','" & MONTH11 & "','" & MONTH12 & "','" & MONTH13 & "','" & TPPID & "','" & Engine_Model & "','" & Airline_SHORT_NAME & "', '" & SSO_ID & "') "
            conn.Execute sqlCmd
            i = i + 1

        Loop
        Erase ProgPublish
        
        ' MPD by ESN write back
        '-----------------------------------------------------------------------------------------------
        
        FlattenData = MBsummarizer()
        If FlattenData(0) <> -1 Then
            Scol = FlattenData(0)
            RC2 = FlattenData(1)
            RowNum = FlattenData(2)
            
            MBpublish = Sheets(S1).Range(Sheets(S1).Cells(1, Scol), Sheets(S1).Cells(RC2, Scol + 2)).Value
            
            sqlCmd = " DELETE FROM  WB_MPD_BY_ESN WHERE TPP_ID = '" & TPPID & "';"
            conn.Execute sqlCmd
            
            j = 1
            Do Until j > RowNum
                ESN = MBpublish(j, 1)
                If Len(ESN) > 100 Then
                    MsgBox ("MBI Calculations : ESN  is exceeding field limit.")
                    MBICalculations_WriteBack = False
                    Exit Function
                Else
                    ESN = Replace(ESN, "'", "''")
                End If
                
                PROGRAM = MBpublish(j, 2)
                If Len(PROGRAM) > 300 Then
                    MsgBox ("MBI Calculations : PROGRAM  is exceeding field limit.")
                    MBICalculations_WriteBack = False
                    Exit Function
                Else
                    PROGRAM = Replace(PROGRAM, "'", "''")
                End If
                
                M_BURDEN = MBpublish(j, 3)
                If Len(M_BURDEN) > 100 Then
                    MsgBox ("MBI Calculations : M_BURDEN  is exceeding field limit.")
                    MBICalculations_WriteBack = False
                    Exit Function
                Else
                    M_BURDEN = Replace(M_BURDEN, "'", "''")
                End If
                
                sqlCmd = " INSERT INTO [dbo].[WB_MPD_BY_ESN] ([ID],[TPP_ID],[ENGINE_MODEL],[AIRLINE_SHORT_NAME],[SSO_ID],[ESN],[PROGRAM],[12M_BURDEN])"
                sqlCmd = sqlCmd & " VALUES('" & HeaderID & "','" & TPPID & "','" & Engine_Model & "','" & Airline_SHORT_NAME & "','" & SSO_ID & "','" & ESN & "', '" & PROGRAM & "','" & M_BURDEN & "') "
                                    
                conn.Execute sqlCmd
                j = j + 1
                
            Loop
            
            Sheets(S1).Range(Sheets(S1).Cells(1, Scol), Sheets(S1).Cells(RC2, Scol + 2)).Clear
            Erase MBpublish
        Else
            MsgBox "Unable to publish MPD by ESN table"
        End If

    End If
    Exit Function

errorhandler:

    ErrorFlag = True
    ErrorDesc = ErrorDesc & "MBI Calculations - " & Err.Description & vbNewLine
    
End Function


Function FSECustomerContacts_WriteBack(HeaderID As String, TPPID As Integer, Engine_Model As String, Airline_SHORT_NAME As String, SSO_ID As String) As Boolean

    ' ================================
    ' Last updated: 11/11/2016
    ' Code by: TCS & Asko Soimakallio
    '=================================
    
    On Error GoTo errorhandler:
    Dim sqlCmd As String

    S1 = "FSE Customer Contacts"

    Dim i As Integer
    FSECustomerContacts_WriteBack = True
    Sheets(S1).Activate
    
    RC = Sheets(S1).Cells(Rows.Count, 2).End(xlUp).Row
    CC = 9
    'Truncate table
    sqlCmd = " DELETE FROM  WB_CUSTOMER_CONTACTS_T WHERE TPP_ID = '" & TPPID & "';"
    conn.Execute sqlCmd
    
    If RC > 5 Then
        Dim ConWB
        ConWB = Sheets(S1).Range(Sheets(S1).Cells(1, 1), Sheets(S1).Cells(RC, CC)).Value

        i = 6
    
        Do Until i > RC
            
            Name = ConWB(i, 2)
            If Len(Name) > 300 Then
                MsgBox ("FSE Customer Contacts : NAME  is exceeding field limit.")
                FSECustomerContacts_WriteBack = False
                Exit Function
            Else
                Name = Replace(Name, "'", "''")
                Name = Application.WorksheetFunction.Clean(Replace(Name, Chr(10), " "))
            End If
    
            DEPARTMENT = ConWB(i, 3)
            If Len(DEPARTMENT) > 300 Then
                MsgBox ("FSE Customer Contacts : DEPARTMENT  is exceeding field limit.")
                FSECustomerContacts_WriteBack = False
                Exit Function
            Else
                DEPARTMENT = Replace(DEPARTMENT, "'", "''")
                DEPARTMENT = Application.WorksheetFunction.Clean(Replace(DEPARTMENT, Chr(10), " "))
            End If
            
            ROLE = ConWB(i, 4)
            If Len(ROLE) > 300 Then
                MsgBox ("FSE Customer Contacts : ROLE  is exceeding field limit.")
                FSECustomerContacts_WriteBack = False
                Exit Function
            Else
                ROLE = Replace(ROLE, "'", "''")
                ROLE = Application.WorksheetFunction.Clean(Replace(ROLE, Chr(10), " "))
            End If
            
            PHONE = ConWB(i, 5)
            If Len(PHONE) > 100 Then
                MsgBox ("FSE Customer Contacts : PHONE  is exceeding field limit.")
                FSECustomerContacts_WriteBack = False
                Exit Function
            Else
                PHONE = Replace(PHONE, "'", "''")
                PHONE = Application.WorksheetFunction.Clean(Replace(PHONE, Chr(10), " "))
            End If
            
            EMAIL = ConWB(i, 6)
            If Len(EMAIL) > 100 Then
                MsgBox ("FSE Customer Contacts : EMAIL  is exceeding field limit.")
                FSECustomerContacts_WriteBack = False
                Exit Function
            Else
                EMAIL = Replace(EMAIL, "'", "''")
                EMAIL = Application.WorksheetFunction.Clean(Replace(EMAIL, Chr(10), " "))
            End If
            
            GE_PROMOTER = ConWB(i, 7)
            If Len(GE_PROMOTER) > 100 Then
                MsgBox ("FSE Customer Contacts : GE_PROMOTER  is exceeding field limit.")
                FSECustomerContacts_WriteBack = False
                Exit Function
            Else
                GE_PROMOTER = Replace(GE_PROMOTER, "'", "''")
            End If
            
            NEGOTIATION_STYLE = ConWB(i, 8)
            If Len(NEGOTIATION_STYLE) > 100 Then
                MsgBox ("FSE Customer Contacts : NEGOTIATION_STYLE  is exceeding field limit.")
                FSECustomerContacts_WriteBack = False
                Exit Function
            Else
                NEGOTIATION_STYLE = Replace(NEGOTIATION_STYLE, "'", "''")
            End If
            
            CONTACT_FREQUENCY = ConWB(i, 9)
            If Len(CONTACT_FREQUENCY) > 100 Then
                MsgBox ("FSE Customer Contacts : CONTACT_FREQUENCY  is exceeding field limit.")
                FSECustomerContacts_WriteBack = False
                Exit Function
            Else
                CONTACT_FREQUENCY = Replace(CONTACT_FREQUENCY, "'", "''")
            End If
           
            sqlCmd = " INSERT INTO [dbo].[WB_CUSTOMER_CONTACTS_T]([ID],[NAME],[DEPARTMENT] ,[ROLE] ,[PHONE] ,[EMAIL],[GE_PROMOTER],[NEGOTIATION_STYLE],[CONTACT_FREQUENCY]  ,[TPP_ID],[ENGINE_MODEL],[AIRLINE_SHORT_NAME],[SSO_ID])"
            sqlCmd = sqlCmd & " VALUES( '" & HeaderID & "','" & Name & "','" & DEPARTMENT & "','" & ROLE & "','" & PHONE & "','" & EMAIL & "','" & GE_PROMOTER & "','" & NEGOTIATION_STYLE & "','" & CONTACT_FREQUENCY & "','" & TPPID & "','" & Engine_Model & "','" & Airline_SHORT_NAME & "', '" & SSO_ID & "') "
            conn.Execute sqlCmd
            
            i = i + 1
            
        Loop
            
        Erase ConWB
        
    End If
    Exit Function
    
errorhandler:

    ErrorFlag = True
    ErrorDesc = ErrorDesc & "Customer Contacts - " & Err.Description & vbNewLine
    
End Function

Function SpareStatus_WriteBack(HeaderID As String, TPPID As Integer, Engine_Model As String, Airline_SHORT_NAME As String, SSO_ID As String) As Boolean

    ' ================================
    ' Last updated: 11/02/2016
    ' Code by: TCS & Asko Soimakallio
    '=================================
    
    On Error GoTo errorhandler:
    
    Dim sqlCmd As String
    Dim i As Integer
    
    Dim LastRow As String
    Dim LastCell As String
    
    S1 = "Spare Status"
    
    SpareStatus_WriteBack = True
    Sheets("Spare Status").Activate
    RC = Sheets("Spare Status").Cells(Rows.Count, 1).End(xlUp).Row
    CC = 4
    
    sqlCmd = " DELETE FROM  WB_SPARE_STATUS_T WHERE TPP_ID = '" & TPPID & "';"
    conn.Execute sqlCmd
    
    If RC > 1 Then

        i = 2
        Dim SPwb
        SPwb = Sheets(S1).Range(Sheets(S1).Cells(1, 1), Sheets(S1).Cells(RC, CC)).Value
        
        Do Until i > RC
            Spare_date = SPwb(i, 1)
            If Spare_date <> "" And IsDate(Spare_date) = False Then
                 MsgBox ("Spare Status : Spare_date  is not valid.")
                 SpareStatus_WriteBack = False
                 Exit Function
            End If
           
            Spare_count = SPwb(i, 2)
            If Spare_count <> "" And IsNumeric(Spare_count) = False Then
                 MsgBox ("Spare Status : Spare_count  is not valid number.")
                 SpareStatus_WriteBack = False
                 Exit Function
            Else
                 Spare_count = Round(Spare_count)
            End If
            
            With_uer = SPwb(i, 3)
            If With_uer <> "" And IsNumeric(With_uer) = False Then
                 MsgBox ("Spare Status : With_uer  is not valid number number.")
                 SpareStatus_WriteBack = False
                 Exit Function
             Else
                 With_uer = Round(With_uer)
             End If
           
            Full_spares = SPwb(i, 4)
            If Full_spares <> "" And IsNumeric(Full_spares) = False Then
                MsgBox ("Spare Status : Full_spares  is not valid number.")
                SpareStatus_WriteBack = False
                Exit Function
            Else
                Full_spares = Round(Full_spares)
            End If
    
            sqlCmd = " INSERT INTO [dbo].[WB_SPARE_STATUS_T]([ID],[SPARE_DATE],[SPARE_COUNT],[WITH_UER],[FULL_SPARES],[TPP_ID],[ENGINE_MODEL],[AIRLINE_SHORT_NAME],[SSO_ID])"
            sqlCmd = sqlCmd & " VALUES('" & HeaderID & "','" & Spare_date & "','" & Spare_count & "','" & With_uer & "','" & Full_spares & "','" & TPPID & "','" & Engine_Model & "','" & Airline_SHORT_NAME & "', '" & SSO_ID & "') "
            conn.Execute sqlCmd
            i = i + 1
             
        Loop
        
        Erase SPwb
    End If
    Exit Function
    
errorhandler:

    ErrorFlag = True
    ErrorDesc = ErrorDesc & "Spare Status - " & Err.Description & vbNewLine

End Function

Function DerateData_WriteBack(HeaderID As String, TPPID As Integer, Engine_Model As String, Airline_SHORT_NAME As String, SSO_ID As String) As Boolean

    ' ================================
    ' Last updated: 11/02/2016
    ' Code by: TCS & Asko Soimakallio
    '=================================
    
    On Error GoTo errorhandler:
    Dim sqlCmd As String
    
    S1 = "Derate Data"
    DerateData_WriteBack = True
    
    Sheets(S1).Activate
    RC = Sheets(S1).Cells(Rows.Count, 1).End(xlUp).Row
    CC = 3
    
    sqlCmd = " DELETE FROM  WB_DERATE_DATA_T WHERE TPP_ID = '" & TPPID & "';"
    conn.Execute sqlCmd
    
    If RC > 1 Then
        Dim DRwb
        DRwb = Sheets(S1).Range(Sheets(S1).Cells(1, 1), Sheets(S1).Cells(RC, CC)).Value
        
        i = 2

        Do Until i > RC
           Dept_station = DRwb(i, 1)
           If Len(Dept_station) > 100 Then
                 MsgBox ("Derate Data : Dept_station  is exceeding field limit.")
                 DerateData_WriteBack = False
                 Exit Function
             Else
                 Dept_station = Replace(Dept_station, "'", "''")
             End If

           Takeoff_derate = DRwb(i, 2)
           If Takeoff_derate <> "" And IsNumeric(Takeoff_derate) = False Then
             MsgBox ("Derate Data : Takeoff_derate  is not valid number.")
             DerateData_WriteBack = False
             Exit Function
           End If
           
           Climb_derate = DRwb(i, 3)
           If Climb_derate <> "" And IsNumeric(Climb_derate) = False Then
             MsgBox ("Derate Data : Climb_derate  is not valid number.")
             DerateData_WriteBack = False
             Exit Function
           End If
    
           sqlCmd = " INSERT INTO [dbo].[WB_DERATE_DATA_T]([ID],[DEPARTURE_STATION],[TAKEOFF_DERATE],[CLIMB_DERATE],[TPP_ID],[ENGINE_MODEL],[AIRLINE_SHORT_NAME],[SSO_ID])"
           sqlCmd = sqlCmd & " VALUES('" & HeaderID & "','" & Dept_station & "','" & Takeoff_derate & "','" & Climb_derate & "','" & TPPID & "','" & Engine_Model & "','" & Airline_SHORT_NAME & "', '" & SSO_ID & "') "
           conn.Execute sqlCmd
           i = i + 1
                 
        Loop
        
        Erase DRwb
    End If
    Exit Function
    
errorhandler:

    ErrorFlag = True
    ErrorDesc = ErrorDesc & "Derate Data - " & Err.Description & vbNewLine
    
End Function

Function MpdData_WriteBack(HeaderID As String, TPPID As Integer, Engine_Model As String, Airline_SHORT_NAME As String, SSO_ID As String) As Boolean

    ' ================================
    ' Last updated: 11/02/2016
    ' Code by: TCS & Asko Soimakallio
    '=================================

    On Error GoTo errorhandler:
    Dim sqlCmd As String

    MpdData_WriteBack = True

    Sheets("MPD Data").Activate
    RC = Sheets("MPD Data").Cells(Rows.Count, 1).End(xlUp).Row
    CC = 8
    
    S1 = "MPD Data"
    
    sqlCmd = " DELETE FROM WB_MPD_DATA_T WHERE TPP_ID = '" & TPPID & "';"
    conn.Execute sqlCmd
    
    If RC > 10 Then

        i = 11
        Dim MPDwb
        MPDwb = Sheets(S1).Range(Sheets(S1).Cells(1, 1), Sheets(S1).Cells(RC, CC)).Value
    
        Do Until i > RC
           Desc = MPDwb(i, 1)
           If Len(Desc) > 500 Then
                 MsgBox ("MPD Data : Desc  is exceeding field limit.")
                 MpdData_WriteBack = False
                 Exit Function
             Else
                 Desc = Replace(Desc, "'", "''")
                 Desc = Application.WorksheetFunction.Clean(Replace(Desc, Chr(10), " "))
             End If
           
           ENGINE_SERIES = MPDwb(i, 2)
           If Len(ENGINE_SERIES) > 100 Then
                 MsgBox ("MPD Data : ENGINE_SERIES  is exceeding field limit.")
                 MpdData_WriteBack = False
                 Exit Function
             Else
                 ENGINE_SERIES = Replace(ENGINE_SERIES, "'", "''")
             End If
           
           BASIS = MPDwb(i, 3)
           If Len(BASIS) > 100 Then
                 MsgBox ("MPD Data : BASIS  is exceeding field limit.")
                 MpdData_WriteBack = False
                 Exit Function
             Else
                 BASIS = Replace(BASIS, "'", "''")
             End If
           
           Interval = MPDwb(i, 4)
             If Interval <> "" And IsNumeric(Interval) = False Then
                 MsgBox ("MPD Data : Interval  is not a valid number.")
                 MpdData_WriteBack = False
                 Exit Function
             Else
                 Interval = Round(Interval)
            End If
           
           Inspection_man_hrs = MPDwb(i, 5)
             If Inspection_man_hrs <> "" And IsNumeric(Inspection_man_hrs) = False Then
                     MsgBox ("MPD Data : Inspection_man_hrs  is not valid number.")
                     MpdData_WriteBack = False
                     Exit Function
             End If
           
           Fallout_rate = MPDwb(i, 6)
           If Fallout_rate <> "" And IsNumeric(Fallout_rate) = False Then
                 MsgBox ("MPD Data : Fallout_rate  is not valid number.")
                 MpdData_WriteBack = False
                 Exit Function
            End If
           
           Fallout_man_hrs = MPDwb(i, 7)
           If Fallout_man_hrs <> "" And IsNumeric(Fallout_man_hrs) = False Then
                 MsgBox ("MPD Data : Fallout_man_hrs  is not valid number.")
                 MpdData_WriteBack = False
                 Exit Function
            End If
           
           User_change = MPDwb(i, 8)
           If Len(User_change) > 200 Then
                 MsgBox ("MPD Data : User_change  is exceeding field limit.")
                 MpdData_WriteBack = False
                 Exit Function
             Else
                 User_change = Replace(User_change, "'", "''")
                 User_change = Application.WorksheetFunction.Clean(Replace(User_change, Chr(10), " "))
             End If
           
    
           sqlCmd = " INSERT INTO [dbo].[WB_MPD_DATA_T]([ID],[MPD_DESCRIPTION],[ENGINE_SERIES],[BASIS],[INTERVAL],[INSPECTION_MAN_HOURS],[FALL_OUT_RATE],[FALL_OUT_MAN_HOURS],[USER_CHANGE],[TPP_ID],[ENGINE_MODEL],[AIRLINE_SHORT_NAME],[SSO_ID])"
           sqlCmd = sqlCmd & " VALUES('" & HeaderID & "','" & Desc & "','" & ENGINE_SERIES & "','" & BASIS & "','" & Interval & "','" & Inspection_man_hrs & "','" & Fallout_rate & "','" & Fallout_man_hrs & "','" & User_change & "','" & TPPID & "','" & Engine_Model & "','" & Airline_SHORT_NAME & "', '" & SSO_ID & "') "
           conn.Execute sqlCmd
           i = i + 1
                 
        Loop
        
        Erase MPDwb
    End If
    Exit Function
    
errorhandler:

    ErrorFlag = True
    ErrorDesc = ErrorDesc & "MPD Data - " & Err.Description & vbNewLine
End Function

Function AircraftMaintenance_WriteBack(HeaderID As String, TPPID As Integer, Engine_Model As String, Airline_SHORT_NAME As String, SSO_ID As String) As Boolean
    
    ' ================================
    ' Last updated: 11/02/2016
    ' Code by: TCS & Asko Soimakallio
    '=================================
    
    On Error GoTo errorhandler:
    Dim sqlCmd As String

    AircraftMaintenance_WriteBack = True
    S1 = "Aircraft Maintenance"
    
    Sheets(S1).Activate
    RC = Sheets(S1).Cells(Rows.Count, 2).End(xlUp).Row
    CC = 5
        
    'Truncate Table
    sqlCmd = " DELETE FROM WB_AIRCRAFT_MAINTENANCE_T WHERE TPP_ID = '" & TPPID & "';"
    conn.Execute sqlCmd
    
    If RC > 6 Then
        i = 7
        Dim AMwb
        AMwb = Sheets(S1).Range(Sheets(S1).Cells(1, 1), Sheets(S1).Cells(RC, CC)).Value
                
        Do Until i > RC
            AIRCRAFT_TAIL = AMwb(i, 2)
            If Len(AIRCRAFT_TAIL) > 50 Then
                    MsgBox ("Aircraft Maintenance : AIRCRAFT_TAIL  is exceeding field limit.")
                    AircraftMaintenance_WriteBack = False
                    Exit Function
                Else
                    AIRCRAFT_TAIL = Replace(AIRCRAFT_TAIL, "'", "''")
                End If
            
            MAINTENANCE_TYPE = AMwb(i, 3)
            If Len(MAINTENANCE_TYPE) > 100 Then
                    MsgBox ("Aircraft Maintenance : MAINTENANCE_TYPE  is exceeding field limit.")
                    AircraftMaintenance_WriteBack = False
                    Exit Function
                Else
                    MAINTENANCE_TYPE = Replace(MAINTENANCE_TYPE, "'", "''")
                End If
            
            START_DATE = AMwb(i, 4)
            If Len(START_DATE) > 100 Then
                    MsgBox ("Aircraft Maintenance : START_DATE  is exceeding field limit.")
                    AircraftMaintenance_WriteBack = False
                    Exit Function
                Else
                    START_DATE = Replace(START_DATE, "'", "''")
                End If
            
            END_DATE = AMwb(i, 5)
            If Len(END_DATE) > 100 Then
                    MsgBox ("Aircraft Maintenance : END_DATE  is exceeding field limit.")
                    AircraftMaintenance_WriteBack = False
                    Exit Function
                Else
                    END_DATE = Replace(END_DATE, "'", "''")
                End If
            
            
            sqlCmd = " INSERT INTO [dbo].[WB_AIRCRAFT_MAINTENANCE_T]([ID],[AIRCRAFT_TAIL],[MAINTENANCE_TYPE],[START_DATE],[END_DATE] ,[TPP_ID],[ENGINE_MODEL],[AIRLINE_SHORT_NAME],[SSO_ID]  )"
            sqlCmd = sqlCmd & " VALUES('" & HeaderID & "','" & AIRCRAFT_TAIL & "', '" & MAINTENANCE_TYPE & "','" & START_DATE & "','" & END_DATE & "','" & TPP_ID & "','" & Engine_Model & "','" & Airline_SHORT_NAME & "', '" & SSO_ID & "') "
            conn.Execute sqlCmd
            i = i + 1
    
        Loop
        
        Erase AMwb
    
    End If
    Exit Function
    
errorhandler:
    
    ErrorFlag = True
    ErrorDesc = ErrorDesc & "Aircraft Maintenance - " & Err.Description & vbNewLine
End Function

Function FleetAircraft_WriteBack(HeaderID As String, TPPID As Integer, Engine_Model As String, Airline_SHORT_NAME As String, SSO_ID As String) As Boolean
    
    ' ================================
    ' Last updated: 11/02/2016
    ' Code by: TCS & Asko Soimakallio
    '=================================
    
    On Error GoTo errorhandler:
    
    Dim sqlCmd As String
    Dim i As Integer
    FleetAircraft_WriteBack = True
    
    S1 = "Fleet Aircraft"
    Sheets(S1).Activate
    
    RC = Sheets(S1).Cells(Rows.Count, 2).End(xlUp).Row
    CC = Sheets(S1).Cells(5, Columns.Count).End(xlToLeft).Column
    
    sqlCmd = " DELETE FROM WB_FLEET_AIRCRAFT_T WHERE TPP_ID = '" & TPPID & "';"
    conn.Execute sqlCmd
    
    If RC > 5 Then
        
        Dim FAwb
        FAwb = Sheets(S1).Range(Sheets(S1).Cells(1, 1), Sheets(S1).Cells(RC, CC)).Value
        
        i = 6

        Do Until i > RC
              Tail = FAwb(i, 2)
              If Len(Tail) > 100 Then
                    MsgBox ("Fleet Aircraft : Tail  is exceeding field limit.")
                    FleetAircraft_WriteBack = False
                    Exit Function
                Else
                    Tail = Replace(Tail, "'", "''")
                End If
              
              Hrs_per_day = FAwb(i, 3)
              If Len(Hrs_per_day) > 100 Then
                    MsgBox ("Fleet Aircraft : Hrs_per_day  is exceeding field limit.")
                    FleetAircraft_WriteBack = False
                    Exit Function
                Else
                    Hrs_per_day = Replace(Hrs_per_day, "'", "''")
                End If
              
              Cyc_per_day = FAwb(i, 4)
              If Len(Cyc_per_day) > 100 Then
                    MsgBox ("Fleet Aircraft : Cyc_per_day  is exceeding field limit.")
                    FleetAircraft_WriteBack = False
                    Exit Function
                Else
                    Cyc_per_day = Replace(Cyc_per_day, "'", "''")
                End If
              
              Eng1 = FAwb(i, 5)
              If Len(Eng1) > 100 Then
                    MsgBox ("Fleet Aircraft : Eng  is exceeding field limit.")
                    FleetAircraft_WriteBack = False
                    Exit Function
                Else
                    Eng1 = Replace(Eng1, "'", "''")
                End If
              
              Eng2 = FAwb(i, 6)
              If Len(Eng2) > 100 Then
                    MsgBox ("Fleet Aircraft : Eng  is exceeding field limit.")
                    FleetAircraft_WriteBack = False
                    Exit Function
                Else
                    Eng2 = Replace(Eng2, "'", "''")
                End If
              
              Eng3 = FAwb(i, 7)
              If Len(Eng3) > 100 Then
                    MsgBox ("Fleet Aircraft : Eng  is exceeding field limit.")
                    FleetAircraft_WriteBack = False
                    Exit Function
                Else
                    Eng3 = Replace(Eng3, "'", "''")
                End If
              
              Eng4 = FAwb(i, 8)
              If Len(Eng4) > 100 Then
                    MsgBox ("Fleet Aircraft : Eng is exceeding field limit.")
                    FleetAircraft_WriteBack = False
                    Exit Function
                Else
                    Eng4 = Replace(Eng4, "'", "''")
                End If
              
              Current_eng1 = FAwb(i, 9)
              If Len(Current_eng1) > 100 Then
                    MsgBox ("Fleet Aircraft : Current_eng  is exceeding field limit.")
                    FleetAircraft_WriteBack = False
                    Exit Function
                Else
                    Current_eng1 = Replace(Current_eng1, "'", "''")
                End If
              
              Current_eng2 = FAwb(i, 10)
              If Len(Current_eng2) > 100 Then
                    MsgBox ("Fleet Aircraft : Current_eng  is exceeding field limit.")
                    FleetAircraft_WriteBack = False
                    Exit Function
                Else
                    Current_eng2 = Replace(Current_eng2, "'", "''")
                End If
              
              Current_eng3 = FAwb(i, 11)
              If Len(Current_eng3) > 100 Then
                    MsgBox ("Fleet Aircraft : Current_eng  is exceeding field limit.")
                    FleetAircraft_WriteBack = False
                    Exit Function
                Else
                    Current_eng3 = Replace(Current_eng3, "'", "''")
                End If
              
              Current_eng4 = FAwb(i, 12)
              If Len(Current_eng4) > 100 Then
                    MsgBox ("Fleet Aircraft : Current_eng  is exceeding field limit.")
                    FleetAircraft_WriteBack = False
                    Exit Function
                Else
                    Current_eng4 = Replace(Current_eng4, "'", "''")
                End If
              
              AC_OP_STATUS = FAwb(i, 13)
              If Len(AC_OP_STATUS) > 4000 Then
                    MsgBox ("Fleet Aircraft : AC_OP_STATUS is exceeding field limit.")
                    FleetAircraft_WriteBack = False
                    Exit Function
              Else
                    AC_OP_STATUS = Replace(AC_OP_STATUS, "'", "''")
              End If
            
              DELIVERY_DATE = FAwb(i, 14)
              If Len(DELIVERY_DATE) > 100 Then
                    MsgBox ("Fleet Aircraft : DELIVERY_DATE  is exceeding field limit.")
                    FleetAircraft_WriteBack = False
                    Exit Function
                Else
                    DELIVERY_DATE = Replace(DELIVERY_DATE, "'", "''")
                End If
                
              RETIREMENT_DATE = FAwb(i, 15)
              If Len(RETIREMENT_DATE) > 100 Then
                    MsgBox ("Fleet Aircraft : RETIREMENT_DATE  is exceeding field limit.")
                    FleetAircraft_WriteBack = False
                    Exit Function
              Else
                    RETIREMENT_DATE = Replace(RETIREMENT_DATE, "'", "''")
              End If
                
              UTIL_MODE = FAwb(i, 16)
              If Len(UTIL_MODE) > 500 Then
                    MsgBox ("Fleet Aircraft : UTIL_MODE  is exceeding field limit.")
                    FleetAircraft_WriteBack = False
                    Exit Function
                Else
                    UTIL_MODE = Replace(UTIL_MODE, "'", "''")
                End If
                
                MAN_HOURS = FAwb(i, 17)
                If MAN_HOURS <> "" And IsNumeric(MAN_HOURS) = False Then
                    MsgBox ("Fleet Aircraft : MAN_HOURS is not valid number.")
                    FleetAircraft_WriteBack = False
                    Exit Function
                Else
                    MAN_HOURS = Replace(MAN_HOURS, "'", "''")
                End If
                    
                    
                MAN_CYCLES = FAwb(i, 18)
                If MAN_CYCLES <> "" And IsNumeric(MAN_CYCLES) = False Then
                    MsgBox ("Fleet Aircraft : MAN_CYCLES is not valid number.")
                    FleetAircraft_WriteBack = False
                    Exit Function
                Else
                    MAN_CYCLES = Replace(MAN_CYCLES, "'", "''")
                End If
                
                SERVICE_DATE = FAwb(i, 19)
                If Len(SERVICE_DATE) > 100 Then
                      MsgBox ("Fleet Aircraft : SERVICE_DATE  is exceeding field limit.")
                      FleetAircraft_WriteBack = False
                      Exit Function
                Else
                      SERVICE_DATE = Replace(SERVICE_DATE, "'", "''")
                End If
                
                RC_ENGINE1 = FAwb(i, 20)
                If Len(RC_ENGINE1) > 500 Then
                      MsgBox ("Fleet Aircraft : RC_ENGINE1  is exceeding field limit.")
                      FleetAircraft_WriteBack = False
                      Exit Function
                Else
                      RC_ENGINE1 = Replace(RC_ENGINE1, "'", "''")
                End If
                
                RC_ENGINE2 = FAwb(i, 21)
                If Len(RC_ENGINE2) > 500 Then
                      MsgBox ("Fleet Aircraft : RC_ENGINE2  is exceeding field limit.")
                      FleetAircraft_WriteBack = False
                      Exit Function
                Else
                      RC_ENGINE2 = Replace(RC_ENGINE2, "'", "''")
                End If
                
                RC_ENGINE3 = FAwb(i, 22)
                If Len(RC_ENGINE3) > 500 Then
                      MsgBox ("Fleet Aircraft : RC_ENGINE3  is exceeding field limit.")
                      FleetAircraft_WriteBack = False
                      Exit Function
                Else
                      RC_ENGINE3 = Replace(RC_ENGINE3, "'", "''")
                End If
                
                RC_ENGINE4 = FAwb(i, 23)
                If Len(RC_ENGINE4) > 500 Then
                      MsgBox ("Fleet Aircraft : RC_ENGINE4  is exceeding field limit.")
                      FleetAircraft_WriteBack = False
                      Exit Function
                Else
                      RC_ENGINE4 = Replace(RC_ENGINE4, "'", "''")
                End If
              
       
              sqlCmd = " INSERT INTO [dbo].[WB_FLEET_AIRCRAFT_T]([ID],[TAIL],[HRS_DAY],[CYC_DAY],[ENGINE1],[ENGINE2],[ENGINE3],[ENGINE4],[CURRENT_ENGINE1],[CURRENT_ENGINE2],[CURRENT_ENGINE3],[CURRENT_ENGINE4],[TPP_ID],[ENGINE_MODEL],[AIRLINE_SHORT_NAME],[SSO_ID],[AC_OP_STATUS], [DELIVERY_DATE] ,   [RETIREMENT_DATE] , [UTIL_MODE] ,   [MAN_HOURS] ,   [MAN_CYCLES] ,  [SERVICE_DATE], [RC_ENGINE1] ,  [RC_ENGINE2] ,  [RC_ENGINE3],   [RC_ENGINE4] )"
              sqlCmd = sqlCmd & " VALUES('" & HeaderID & "','" & Tail & "','" & Hrs_per_day & "','" & Cyc_per_day & "','" & Eng1 & "','" & Eng2 & "','" & Eng3 & "','" & Eng4 & "','" & Current_eng1 & "','" & Current_eng2 & "','" & Current_eng3 & "','" & Current_eng4 & "','" & TPPID & "','" & Engine_Model & "','" & Airline_SHORT_NAME & "', '" & SSO_ID & "', '" & AC_OP_STATUS & "', '" & DELIVERY_DATE & "', '" & RETIREMENT_DATE & "', '" & UTIL_MODE & "', '" & MAN_HOURS & "', '" & MAN_CYCLES & "', '" & SERVICE_DATE & "', '" & RC_ENGINE1 & "', '" & RC_ENGINE2 & "', '" & RC_ENGINE3 & "', '" & RC_ENGINE4 & "') "
              conn.Execute sqlCmd
              i = i + 1
             
        Loop
        Erase FAwb
        
    End If
    
    Exit Function
    
errorhandler:

    ErrorFlag = True
    ErrorDesc = ErrorDesc & "Fleet aircraft - " & Err.Description & vbNewLine

End Function

Function DiagnosticData_WriteBack(HeaderID As String, TPPID As Integer, Engine_Model As String, Airline_SHORT_NAME As String, SSO_ID As String) As Boolean

    ' ================================
    ' Last updated: 11/02/2016
    ' Code by: TCS & Asko Soimakallio
    '=================================

    On Error GoTo errorhandler:
    Dim sqlCmd As String
    
    Dim i As Integer
    DiagnosticData_WriteBack = True
    
    S1 = "Diagnostics Data"
    Sheets(S1).Activate
    RC = Sheets(S1).Cells(Rows.Count, 1).End(xlUp).Row
    CC = Sheets(S1).Cells(3, Columns.Count).End(xlToLeft).Column
    
    'Truncate Table
    sqlCmd = " DELETE FROM WB_DIAGNOSTICS_DATA_T WHERE TPP_ID = '" & TPPID & "';"
    conn.Execute sqlCmd
    
    If RC > 3 Then
    
        i = 4
        Dim Dwb
        Dwb = Sheets(S1).Range(Sheets(S1).Cells(1, 1), Sheets(S1).Cells(RC, CC)).Value
        
        Do Until i > RC
            
            ESN = Dwb(i, 1)
            If Len(ESN) > 100 Then
                    MsgBox ("Diagnostics Data : ESN  is exceeding field limit.")
                    DiagnosticData_WriteBack = False
                    Exit Function
                Else
                    ESN = Replace(ESN, "'", "''")
            End If
            
            INSTALL_DATE = Dwb(i, 2)
            If INSTALL_DATE <> "" And IsDate(INSTALL_DATE) = False Then
                MsgBox ("Diagnostics Data : INSTALL_DATE  is not valid.")
                DiagnosticData_WriteBack = False
                Exit Function
            End If
            
            FIRST_DATA_POINT = Dwb(i, 3)
            If FIRST_DATA_POINT <> "" And IsDate(FIRST_DATA_POINT) = False Then
                MsgBox ("Diagnostics Data : FIRST_DATA_POINT  is not valid.")
                DiagnosticData_WriteBack = False
                Exit Function
            End If
            
            LAST_DATA_POINT = Dwb(i, 4)
            If LAST_DATA_POINT <> "" And IsDate(LAST_DATA_POINT) = False Then
                MsgBox ("Diagnostics Data : LAST_DATA_POINT  is not valid.")
                DiagnosticData_WriteBack = False
                Exit Function
            End If
            
            FIRST_SMOOTH_VALUE = Dwb(i, 5)
            If Len(FIRST_SMOOTH_VALUE) > 100 Then
                    MsgBox ("Diagnostics Data : FIRST_SMOOTH_VALUE  is exceeding field limit.")
                    DiagnosticData_WriteBack = False
                    Exit Function
                Else
                    FIRST_SMOOTH_VALUE = Replace(FIRST_SMOOTH_VALUE, "'", "''")
            End If
            
            LAST_SMOOTH_VALUE = Dwb(i, 6)
            If Len(LAST_SMOOTH_VALUE) > 100 Then
                    MsgBox ("Diagnostics Data : LAST_SMOOTH_VALUE  is exceeding field limit.")
                    DiagnosticData_WriteBack = False
                    Exit Function
                Else
                    LAST_SMOOTH_VALUE = Replace(LAST_SMOOTH_VALUE, "'", "''")
            End If
            
            ENGINE_SPECIFIC_CURVE_FIT = Dwb(i, 7)
            If Len(ENGINE_SPECIFIC_CURVE_FIT) > 100 Then
                    MsgBox ("Diagnostics Data : ENGINE_SPECIFIC_CURVE_FIT  is exceeding field limit.")
                    DiagnosticData_WriteBack = False
                    Exit Function
                Else
                    ENGINE_SPECIFIC_CURVE_FIT = Replace(ENGINE_SPECIFIC_CURVE_FIT, "'", "''")
            End If
            
            AVG_EGT_DET_DAY_INIT_1YRAGO = Dwb(i, 8)
            If Len(AVG_EGT_DET_DAY_INIT_1YRAGO) > 100 Then
                    MsgBox ("Diagnostics Data : AVG_EGT_DET_DAY_INIT_1YRAGO  is exceeding field limit.")
                    DiagnosticData_WriteBack = False
                    Exit Function
                Else
                    AVG_EGT_DET_DAY_INIT_1YRAGO = Replace(AVG_EGT_DET_DAY_INIT_1YRAGO, "'", "''")
            End If
            
            AVG_EGT_DET_DAY_INIT_2YRAGO = Dwb(i, 9)
            If Len(AVG_EGT_DET_DAY_INIT_2YRAGO) > 100 Then
                    MsgBox ("Diagnostics Data : AVG_EGT_DET_DAY_INIT_2YRAGO  is exceeding field limit.")
                    DiagnosticData_WriteBack = False
                    Exit Function
                Else
                    AVG_EGT_DET_DAY_INIT_2YRAGO = Replace(AVG_EGT_DET_DAY_INIT_2YRAGO, "'", "''")
            End If
            
            LINEAR_FIT_SLOPE = Dwb(i, 10)
            If Len(LINEAR_FIT_SLOPE) > 100 Then
                    MsgBox ("Diagnostics Data : LINEAR_FIT_SLOPE  is exceeding field limit.")
                    DiagnosticData_WriteBack = False
                    Exit Function
                Else
                    LINEAR_FIT_SLOPE = Replace(LINEAR_FIT_SLOPE, "'", "''")
            End If
            
            Constant = Dwb(i, 11)
            If Len(Constant) > 100 Then
                    MsgBox ("Diagnostics Data : Constant  is exceeding field limit.")
                    DiagnosticData_WriteBack = False
                    Exit Function
                Else
                    Constant = Replace(Constant, "'", "''")
            End If
            
            MAXCON_SLOPE = Dwb(i, 12)
            If Len(MAXCON_SLOPE) > 100 Then
                    MsgBox ("Diagnostics Data : MAXCON_SLOPE  is exceeding field limit.")
                    DiagnosticData_WriteBack = False
                    Exit Function
                Else
                    MAXCON_SLOPE = Replace(MAXCON_SLOPE, "'", "''")
            End If
            
            MAXCON_CONSTANT = Dwb(i, 13)
            If Len(MAXCON_CONSTANT) > 100 Then
                    MsgBox ("Diagnostics Data : MAXCON_CONSTANT  is exceeding field limit.")
                    DiagnosticData_WriteBack = False
                    Exit Function
                Else
                    MAXCON_CONSTANT = Replace(MAXCON_CONSTANT, "'", "''")
            End If
            
            Takeoff_derate = Dwb(i, 14)
            If Len(Takeoff_derate) > 100 Then
                    MsgBox ("Diagnostics Data : Takeoff_derate  is exceeding field limit.")
                    DiagnosticData_WriteBack = False
                    Exit Function
                Else
                    Takeoff_derate = Replace(Takeoff_derate, "'", "''")
            End If
            
            Climb_derate = Dwb(i, 15)
            If Len(Climb_derate) > 100 Then
                    MsgBox ("Diagnostics Data : Climb_derate  is exceeding field limit.")
                    DiagnosticData_WriteBack = False
                    Exit Function
                Else
                    Climb_derate = Replace(Climb_derate, "'", "''")
            End If
            
            sqlCmd = " INSERT INTO [dbo].[WB_DIAGNOSTICS_DATA_T ]([ID],[ESN],[INSTALL_DATE],[FIRST_DATA_POINT],[LAST_DATA_POINT],[FIRST_SMOOTH_VALUE],[LAST_SMOOTH_VALUE],[ENGINE_SPECIFIC_CURVE_FIT],[AVG_EGT_DET_DAY_INIT_1YRAGO],[AVG_EGT_DET_DAY_INIT_2YRAGO],[LINEAR_FIT_SLOPE],[Constant],[MAXCON_SLOPE],[MAXCON_CONSTANT],[Takeoff_derate],[Climb_derate] ,[TPP_ID],[ENGINE_MODEL],[AIRLINE_SHORT_NAME] ,[SSO_ID] )"
            sqlCmd = sqlCmd & " VALUES('" & HeaderID & "','" & ESN & "', '" & INSTALL_DATE & "','" & FIRST_DATA_POINT & "','" & LAST_DATA_POINT & "','" & FIRST_SMOOTH_VALUE & "','" & LAST_SMOOTH_VALUE & "','" & ENGINE_SPECIFIC_CURVE_FIT & "','" & AVG_EGT_DET_DAY_INIT_1YRAGO & "','" & AVG_EGT_DET_DAY_INIT_2YRAGO & "','" & LINEAR_FIT_SLOPE & "','" & Constant & "','" & MAXCON_SLOPE & "','" & MAXCON_CONSTANT & "','" & Takeoff_derate & "','" & Climb_derate & "','" & TPP_ID & "','" & Engine_Model & "','" & Airline_SHORT_NAME & "', '" & SSO_ID & "') "
            conn.Execute sqlCmd
            i = i + 1

        Loop
        
        Erase Dwb
    End If
    
    Exit Function
    
errorhandler:
    
    ErrorFlag = True
    ErrorDesc = ErrorDesc & "Diagnostics Data - " & Err.Description & vbNewLine

End Function

Function Diagnostics_WriteBack(HeaderID As String, TPPID As Integer, Engine_Model As String, Airline_SHORT_NAME As String, SSO_ID As String) As Boolean
    
    ' ================================
    ' Last updated: 11/02/2016
    ' Code by: TCS & Asko Soimakallio
    '=================================
    
    On Error GoTo errorhandler:
    
    Dim sqlCmd As String
    S1 = "Diagnostics"
   
    Diagnostics_WriteBack = True
    Sheets(S1).Activate
    RC = Sheets(S1).Cells(Rows.Count, 29).End(xlUp).Row
    CC = 39
    
    'Truncate Table
    sqlCmd = " DELETE FROM  WB_DIAGNOSTICS_T WHERE TPP_ID = '" & TPPID & "';"
    conn.Execute sqlCmd
    
    If RC > 5 Then
    
        i = 6
            
        Do Until i > RC
        
            Dim CNRwb
            CNRwb = Sheets(S1).Range(Sheets(S1).Cells(1, 1), Sheets(S1).Cells(RC, CC)).Value
            
            ALARM_DATE = CNRwb(i, 29)
            If Len(ALARM_DATE) > 100 Then
                 MsgBox ("Diagnostics : ALARM_DATE  is exceeding field limit.")
                 Diagnostics_WriteBack = False
                 Exit Function
             Else
                 ALARM_DATE = Replace(ALARM_DATE, "'", "''")
            End If
            
            CNR_NUMBER = CNRwb(i, 30)
            If Len(CNR_NUMBER) > 100 Then
                 MsgBox ("Diagnostics : CNR_NUMBER  is exceeding field limit.")
                 Diagnostics_WriteBack = False
                 Exit Function
             Else
                 CNR_NUMBER = Replace(CNR_NUMBER, "'", "''")
            End If
            
            AIRCRAFT_ID = CNRwb(i, 31)
            If Len(AIRCRAFT_ID) > 100 Then
                 MsgBox ("Diagnostics : AIRCRAFT_ID  is exceeding field limit.")
                 Diagnostics_WriteBack = False
                 Exit Function
             Else
                 AIRCRAFT_ID = Replace(AIRCRAFT_ID, "'", "''")
            End If
            
            ESN = CNRwb(i, 32)
            If Len(ESN) > 100 Then
                 MsgBox ("Diagnostics : ESN  is exceeding field limit.")
                 Diagnostics_WriteBack = False
                 Exit Function
             Else
                 ESN = Replace(ESN, "'", "''")
            End If
            
            POSITION = CNRwb(i, 33)
            If Len(POSITION) > 100 Then
                 MsgBox ("Diagnostics : POSITION  is exceeding field limit.")
                 Diagnostics_WriteBack = False
                 Exit Function
             Else
                 POSITION = Replace(POSITION, "'", "''")
            End If
            
            FLIGHT_PHASE = CNRwb(i, 34)
            If Len(FLIGHT_PHASE) > 100 Then
                 MsgBox ("Diagnostics : FLIGHT_PHASE  is exceeding field limit.")
                 Diagnostics_WriteBack = False
                 Exit Function
             Else
                 FLIGHT_PHASE = Replace(FLIGHT_PHASE, "'", "''")
            End If
            
            ALARM_TYPE = CNRwb(i, 35)
            If Len(ALARM_TYPE) > 100 Then
                 MsgBox ("Diagnostics : ALARM_TYPE  is exceeding field limit.")
                 Diagnostics_WriteBack = False
                 Exit Function
             Else
                 ALARM_TYPE = Replace(ALARM_TYPE, "'", "''")
            End If
            
            ROOT_CAUSE = CNRwb(i, 36)
            If Len(ROOT_CAUSE) > 2000 Then
                 MsgBox ("Diagnostics : ROOT_CAUSE  is exceeding field limit.")
                 Diagnostics_WriteBack = False
                 Exit Function
             Else
                 ROOT_CAUSE = Replace(ROOT_CAUSE, "'", "''")
                 ROOT_CAUSE = Application.WorksheetFunction.Clean(Replace(ROOT_CAUSE, Chr(10), " "))
            End If
            
            CORRECTIVE_ACTION = CNRwb(i, 37)
            If Len(CORRECTIVE_ACTION) > 2000 Then
                 MsgBox ("Diagnostics : CORRECTIVE_ACTION  is exceeding field limit.")
                 Diagnostics_WriteBack = False
                 Exit Function
             Else
                 CORRECTIVE_ACTION = Replace(CORRECTIVE_ACTION, "'", "''")
                 CORRECTIVE_ACTION = Application.WorksheetFunction.Clean(Replace(CORRECTIVE_ACTION, Chr(10), " "))
            End If
            
            DIAG_STATUS = CNRwb(i, 38)
            If Len(DIAG_STATUS) > 2000 Then
                 MsgBox ("Diagnostics : DIAG_STATUS  is exceeding field limit.")
                 Diagnostics_WriteBack = False
                 Exit Function
             Else
                 DIAG_STATUS = Replace(DIAG_STATUS, "'", "''")
                 DIAG_STATUS = Application.WorksheetFunction.Clean(Replace(DIAG_STATUS, Chr(10), " "))
            End If
            
            DATE_CLOSED = CNRwb(i, 39)
            If Len(DATE_CLOSED) > 100 Then
                 MsgBox ("Diagnostics : DATE_CLOSED  is exceeding field limit.")
                 Diagnostics_WriteBack = False
                 Exit Function
             Else
                 DATE_CLOSED = Replace(DATE_CLOSED, "'", "''")
            End If
        
            sqlCmd = "INSERT INTO [dbo].[WB_DIAGNOSTICS_T]  ( ID, ALARM_DATE,CNR_NUMBER,AIRCRAFT_ID,ESN,POSITION,FLIGHT_PHASE, "
            sqlCmd = sqlCmd & " ALARM_TYPE,ROOT_CAUSE,CORRECTIVE_ACTION,DIAG_STATUS,DATE_CLOSED  "
            sqlCmd = sqlCmd & " ,[TPP_ID] ,[ENGINE_MODEL],[AIRLINE_SHORT_NAME],[SSO_ID])"
            
            sqlCmd = sqlCmd & " VALUES('" & HeaderID & "','" & ALARM_DATE & "', '" & CNR_NUMBER & "','" & AIRCRAFT_ID & "','" & ESN & "','" & POSITION & "','" & FLIGHT_PHASE & "','" & ALARM_TYPE & "','" & ROOT_CAUSE & "','" & CORRECTIVE_ACTION & "' "
            sqlCmd = sqlCmd & " ,'" & DIAG_STATUS & "','" & DATE_CLOSED & "','" & TPPID & "','" & Engine_Model & "','" & Airline_SHORT_NAME & "', '" & SSO_ID & "') "
            
            conn.Execute sqlCmd
            i = i + 1
        
        Loop
        Erase CNRwb
        
    End If
    Exit Function
    
errorhandler:
    
    ErrorFlag = True
    ErrorDesc = ErrorDesc & "Diagnostics - " & Err.Description & vbNewLine

End Function

Function StressTest_WriteBack(HeaderID As String, TPPID As Integer, Engine_Model As String, Airline_SHORT_NAME As String, SSO_ID As String) As Boolean

    ' ================================
    ' Last updated: 9/24/2020
    ' Code by: TCS & Asko Soimakallio
    '=================================

    On Error GoTo errorhandler:
    Dim sqlCmd As String

    S1 = "Stress Test Data"
    StressTest_WriteBack = True
    
    RC = Sheets(S1).Cells(Rows.Count, 2).End(xlUp).Row
    CC = 16
    
    'Truncate Table
    sqlCmd = " DELETE FROM WB_STRESS_TEST_DATA_T WHERE TPP_ID = '" & TPPID & "';"
    conn.Execute sqlCmd
    
    If RC > 5 Then
   
        i = 6
        Dim StWB
        StWB = Sheets(S1).Range(Sheets(S1).Cells(1, 1), Sheets(S1).Cells(RC, CC)).Value
          
        Do Until i > RC
   
            STRESS_TEST_DATE = StWB(i, 2)
            If Len(STRESS_TEST_DATE) > 100 Then
                  MsgBox ("Stress Test Data : STRESS_TEST_DATE  is exceeding field limit.")
                  StressTest_WriteBack = False
                  Exit Function
              Else
                  STRESS_TEST_DATE = Replace(STRESS_TEST_DATE, "'", "''")
            End If
            
            STRESS_TEST_NAME = StWB(i, 3)
            If Len(STRESS_TEST_NAME) > 300 Then
                  MsgBox ("Stress Test Data : STRESS_TEST_NAME  is exceeding field limit.")
                  StressTest_WriteBack = False
                  Exit Function
              Else
                  STRESS_TEST_NAME = Replace(STRESS_TEST_NAME, "'", "''")
                  STRESS_TEST_NAME = Application.WorksheetFunction.Clean(Replace(STRESS_TEST_NAME, Chr(10), " "))
            End If
            
            MANUAL_REFERENCE = StWB(i, 4)
            If Len(MANUAL_REFERENCE) > 300 Then
                  MsgBox ("Stress Test Data : MANUAL_REFERENCE  is exceeding field limit.")
                  StressTest_WriteBack = False
                  Exit Function
              Else
                  MANUAL_REFERENCE = Replace(MANUAL_REFERENCE, "'", "''")
                  MANUAL_REFERENCE = Application.WorksheetFunction.Clean(Replace(MANUAL_REFERENCE, Chr(10), " "))
            End If
            
            SB_AD_REFERENCE = StWB(i, 5)
            If Len(SB_AD_REFERENCE) > 100 Then
                  MsgBox ("Stress Test Data : SB_AD_REFERENCE  is exceeding field limit.")
                  StressTest_WriteBack = False
                  Exit Function
              Else
                  SB_AD_REFERENCE = Replace(SB_AD_REFERENCE, "'", "''")
            End If
            
            OTHER_REFERENCE = StWB(i, 6)
            If Len(OTHER_REFERENCE) > 300 Then
                  MsgBox ("Stress Test Data : OTHER_REFERENCE  is exceeding field limit.")
                  StressTest_WriteBack = False
                  Exit Function
              Else
                  OTHER_REFERENCE = Replace(OTHER_REFERENCE, "'", "''")
                  OTHER_REFERENCE = Application.WorksheetFunction.Clean(Replace(OTHER_REFERENCE, Chr(10), " "))
            End If
            
            GE_OWNER = StWB(i, 10)
            If Len(GE_OWNER) > 100 Then
                  MsgBox ("Stress Test Data : GE_OWNER  is exceeding field limit.")
                  StressTest_WriteBack = False
                  Exit Function
              Else
                  GE_OWNER = Replace(GE_OWNER, "'", "''")
            End If
            
            CUSTOMER_OWNER = StWB(i, 11)
            If Len(CUSTOMER_OWNER) > 100 Then
                  MsgBox ("Stress Test Data : CUSTOMER_OWNER  is exceeding field limit.")
                  StressTest_WriteBack = False
                  Exit Function
              Else
                  CUSTOMER_OWNER = Replace(CUSTOMER_OWNER, "'", "''")
            End If
            
            TIME_TO_PREPARE = StWB(i, 12)
            If Len(TIME_TO_PREPARE) > 100 Then
                  MsgBox ("Stress Test Data : TIME_TO_PREPARE  is exceeding field limit.")
                  StressTest_WriteBack = False
                  Exit Function
              Else
                  TIME_TO_PREPARE = Replace(TIME_TO_PREPARE, "'", "''")
            End If
            
            TIME_TO_EXECUTE = StWB(i, 13)
            If Len(TIME_TO_EXECUTE) > 100 Then
                  MsgBox ("Stress Test Data : TIME_TO_EXECUTE  is exceeding field limit.")
                  StressTest_WriteBack = False
                  Exit Function
              Else
                  TIME_TO_EXECUTE = Replace(TIME_TO_EXECUTE, "'", "''")
            End If
            
            PROCEDURE_DESCRIPTION = StWB(i, 14)
            If Len(PROCEDURE_DESCRIPTION) > 4000 Then
                  MsgBox ("Stress Test Data : PROCEDURE_DESCRIPTION  is exceeding field limit.")
                  StressTest_WriteBack = False
                  Exit Function
              Else
                  PROCEDURE_DESCRIPTION = Replace(PROCEDURE_DESCRIPTION, "'", "''")
                  PROCEDURE_DESCRIPTION = Application.WorksheetFunction.Clean(Replace(PROCEDURE_DESCRIPTION, Chr(10), " "))
            End If
            
            QUES_RAISED_LSSNS_LEARNED = StWB(i, 15)
            If Len(QUES_RAISED_LSSNS_LEARNED) > 4000 Then
                  MsgBox ("Stress Test Data : QUES_RAISED_LSSNS_LEARNED  is exceeding field limit.")
                  StressTest_WriteBack = False
                  Exit Function
              Else
                  QUES_RAISED_LSSNS_LEARNED = Replace(QUES_RAISED_LSSNS_LEARNED, "'", "''")
                  QUES_RAISED_LSSNS_LEARNED = Application.WorksheetFunction.Clean(Replace(QUES_RAISED_LSSNS_LEARNED, Chr(10), " "))
            End If
            
            CUSTOMER_FEEDBACK = StWB(i, 16)
            If Len(CUSTOMER_FEEDBACK) > 4000 Then
                  MsgBox ("Stress Test Data : CUSTOMER_FEEDBACK  is exceeding field limit.")
                  StressTest_WriteBack = False
                  Exit Function
              Else
                  CUSTOMER_FEEDBACK = Replace(CUSTOMER_FEEDBACK, "'", "''")
                  CUSTOMER_FEEDBACK = Application.WorksheetFunction.Clean(Replace(CUSTOMER_FEEDBACK, Chr(10), " "))
            End If
      
            sqlCmd = " INSERT INTO [dbo].[WB_STRESS_TEST_DATA_T ]([ID],[STRESS_TEST_DATE],[STRESS_TEST_NAME],[MANUAL_REFERENCE],[SB_AD_REFERENCE],[OTHER_REFERENCE],[GE_OWNER],[CUSTOMER_OWNER],[TIME_TO_PREPARE],[TIME_TO_EXECUTE],[PROCEDURE_DESCRIPTION],[QUES_RAISED_LSSNS_LEARNED],[CUSTOMER_FEEDBACK] ,[TPP_ID],[ENGINE_MODEL],[AIRLINE_SHORT_NAME],[SSO_ID]  )"
            sqlCmd = sqlCmd & " VALUES('" & HeaderID & "','" & STRESS_TEST_DATE & "', '" & STRESS_TEST_NAME & "','" & MANUAL_REFERENCE & "','" & SB_AD_REFERENCE & "','" & OTHER_REFERENCE & "','" & GE_OWNER & "','" & CUSTOMER_OWNER & "','" & TIME_TO_PREPARE & "','" & TIME_TO_EXECUTE & "','" & PROCEDURE_DESCRIPTION & "','" & QUES_RAISED_LSSNS_LEARNED & "','" & CUSTOMER_FEEDBACK & "','" & TPP_ID & "','" & Engine_Model & "','" & Airline_SHORT_NAME & "', '" & SSO_ID & "') "
            conn.Execute sqlCmd
            
            i = i + 1

        Loop
        
        Erase StWB
    End If
    
    Exit Function
    
errorhandler:

    ErrorFlag = True
    ErrorDesc = ErrorDesc & "Stress Test - " & Err.Description & vbNewLine

End Function

Function FleetProgram_Writeback(HeaderID As String, TPPID As Integer, Engine_Model As String, Airline_SHORT_NAME As String, SSO_ID As String) As Boolean

    ' ================================
    ' Last updated: 11/02/2016
    ' Code by: TCS & Asko Soimakallio
    '=================================
    
    On Error GoTo errorhandler:
    
    Dim sqlCmd As String
    S1 = "Programs Flattened"
    
    FleetProgram_Writeback = True
    Sheets(S1).Activate
    
    RC = Sheets(S1).Cells(Rows.Count, 1).End(xlUp).Row
    CC = Sheets(S1).Cells(1, Columns.Count).End(xlToLeft).Column
    
    'Truncate Table
    sqlCmd = " DELETE FROM WB_FLEET_PROGRAMS_T WHERE TPP_ID = '" & TPPID & "';"
    conn.Execute sqlCmd
    
    If RC > 1 Then
    
        i = 2
        Dim FPwb
        FPwb = Sheets(S1).Range(Sheets(S1).Cells(1, 1), Sheets(S1).Cells(RC, CC)).Value
        
        Do Until i > RC
        
            PROGRAM_NAME = FPwb(i, 1)
            If Len(PROGRAM_NAME) > 300 Then
                MsgBox ("Fleet Programs : PROGRAM_NAME  is exceeding field limit.")
                FleetProgram_Writeback = False
                Exit Function
            Else
                PROGRAM_NAME = Replace(PROGRAM_NAME, "'", "''")
                PROGRAM_NAME = Application.WorksheetFunction.Clean(Replace(PROGRAM_NAME, Chr(10), " "))
            End If
            
            ESN = DummyEngineName("", FPwb(i, 2))
            If Len(ESN) > 100 Then
                MsgBox ("Fleet Programs : ESN  is exceeding field limit.")
                FleetProgram_Writeback = False
                Exit Function
            Else
                ESN = Replace(ESN, "'", "''")
            End If
            
            ENGINE_AFFECTED = FPwb(i, 3)
            If Len(ENGINE_AFFECTED) > 100 Then
                MsgBox ("Fleet Programs : ENGINE_AFFECTED  is exceeding field limit.")
                FleetProgram_Writeback = False
                Exit Function
            Else
                ENGINE_AFFECTED = Replace(ENGINE_AFFECTED, "'", "''")
            End If
            
            HARDWARE_CONFIG = FPwb(i, 4)
            If Len(HARDWARE_CONFIG) > 100 Then
                MsgBox ("Fleet Programs : HARDWARE_CONFIG  is exceeding field limit.")
                FleetProgram_Writeback = False
                Exit Function
            Else
                HARDWARE_CONFIG = Replace(HARDWARE_CONFIG, "'", "''")
            End If
            
            PART_INFO_VALID_DATE = FPwb(i, 5)
            If Len(PART_INFO_VALID_DATE) > 100 Then
                MsgBox ("Fleet Programs : PART_INFO_VALID_DATE  is exceeding field limit.")
                FleetProgram_Writeback = False
                Exit Function
            Else
                PART_INFO_VALID_DATE = Replace(PART_INFO_VALID_DATE, "'", "''")
            End If
            
            PART_AGE_BASIS = FPwb(i, 6)
            If Len(PART_AGE_BASIS) > 100 Then
                MsgBox ("Fleet Programs : PART_AGE_BASIS  is exceeding field limit.")
                FleetProgram_Writeback = False
                Exit Function
            Else
                PART_AGE_BASIS = Replace(PART_AGE_BASIS, "'", "''")
            End If
            
            PART_AGE_ON_VALID_DATE = FPwb(i, 7)
            If IsError(PART_AGE_ON_VALID_DATE) Then PART_AGE_ON_VALID_DATE = "N/A"
            If Len(PART_AGE_ON_VALID_DATE) > 100 Then
                MsgBox ("Fleet Programs : PART_AGE_ON_VALID_DATE  is exceeding field limit.")
                FleetProgram_Writeback = False
                Exit Function
            Else
                PART_AGE_ON_VALID_DATE = Replace(PART_AGE_ON_VALID_DATE, "'", "''")
            End If
            
            PART_AGE_TODAY = FPwb(i, 8)
            If Len(PART_AGE_TODAY) > 100 Then
                MsgBox ("Fleet Programs : PART_AGE_TODAY  is exceeding field limit.")
                FleetProgram_Writeback = False
                Exit Function
            Else
                PART_AGE_TODAY = Replace(PART_AGE_TODAY, "'", "''")
            End If
            
            PARAM_A = FPwb(i, 9)
            If Len(PARAM_A) > 100 Then
                MsgBox ("Fleet Programs : PARAM_A  is exceeding field limit.")
                FleetProgram_Writeback = False
                Exit Function
            Else
                PARAM_A = Replace(PARAM_A, "'", "''")
            End If
            
            PARAM_B = FPwb(i, 10)
            If Len(PARAM_B) > 100 Then
                MsgBox ("Fleet Programs : PARAM_B  is exceeding field limit.")
                FleetProgram_Writeback = False
                Exit Function
            Else
                PARAM_B = Replace(PARAM_B, "'", "''")
            End If
            
            LAST_INSPECTION_DATE = FPwb(i, 11)
            If Len(LAST_INSPECTION_DATE) > 100 Then
                MsgBox ("Fleet Programs : LAST_INSPECTION_DATE  is exceeding field limit.")
                FleetProgram_Writeback = False
                Exit Function
            Else
                LAST_INSPECTION_DATE = Replace(LAST_INSPECTION_DATE, "'", "''")
            End If
            
            INSPECTION_COUNT = FPwb(i, 12)
            If Len(INSPECTION_COUNT) > 100 Then
                MsgBox ("Fleet Programs : INSPECTION_COUNT  is exceeding field limit.")
                FleetProgram_Writeback = False
                Exit Function
            Else
                INSPECTION_COUNT = Replace(INSPECTION_COUNT, "'", "''")
            End If
            
            INSPCTION_THRESHOLD_BASIS = FPwb(i, 13)
            If Len(INSPCTION_THRESHOLD_BASIS) > 100 Then
                MsgBox ("Fleet Programs : INSPCTION_THRESHOLD_BASIS  is exceeding field limit.")
                FleetProgram_Writeback = False
                Exit Function
            Else
                INSPCTION_THRESHOLD_BASIS = Replace(INSPCTION_THRESHOLD_BASIS, "'", "''")
            End If
            
            INSPECTION_INTERVAL = FPwb(i, 14)
            If Len(INSPECTION_INTERVAL) > 100 Then
                MsgBox ("Fleet Programs : INSPECTION_INTERVAL  is exceeding field limit.")
                FleetProgram_Writeback = False
                Exit Function
            Else
                INSPECTION_INTERVAL = Replace(INSPECTION_INTERVAL, "'", "''")
            End If
            
            CALCULATED_NEXT_INSPECTION = FPwb(i, 15)
            If Len(CALCULATED_NEXT_INSPECTION) > 100 Then
                MsgBox ("Fleet Programs : CALCULATED_NEXT_INSPECTION  is exceeding field limit.")
                FleetProgram_Writeback = False
                Exit Function
            Else
                CALCULATED_NEXT_INSPECTION = Replace(CALCULATED_NEXT_INSPECTION, "'", "''")
            End If
            
            HIGH_PROBABILITY_REMOVAL = FPwb(i, 16)
            If Len(HIGH_PROBABILITY_REMOVAL) > 100 Then
                MsgBox ("Fleet Programs : HIGH_PROBABILITY_REMOVAL  is exceeding field limit.")
                FleetProgram_Writeback = False
                Exit Function
            Else
                HIGH_PROBABILITY_REMOVAL = Replace(HIGH_PROBABILITY_REMOVAL, "'", "''")
            End If
            
            PART_TARGET_LIFE = FPwb(i, 17)
            If Len(PART_TARGET_LIFE) > 100 Then
                MsgBox ("Fleet Programs : PART_TARGET_LIFE  is exceeding field limit.")
                FleetProgram_Writeback = False
                Exit Function
            Else
                PART_TARGET_LIFE = Replace(PART_TARGET_LIFE, "'", "''")
            End If
            
            OVERRIDE_INSPECTION_DATE = FPwb(i, 18)
            If Len(OVERRIDE_INSPECTION_DATE) > 100 Then
                MsgBox ("Fleet Programs : OVERRIDE_INSPECTION_DATE  is exceeding field limit.")
                FleetProgram_Writeback = False
                Exit Function
            Else
                OVERRIDE_INSPECTION_DATE = Replace(OVERRIDE_INSPECTION_DATE, "'", "''")
            End If
            
            OVERRIDE_REMOVAL_DATE = FPwb(i, 19)
            If Len(OVERRIDE_REMOVAL_DATE) > 100 Then
                MsgBox ("Fleet Programs : OVERRIDE_REMOVAL_DATE  is exceeding field limit.")
                FleetProgram_Writeback = False
                Exit Function
            Else
                OVERRIDE_REMOVAL_DATE = Replace(OVERRIDE_REMOVAL_DATE, "'", "''")
            End If
            
            OVERRIDE_PROGRAM_TAT = FPwb(i, 20)
            If Len(OVERRIDE_PROGRAM_TAT) > 100 Then
                MsgBox ("Fleet Programs : OVERRIDE_PROGRAM_TAT  is exceeding field limit.")
                FleetProgram_Writeback = False
                Exit Function
            Else
                OVERRIDE_PROGRAM_TAT = Replace(OVERRIDE_PROGRAM_TAT, "'", "''")
            End If
            
            CLOSE_ZERO_AT_NEXT_INTERVAL = FPwb(i, 21)
            If Len(CLOSE_ZERO_AT_NEXT_INTERVAL) > 100 Then
                MsgBox ("Fleet Programs : CLOSE_ZERO_AT_NEXT_INTERVAL  is exceeding field limit.")
                FleetProgram_Writeback = False
                Exit Function
            Else
                CLOSE_ZERO_AT_NEXT_INTERVAL = Replace(CLOSE_ZERO_AT_NEXT_INTERVAL, "'", "''")
            End If
            
            SELECTED_INSPECTION_DATE = FPwb(i, 22)
            If Len(SELECTED_INSPECTION_DATE) > 100 Then
                MsgBox ("Fleet Programs : SELECTED_INSPECTION_DATE  is exceeding field limit.")
                FleetProgram_Writeback = False
                Exit Function
            Else
                SELECTED_INSPECTION_DATE = Replace(SELECTED_INSPECTION_DATE, "'", "''")
            End If
            
            SELECTED_REMOVAL_DATE = FPwb(i, 23)
            If Len(SELECTED_REMOVAL_DATE) > 100 Then
                MsgBox ("Fleet Programs : SELECTED_REMOVAL_DATE  is exceeding field limit.")
                FleetProgram_Writeback = False
                Exit Function
            Else
                SELECTED_REMOVAL_DATE = Replace(SELECTED_REMOVAL_DATE, "'", "''")
            End If
            
            ADOPTION = FPwb(i, 24)
            If Len(ADOPTION) > 100 Then
                MsgBox ("Fleet Programs : ADOPTION  is exceeding field limit.")
                FleetProgram_Writeback = False
                Exit Function
            Else
                ADOPTION = Replace(ADOPTION, "'", "''")
            End If
        
            sqlCmd = "INSERT INTO [dbo].[WB_FLEET_PROGRAMS_T]  (  [ID],[PROGRAM_NAME] ,[ESN] , [ENGINE_AFFECTED] , [HARDWARE_CONFIG] , [PART_INFO_VALID_DATE] ,    [PART_AGE_BASIS] ,  [PART_AGE_ON_VALID_DATE] ,  [PART_AGE_TODAY], "
            sqlCmd = sqlCmd & " [PARAM_A] , [PARAM_B] , [LAST_INSPECTION_DATE] ,    [INSPECTION_COUNT] ,    [INSPCTION_THRESHOLD_BASIS] ,   [INSPECTION_INTERVAL] , [CALCULATED_NEXT_INSPECTION], "
            sqlCmd = sqlCmd & " [HIGH_PROBABILITY_REMOVAL] ,    [PART_TARGET_LIFE] ,    [OVERRIDE_INSPECTION_DATE] ,    [OVERRIDE_REMOVAL_DATE] ,   [OVERRIDE_PROGRAM_TAT] ,"
            sqlCmd = sqlCmd & " [CLOSE_ZERO_AT_NEXT_INTERVAL] , [SELECTED_INSPECTION_DATE] ,    [SELECTED_REMOVAL_DATE] ,   [ADOPTION] ,    [TPP_ID] ,  [ENGINE_MODEL] ,    [AIRLINE_SHORT_NAME],[SSO_ID] )"
            
            sqlCmd = sqlCmd & " VALUES('" & HeaderID & "','" & PROGRAM_NAME & "', '" & ESN & "','" & ENGINE_AFFECTED & "','" & HARDWARE_CONFIG & "','" & PART_INFO_VALID_DATE & "','" & PART_AGE_BASIS & "','" & PART_AGE_ON_VALID_DATE & "','" & PART_AGE_TODAY & "','" & PARAM_A & "', "
            sqlCmd = sqlCmd & " '" & PARAM_B & "', '" & LAST_INSPECTION_DATE & "','" & INSPECTION_COUNT & "','" & INSPCTION_THRESHOLD_BASIS & "','" & INSPECTION_INTERVAL & "','" & CALCULATED_NEXT_INSPECTION & "','" & HIGH_PROBABILITY_REMOVAL & "','" & PART_TARGET_LIFE & "','" & OVERRIDE_INSPECTION_DATE & "', "
            sqlCmd = sqlCmd & " '" & OVERRIDE_REMOVAL_DATE & "', '" & OVERRIDE_PROGRAM_TAT & "','" & CLOSE_ZERO_AT_NEXT_INTERVAL & "','" & SELECTED_INSPECTION_DATE & "','" & SELECTED_REMOVAL_DATE & "','" & ADOPTION & "' "
            sqlCmd = sqlCmd & " ,'" & TPPID & "','" & Engine_Model & "','" & Airline_SHORT_NAME & "', '" & SSO_ID & "') "
            
            conn.Execute sqlCmd
            i = i + 1
        Loop
        
        Erase FPwb

    End If
    Exit Function
errorhandler:
    
    ErrorFlag = True
    ErrorDesc = ErrorDesc & "Fleet Program - " & Err.Description & vbNewLine

End Function


Function CalculationSrc3_Writeback(HeaderID As String, TPPID As Integer, Engine_Model As String, Airline_SHORT_NAME As String, SSO_ID As String) As Boolean

    ' ================================
    ' Last updated: 11/02/2016
    ' Code by: TCS & Asko Soimakallio
    '=================================

    On Error GoTo errorhandler:
    Dim sqlCmd As String
    S1 = "Programs Flattened"
    
    CalculationSrc3_Writeback = True
    Sheets(S1).Activate
    
    RC = Sheets(S1).Cells(Rows.Count, 1).End(xlUp).Row
    CC = Sheets(S1).Cells(1, Columns.Count).End(xlToLeft).Column
    
    'Truncate Table
    sqlCmd = " DELETE FROM [WB_CALCULATION_SRC_3] WHERE TPP_ID = '" & TPPID & "';"
    conn.Execute sqlCmd
    
    If RC > 1 Then
        
        Dim Pwb
        Pwb = Sheets(S1).Range(Sheets(S1).Cells(1, 1), Sheets(S1).Cells(RC, CC)).Value
        
        i = 2
        
        Do Until i > RC
        
            FDM_EFFECTIVITY = Pwb(i, 25)
            If Len(FDM_EFFECTIVITY) > 100 Then
                MsgBox ("Calculation Source : FDM_EFFECTIVITY  is exceeding field limit.")
                CalculationSrc3_Writeback = False
                Exit Function
            Else
                FDM_EFFECTIVITY = Replace(FDM_EFFECTIVITY, "'", "''")
            End If
            
            FDM_PART_AGE_DATE = Pwb(i, 26)
            If Len(FDM_PART_AGE_DATE) > 100 Then
                MsgBox ("Calculation Source : FDM_PART_AGE_DATE  is exceeding field limit.")
                CalculationSrc3_Writeback = False
                Exit Function
            Else
                FDM_PART_AGE_DATE = Replace(FDM_PART_AGE_DATE, "'", "''")
            End If
            
            FDM_PART_AGE = Pwb(i, 27)
            If Len(FDM_PART_AGE) > 100 Then
                MsgBox ("Calculation Source : FDM_PART_AGE  is exceeding field limit.")
                CalculationSrc3_Writeback = False
                Exit Function
            Else
                FDM_PART_AGE = Replace(FDM_PART_AGE, "'", "''")
            End If
            
            LAST_INSPECTION = Pwb(i, 28)
            If Len(LAST_INSPECTION) > 100 Then
                MsgBox ("Calculation Source : LAST_INSPECTION  is exceeding field limit.")
                CalculationSrc3_Writeback = False
                Exit Function
            Else
                LAST_INSPECTION = Replace(LAST_INSPECTION, "'", "''")
            End If
            
            Repeat_Count = Pwb(i, 29)
            If Len(Repeat_Count) > 100 Then
                MsgBox ("Calculation Source : Repeat_Count  is exceeding field limit.")
                CalculationSrc3_Writeback = False
                Exit Function
            Else
                Repeat_Count = Replace(Repeat_Count, "'", "''")
            End If
            
            INTERVAL_BASIS = Pwb(i, 30)
            If Len(INTERVAL_BASIS) > 100 Then
                MsgBox ("Calculation Source : INTERVAL_BASIS  is exceeding field limit.")
                CalculationSrc3_Writeback = False
                Exit Function
            Else
                INTERVAL_BASIS = Replace(INTERVAL_BASIS, "'", "''")
            End If
            
            INTERVAL_VALUE = Pwb(i, 31)
            If Len(INTERVAL_VALUE) > 100 Then
                MsgBox ("Calculation Source : INTERVAL_VALUE  is exceeding field limit.")
                CalculationSrc3_Writeback = False
                Exit Function
            Else
                INTERVAL_VALUE = Replace(INTERVAL_VALUE, "'", "''")
            End If
            
            MODE_VALUE1 = Pwb(i, 32)
            If Len(MODE_VALUE1) > 100 Then
                MsgBox ("Calculation Source : MODE_VALUE1  is exceeding field limit.")
                CalculationSrc3_Writeback = False
                Exit Function
            Else
                MODE_VALUE1 = Replace(MODE_VALUE1, "'", "''")
            End If
            
            MODEL_VALUE2 = Pwb(i, 33)
            If Len(MODEL_VALUE2) > 100 Then
                MsgBox ("Calculation Source : MODEL_VALUE2  is exceeding field limit.")
                CalculationSrc3_Writeback = False
                Exit Function
            Else
                MODEL_VALUE2 = Replace(MODEL_VALUE2, "'", "''")
            End If
            
            THRESHOLD_DATE = Pwb(i, 34)
            If Len(THRESHOLD_DATE) > 100 Then
                MsgBox ("Calculation Source : THRESHOLD_DATE  is exceeding field limit.")
                CalculationSrc3_Writeback = False
                Exit Function
            Else
                THRESHOLD_DATE = Replace(THRESHOLD_DATE, "'", "''")
            End If
            
            ANALYTICAL_DATE = Pwb(i, 35)
            If Len(ANALYTICAL_DATE) > 100 Then
                MsgBox ("Calculation Source : ANALYTICAL_DATE  is exceeding field limit.")
                CalculationSrc3_Writeback = False
                Exit Function
            Else
                ANALYTICAL_DATE = Replace(ANALYTICAL_DATE, "'", "''")
            End If
            
            INSPECTION_DATE = Pwb(i, 36)
            If Len(INSPECTION_DATE) > 100 Then
                MsgBox ("Calculation Source : INSPECTION_DATE  is exceeding field limit.")
                CalculationSrc3_Writeback = False
                Exit Function
            Else
                INSPECTION_DATE = Replace(INSPECTION_DATE, "'", "''")
            End If
            
            SELECTED_INSPECTION_DATE = Pwb(i, 37)
            If Len(SELECTED_INSPECTION_DATE) > 100 Then
                MsgBox ("Calculation Source : SELECTED_INSPECTION_DATE  is exceeding field limit.")
                CalculationSrc3_Writeback = False
                Exit Function
            Else
                SELECTED_INSPECTION_DATE = Replace(SELECTED_INSPECTION_DATE, "'", "''")
            End If
            
            REMOVAL_DATE = Pwb(i, 38)
            If Len(REMOVAL_DATE) > 100 Then
                MsgBox ("Calculation Source : REMOVAL_DATE  is exceeding field limit.")
                CalculationSrc3_Writeback = False
                Exit Function
            Else
                REMOVAL_DATE = Replace(REMOVAL_DATE, "'", "''")
            End If
            
            WEIBULL_SCORE1 = Pwb(i, 39)
            If Len(WEIBULL_SCORE1) > 100 Then
                MsgBox ("Calculation Source : WEIBULL_SCORE  is exceeding field limit.")
                CalculationSrc3_Writeback = False
                Exit Function
            Else
                WEIBULL_SCORE1 = Replace(WEIBULL_SCORE1, "'", "''")
            End If
            
            WEIBULL_SCORE2 = Pwb(i, 40)
            If Len(WEIBULL_SCORE2) > 100 Then
                MsgBox ("Calculation Source : WEIBULL_SCORE  is exceeding field limit.")
                CalculationSrc3_Writeback = False
                Exit Function
            Else
                WEIBULL_SCORE2 = Replace(WEIBULL_SCORE2, "'", "''")
            End If
            
            RAW_EXPOSURE_SCORE = Pwb(i, 41)
            If Len(RAW_EXPOSURE_SCORE) > 100 Then
                MsgBox ("Calculation Source : RAW_EXPOSURE_SCORE  is exceeding field limit.")
                CalculationSrc3_Writeback = False
                Exit Function
            Else
                RAW_EXPOSURE_SCORE = Replace(RAW_EXPOSURE_SCORE, "'", "''")
            End If
            
            IMPACT_EXPOSURE_SCORE = Pwb(i, 42)
            If Len(IMPACT_EXPOSURE_SCORE) > 100 Then
                MsgBox ("Calculation Source : IMPACT_EXPOSURE_SCORE  is exceeding field limit.")
                CalculationSrc3_Writeback = False
                Exit Function
            Else
                IMPACT_EXPOSURE_SCORE = Replace(IMPACT_EXPOSURE_SCORE, "'", "''")
            End If
            
            M_MB = Pwb(i, 43)
            If Len(M_MB) > 100 Then
                MsgBox ("Calculation Source : M_MB  is exceeding field limit.")
                CalculationSrc3_Writeback = False
                Exit Function
            Else
                M_MB = Replace(M_MB, "'", "''")
            End If
            
            M_GT = Pwb(i, 44)
            If Len(M_GT) > 100 Then
                MsgBox ("Calculation Source : M_GT  is exceeding field limit.")
                CalculationSrc3_Writeback = False
                Exit Function
            Else
                M_GT = Replace(M_GT, "'", "''")
            End If
            
            USER_EFFECTIVITY = Pwb(i, 45)
            If Len(USER_EFFECTIVITY) > 100 Then
                MsgBox ("Calculation Source : USER_EFFECTIVITY  is exceeding field limit.")
                CalculationSrc3_Writeback = False
                Exit Function
            Else
                USER_EFFECTIVITY = Replace(USER_EFFECTIVITY, "'", "''")
            End If
            
            REMOVAL_CLOSEOUT = Pwb(i, 46)
            If Len(REMOVAL_CLOSEOUT) > 100 Then
                MsgBox ("Calculation Source : REMOVAL_CLOSEOUT  is exceeding field limit.")
                CalculationSrc3_Writeback = False
                Exit Function
            Else
                REMOVAL_CLOSEOUT = Replace(REMOVAL_CLOSEOUT, "'", "''")
            End If
            
            AGE_TODAY = Pwb(i, 47)
            If Len(AGE_TODAY) > 100 Then
                MsgBox ("Calculation Source : AGE_TODAY  is exceeding field limit.")
                CalculationSrc3_Writeback = False
                Exit Function
            Else
                AGE_TODAY = Replace(AGE_TODAY, "'", "''")
            End If
            
            ESN = Pwb(i, 2)
            ESN = DummyEngineName("", ESN)
            If Len(ESN) > 100 Then
                MsgBox ("Calculation Source : ESN  is exceeding field limit.")
                CalculationSrc3_Writeback = False
                Exit Function
            Else
                ESN = Replace(ESN, "'", "''")
            End If
            
            FLEET_PROGRAM_NAME = Pwb(i, 1)
            If Len(FLEET_PROGRAM_NAME) > 1000 Then
                MsgBox ("Calculation Source : FLEET_PROGRAM_NAME  is exceeding field limit.")
                CalculationSrc3_Writeback = False
                Exit Function
            Else
                FLEET_PROGRAM_NAME = Replace(FLEET_PROGRAM_NAME, "'", "''")
                FLEET_PROGRAM_NAME = Application.WorksheetFunction.Clean(Replace(FLEET_PROGRAM_NAME, Chr(10), " "))
            End If
            
            sqlCmd = "INSERT INTO [dbo].[WB_CALCULATION_SRC_3]  ( [ID], FDM_EFFECTIVITY ,FDM_PART_AGE_DATE ,FDM_PART_AGE ,LAST_INSPECTION ,REPEAT_COUNT ,INTERVAL_BASIS ,INTERVAL_VALUE ,MODE_VALUE1 , "
            sqlCmd = sqlCmd & " MODEL_VALUE2 ,THRESHOLD_DATE ,ANALYTICAL_DATE ,INSPECTION_DATE ,SELECTED_INSPECTION_DATE ,REMOVAL_DATE ,WEIBULL_SCORE1 , "
            sqlCmd = sqlCmd & " WEIBULL_SCORE2 ,RAW_EXPOSURE_SCORE ,IMPACT_EXPOSURE_SCORE ,M_MB ,M_GT ,USER_EFFECTIVITY ,REMOVAL_CLOSEOUT ,AGE_TODAY,[TPP_ID] ,  [ENGINE_MODEL] ,    [AIRLINE_SHORT_NAME],[SSO_ID] ,[ESN],[FLEET_PROGRAM_NAME]) "
    
            sqlCmd = sqlCmd & " VALUES('" & HeaderID & "','" & FDM_EFFECTIVITY & "', '" & FDM_PART_AGE_DATE & "','" & FDM_PART_AGE & "','" & LAST_INSPECTION & "','" & Repeat_Count & "','" & INTERVAL_BASIS & "','" & INTERVAL_VALUE & "','" & MODE_VALUE1 & "','" & MODEL_VALUE2 & "', "
            sqlCmd = sqlCmd & " '" & THRESHOLD_DATE & "', '" & ANALYTICAL_DATE & "','" & INSPECTION_DATE & "','" & SELECTED_INSPECTION_DATE & "','" & REMOVAL_DATE & "','" & WEIBULL_SCORE1 & "','" & WEIBULL_SCORE2 & "','" & RAW_EXPOSURE_SCORE & "','" & IMPACT_EXPOSURE_SCORE & "', "
            sqlCmd = sqlCmd & " '" & M_MB & "', '" & M_GT & "','" & USER_EFFECTIVITY & "','" & REMOVAL_CLOSEOUT & "','" & AGE_TODAY & "' "
            sqlCmd = sqlCmd & " ,'" & TPPID & "','" & Engine_Model & "','" & Airline_SHORT_NAME & "', '" & SSO_ID & "', '" & ESN & "', '" & FLEET_PROGRAM_NAME & "') "
                
            conn.Execute sqlCmd
            i = i + 1
    
        Loop
        Erase Pwb
        
    End If
    Exit Function
errorhandler:
    
    ErrorFlag = True
    ErrorDesc = ErrorDesc & "Calculation Source - " & Err.Description & vbNewLine
End Function

Function CalculationSrc2_WriteBack(HeaderID As String, TPPID As Integer, Engine_Model As String, Airline_SHORT_NAME As String, SSO_ID As String) As Boolean
 
    ' ================================
    ' Last updated: 9/17/2020
    ' Code by: TCS & Asko Soimakallio
    '=================================
 
    On Error GoTo errorhandler:
    
    Dim sqlCmd As String
    ReadConnectionXML
    OpenSQLConnection
    CalculationSrc2_WriteBack = True
    
    S0 = "Supporting Data"
    S1 = "Calculation Source"
    Sheets(S1).Activate
    RC = Sheets(S1).Cells(Rows.Count, 2).End(xlUp).Row
    CC = Sheets(S1).Cells(8, Columns.Count).End(xlToLeft).Column
    
    Dim LastCell As Double
    
    'Truncate Table
    sqlCmd = " DELETE FROM  WB_CALCULATION_SRC_2 WHERE TPP_ID = '" & TPPID & "';"
    conn.Execute sqlCmd
    
    If RC > 8 Then
        
        Dim CS2wb
        CS2wb = Sheets(S1).Range(Sheets(S1).Cells(1, 1), Sheets(S1).Cells(RC, CC)).Value
        
        Dim i As Integer
        i = 9
         Do Until i > RC
            Engine_Serial_Number = DummyEngineName(i, CS2wb(i, 2))
            If Len(Engine_Serial_Number) > 100 Then
                MsgBox ("Calculation Source : Engine_Serial_Number  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                Engine_Serial_Number = Replace(Engine_Serial_Number, "'", "''")
            End If
            
            Engine_Status = CS2wb(i, 3)
            If Len(Engine_Status) > 100 Then
                MsgBox ("Calculation Source : Engine_Status  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                Engine_Status = Replace(Engine_Status, "'", "''")
            End If
            
            Comments = CS2wb(i, 4)
            If Len(Comments) > 4000 Then
                MsgBox ("Calculation Source : Comments  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                Comments = Replace(Comments, "'", "''")
                Comments = Application.WorksheetFunction.Clean(Replace(Comments, Chr(10), " "))
            End If
            
            Override_AC_Tail_and_Position = CS2wb(i, 6)
            If Len(Override_AC_Tail_and_Position) > 500 Then
                MsgBox ("Calculation Source : Override_AC_Tail_and_Position  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                Override_AC_Tail_and_Position = Replace(Override_AC_Tail_and_Position, "'", "''")
                Override_AC_Tail_and_Position = Application.WorksheetFunction.Clean(Replace(Override_AC_Tail_and_Position, Chr(10), " "))
            End If
            
            Selected_AC_Tail_and_Position = CS2wb(i, 7)
            If Len(Selected_AC_Tail_and_Position) > 100 Then
                MsgBox ("Calculation Source : Selected_AC_Tail_and_Position  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                Selected_AC_Tail_and_Position = Replace(Selected_AC_Tail_and_Position, "'", "''")
            End If
            
            AC_Tail = CS2wb(i, 8)
            If Len(AC_Tail) > 500 Then
                MsgBox ("Calculation Source : AC_Tail  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                AC_Tail = Replace(AC_Tail, "'", "''")
                AC_Tail = Application.WorksheetFunction.Clean(Replace(AC_Tail, Chr(10), " "))
            End If
            
            Manual_Entry_value_Hours = CS2wb(i, 12)
            If Len(Manual_Entry_value_Hours) > 500 Then
                MsgBox ("Calculation Source : Manual_Entry_value_Hours  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                Manual_Entry_value_Hours = Replace(Manual_Entry_value_Hours, "'", "''")
                Manual_Entry_value_Hours = Application.WorksheetFunction.Clean(Replace(Manual_Entry_value_Hours, Chr(10), " "))
            End If
            
            Selected_Utilization_Hours = CS2wb(i, 13)
            If Len(Selected_Utilization_Hours) > 500 Then
                MsgBox ("Calculation Source : Selected_Utilization_Hours  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                Selected_Utilization_Hours = Replace(Selected_Utilization_Hours, "'", "''")
                Selected_Utilization_Hours = Application.WorksheetFunction.Clean(Replace(Selected_Utilization_Hours, Chr(10), " "))
            End If
            '=========================================

            Utilization_selection_modifier = CS2wb(i, 14)
            If Len(Utilization_selection_modifier) > 500 Then
                MsgBox ("Calculation Source : Utilization_selection_modifier  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                Utilization_selection_modifier = Replace(Utilization_selection_modifier, "'", "''")
            End If
            
            Manual_Entry_value_Cycles = CS2wb(i, 15)
            If Len(Manual_Entry_value_Cycles) > 500 Then
                MsgBox ("Calculation Source : Manual_Entry_value_Cycles  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                Manual_Entry_value_Cycles = Replace(Manual_Entry_value_Cycles, "'", "''")
            End If
            
            Selected_Utilization_Cycles = CS2wb(i, 16)
            If Len(Selected_Utilization_Cycles) > 500 Then
                MsgBox ("Calculation Source : Selected_Utilization_Cycles  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                Selected_Utilization_Cycles = Replace(Selected_Utilization_Cycles, "'", "''")
            End If
            
            ENGINE_SERIES = CS2wb(i, 18)
            If Len(ENGINE_SERIES) > 100 Then
                MsgBox ("Calculation Source : ENGINE_SERIES  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                ENGINE_SERIES = Replace(ENGINE_SERIES, "'", "''")
            End If
            
            FPR_tag = CS2wb(i, 19)
            If Len(FPR_tag) > 100 Then
                MsgBox ("Calculation Source : FPR_tag  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                FPR_tag = Replace(FPR_tag, "'", "''")
            End If
            
            Util_Date = CS2wb(i, 20)
            If Len(Util_Date) > 100 Then
                MsgBox ("Calculation Source : Util_Date  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                Util_Date = Replace(Util_Date, "'", "''")
            End If
            
            ETSN = CS2wb(i, 21)
            If Len(ETSN) > 100 Then
                MsgBox ("Calculation Source : ETSN  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                ETSN = Replace(ETSN, "'", "''")
            End If
            
            ECSN = CS2wb(i, 22)
            If Len(ECSN) > 100 Then
                MsgBox ("Calculation Source : ECSN  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                ECSN = Replace(ECSN, "'", "''")
            End If
            
            ETSSV = CS2wb(i, 23)
            If Len(ETSSV) > 100 Then
                MsgBox ("Calculation Source : ETSSV  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                ETSSV = Replace(ETSSV, "'", "''")
            End If
            
            ECSSV = CS2wb(i, 24)
            If Len(ECSSV) > 100 Then
                MsgBox ("Calculation Source : ECSSV  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                ECSSV = Replace(ECSSV, "'", "''")
            End If
            
            TFPR = CS2wb(i, 25)
            If Len(TFPR) > 100 Then
                MsgBox ("Calculation Source : TFPR  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                TFPR = Replace(TFPR, "'", "''")
            End If
            
            CFPR = CS2wb(i, 26)
            If Len(CFPR) > 100 Then
                MsgBox ("Calculation Source : CFPR  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                CFPR = Replace(CFPR, "'", "''")
            End If
            
            ETSI = CS2wb(i, 27)
            If Len(ETSI) > 100 Then
                MsgBox ("Calculation Source : ETSI  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                ETSI = Replace(ETSI, "'", "''")
            End If
            
            ECSI = CS2wb(i, 28)
            If Len(ECSI) > 100 Then
                MsgBox ("Calculation Source : ECSI  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                ECSI = Replace(ECSI, "'", "''")
            End If
            
            ATSN = CS2wb(i, 29)
            If Len(ATSN) > 100 Then
                MsgBox ("Calculation Source : ATSN  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                ATSN = Replace(ATSN, "'", "''")
            End If
            
            ACSN = CS2wb(i, 30)
            If Len(ACSN) > 100 Then
                MsgBox ("Calculation Source : ACSN  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                ACSN = Replace(ACSN, "'", "''")
            End If
            '==================================

            SV_Count = CS2wb(i, 31)
            If Len(SV_Count) > 100 Then
                MsgBox ("Calculation Source : SV_Count  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                SV_Count = Replace(SV_Count, "'", "''")
            End If
            
            FLIGHT_LEG = CS2wb(i, 32)
            If Len(FLIGHT_LEG) > 100 Then
                MsgBox ("Calculation Source : FLIGHT_LEG  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                FLIGHT_LEG = Replace(FLIGHT_LEG, "'", "''")
            End If
            
            Previous_SV_Date = CS2wb(i, 33)
            If Len(Previous_SV_Date) > 100 Then
                MsgBox ("Calculation Source : Previous_SV_Date  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                Previous_SV_Date = Replace(Previous_SV_Date, "'", "''")
            End If
            
            Previous_SV_Reason = CS2wb(i, 34)
            If Len(Previous_SV_Reason) > 1000 Then
                MsgBox ("Calculation Source : Previous_SV_Reason  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                Previous_SV_Reason = Replace(Previous_SV_Reason, "'", "''")
                Previous_SV_Reason = Application.WorksheetFunction.Clean(Replace(Previous_SV_Reason, Chr(10), " "))
            End If
            
            Previous_SV_WS = CS2wb(i, 35)
            If Len(Previous_SV_WS) > 100 Then
                MsgBox ("Calculation Source : Previous_SV_WS  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                Previous_SV_WS = Replace(Previous_SV_WS, "'", "''")
                Previous_SV_WS = Application.WorksheetFunction.Clean(Replace(Previous_SV_WS, Chr(10), " "))
            End If
            '=============================================

            LLP_Valid_Date = CS2wb(i, 37)
            If Len(LLP_Valid_Date) > 500 Then
                MsgBox ("Calculation Source : LLP_Valid_Date  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                LLP_Valid_Date = Replace(LLP_Valid_Date, "'", "''")
            End If
            
            LLP_To_Go = CS2wb(i, 38)
            If Len(LLP_To_Go) > 100 Then
                MsgBox ("Calculation Source : LLP_To_Go  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                LLP_To_Go = Replace(LLP_To_Go, "'", "''")
            End If
            
            ECSN_at_Valid_Date = CS2wb(i, 39)
            If Len(ECSN_at_Valid_Date) > 100 Then
                MsgBox ("Calculation Source : ECSN_at_Valid_Date  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                ECSN_at_Valid_Date = Replace(ECSN_at_Valid_Date, "'", "''")
            End If
            
            Lowest_LLP_Limiter_at_Valid_Date = CS2wb(i, 40)
            If Len(Lowest_LLP_Limiter_at_Valid_Date) > 100 Then
                MsgBox ("Calculation Source : Lowest_LLP_Limiter_at_Valid_Date  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                Lowest_LLP_Limiter_at_Valid_Date = Replace(Lowest_LLP_Limiter_at_Valid_Date, "'", "''")
            End If
            
            LLP_After_first_Removal = CS2wb(i, 41)
            If Len(LLP_After_first_Removal) > 100 Then
                MsgBox ("Calculation Source : LLP_After_first_Removal  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                LLP_After_first_Removal = Replace(LLP_After_first_Removal, "'", "''")
            End If
            
            LLP_Removal_Date = CS2wb(i, 42)
            If Len(LLP_Removal_Date) > 500 Then
                MsgBox ("Calculation Source : LLP_Removal_Date  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                LLP_Removal_Date = Replace(LLP_Removal_Date, "'", "''")
                LLP_Removal_Date = Application.WorksheetFunction.Clean(Replace(LLP_Removal_Date, Chr(10), " "))
            End If
            
            LLP_TAT = CS2wb(i, 43)
            If Len(LLP_TAT) > 100 Then
                MsgBox ("Calculation Source : LLP_TAT  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                LLP_TAT = Replace(LLP_TAT, "'", "''")
            End If
            
            LLP_Removal_Workscope = CS2wb(i, 44)
            If Len(LLP_Removal_Workscope) > 500 Then
                MsgBox ("Calculation Source : LLP_Removal_Workscope  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                LLP_Removal_Workscope = Replace(LLP_Removal_Workscope, "'", "''")
                LLP_Removal_Workscope = Application.WorksheetFunction.Clean(Replace(LLP_Removal_Workscope, Chr(10), " "))
            End If
            
            '============================================

            EGT_Valid_Date = CS2wb(i, 50)
            If Len(EGT_Valid_Date) > 100 Then
                MsgBox ("Calculation Source : EGT_Valid_Date  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                EGT_Valid_Date = Replace(EGT_Valid_Date, "'", "''")
            End If
            
            Last_EGT_Margin_Value = CS2wb(i, 51)
            If Len(Last_EGT_Margin_Value) > 100 Then
                MsgBox ("Calculation Source : Last_EGT_Margin_Value  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                Last_EGT_Margin_Value = Replace(Last_EGT_Margin_Value, "'", "''")
            End If
            
            EGT_Det_Selection_Modifier = CS2wb(i, 52)
            If Len(EGT_Det_Selection_Modifier) > 100 Then
                MsgBox ("Calculation Source : EGT_Det_Selection_Modifier  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                EGT_Det_Selection_Modifier = Replace(EGT_Det_Selection_Modifier, "'", "''")
            End If
            
            Removal_Limiter = CS2wb(i, 53)
            If Len(Removal_Limiter) > 100 Then
                MsgBox ("Calculation Source : Removal_Limiter  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                Removal_Limiter = Replace(Removal_Limiter, "'", "''")
            End If
            
            Manual_Entry_value = CS2wb(i, 54)
            If Len(Manual_Entry_value) > 500 Then
                MsgBox ("Calculation Source : Manual_Entry_value  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                Manual_Entry_value = Replace(Manual_Entry_value, "'", "''")
                Manual_Entry_value = Application.WorksheetFunction.Clean(Replace(Manual_Entry_value, Chr(10), " "))
            End If
            
            Slectd_Dteriortn_Rate = CS2wb(i, 55)
            If Len(Slectd_Dteriortn_Rate) > 100 Then
                MsgBox ("Calculation Source : Slectd_Dteriortn_Rate  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                Slectd_Dteriortn_Rate = Replace(Slectd_Dteriortn_Rate, "'", "''")
            End If
            
            Det_Rate_per_1000_FH = CS2wb(i, 56)
            If Len(Det_Rate_per_1000_FH) > 100 Then
                MsgBox ("Calculation Source : Det_Rate_per_1000_FH  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                Det_Rate_per_1000_FH = Replace(Det_Rate_per_1000_FH, "'", "''")
            End If
            
            Det_Rate_per_1000_FC = CS2wb(i, 57)
            If Len(Det_Rate_per_1000_FC) > 100 Then
                MsgBox ("Calculation Source : Det_Rate_per_1000_FC  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                Det_Rate_per_1000_FC = Replace(Det_Rate_per_1000_FC, "'", "''")
            End If
            
            MXCON_Ignore = CS2wb(i, 58)
            If Len(MXCON_Ignore) > 100 Then
                MsgBox ("Calculation Source : MXCON_Ignore  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                MXCON_Ignore = Replace(MXCON_Ignore, "'", "''")
            End If
            
            MXCON_rate = CS2wb(i, 59)
            If Len(MXCON_rate) > 100 Then
                MsgBox ("Calculation Source : MXCON_rate  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                MXCON_rate = Replace(MXCON_rate, "'", "''")
            End If
            
            MXCON_Date = CS2wb(i, 60)
            If Len(MXCON_Date) > 100 Then
                MsgBox ("Calculation Source : MXCON_Date  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                MXCON_Date = Replace(MXCON_Date, "'", "''")
            End If
            
            EGT_Removal_Date = CS2wb(i, 61)
            If Len(EGT_Removal_Date) > 500 Then
                MsgBox ("Calculation Source : EGT_Removal_Date  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                EGT_Removal_Date = Replace(EGT_Removal_Date, "'", "''")
                EGT_Removal_Date = Application.WorksheetFunction.Clean(Replace(EGT_Removal_Date, Chr(10), " "))
            End If
            
            EGT_TAT = CS2wb(i, 62)
            If Len(EGT_TAT) > 500 Then
                MsgBox ("Calculation Source : EGT_TAT  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                EGT_TAT = Replace(EGT_TAT, "'", "''")
                EGT_TAT = Application.WorksheetFunction.Clean(Replace(EGT_TAT, Chr(10), " "))
            End If
            
            EGT_Removal_Workscope = CS2wb(i, 63)
            If Len(EGT_Removal_Workscope) > 500 Then
                MsgBox ("Calculation Source : EGT_Removal_Workscope  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                EGT_Removal_Workscope = Replace(EGT_Removal_Workscope, "'", "''")
            End If
            
            TO_DERATE = CS2wb(i, 64)
            If Len(TO_DERATE) > 100 Then
                MsgBox ("Calculation Source : TO_DERATE  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                TO_DERATE = Replace(TO_DERATE, "'", "''")
            End If
            
            CL_DERATE = CS2wb(i, 65)
            If Len(CL_DERATE) > 100 Then
                MsgBox ("Calculation Source : CL_DERATE  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                CL_DERATE = Replace(CL_DERATE, "'", "''")
            End If
            '============================================

            Removal_Name_1 = CS2wb(i, 69)
            If Len(Removal_Name_1) > 500 Then
                MsgBox ("Calculation Source : Removal_Name_1  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                Removal_Name_1 = Replace(Removal_Name_1, "'", "''")
                Removal_Name_1 = Application.WorksheetFunction.Clean(Replace(Removal_Name_1, Chr(10), " "))
            End If
            
            Rem_1_WTW_TAT = CS2wb(i, 70)
            If Len(Rem_1_WTW_TAT) > 100 Then
                MsgBox ("Calculation Source : Rem_1_WTW_TAT  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                Rem_1_WTW_TAT = Replace(Rem_1_WTW_TAT, "'", "''")
            End If
            
            Removal_Basis = CS2wb(i, 71)
            If Len(Removal_Basis) > 100 Then
                MsgBox ("Calculation Source : Removal_Basis  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                Removal_Basis = Replace(Removal_Basis, "'", "''")
            End If
            
            Removal_Limiter_Hours_Cycles = CS2wb(i, 72)
            If Len(Removal_Limiter_Hours_Cycles) > 100 Then
                MsgBox ("Calculation Source : Removal_Limiter_Hours_Cycles  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                Removal_Limiter_Hours_Cycles = Replace(Removal_Limiter_Hours_Cycles, "'", "''")
            End If
            
            Removal_Limiter1 = CS2wb(i, 73)
            If Len(Removal_Limiter1) > 100 Then
                MsgBox ("Calculation Source : Removal_Limiter1  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                Removal_Limiter1 = Replace(Removal_Limiter1, "'", "''")
            End If
            
            Rem_1_Removal_Workscope = CS2wb(i, 74)
            If Len(Rem_1_Removal_Workscope) > 500 Then
                MsgBox ("Calculation Source : Rem_1_Removal_Workscope  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                Rem_1_Removal_Workscope = Replace(Rem_1_Removal_Workscope, "'", "''")
                Rem_1_Removal_Workscope = Application.WorksheetFunction.Clean(Replace(Rem_1_Removal_Workscope, Chr(10), " "))
            End If
            
            Rem_1_Date = CS2wb(i, 75)
            If Len(Rem_1_Date) > 100 Then
                MsgBox ("Calculation Source : Rem_1_Date  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                Rem_1_Date = Replace(Rem_1_Date, "'", "''")
            End If
            
            '==================================================

            Removal_Name_2 = CS2wb(i, 80)
            If Len(Removal_Name_2) > 500 Then
                MsgBox ("Calculation Source : Removal_Name  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                Removal_Name_2 = Replace(Removal_Name_2, "'", "''")
                Removal_Name_2 = Application.WorksheetFunction.Clean(Replace(Removal_Name_2, Chr(10), " "))
            End If
            
            Start_Date1 = CS2wb(i, 81)
            If Len(Start_Date1) > 100 Then
                MsgBox ("Calculation Source : Start_Date  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                Start_Date1 = Replace(Start_Date1, "'", "''")
            End If
            
            BASIS = CS2wb(i, 82)
            If Len(BASIS) > 100 Then
                MsgBox ("Calculation Source : BASIS  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                BASIS = Replace(BASIS, "'", "''")
            End If
            
            Interval = CS2wb(i, 83)
            If Len(Interval) > 100 Then
                MsgBox ("Calculation Source : Interval  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                Interval = Replace(Interval, "'", "''")
            End If
            
            Repeat_Count = CS2wb(i, 84)
            If Len(Repeat_Count) > 100 Then
                MsgBox ("Calculation Source : Repeat_Count  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                Repeat_Count = Replace(Repeat_Count, "'", "''")
            End If
            
            Rem_2_WTW_TAT = CS2wb(i, 85)
            If Len(Rem_2_WTW_TAT) > 100 Then
                MsgBox ("Calculation Source : Rem_2_WTW_TAT  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                Rem_2_WTW_TAT = Replace(Rem_2_WTW_TAT, "'", "''")
            End If
            
            Rem_2_Removal_Workscope = CS2wb(i, 86)
            If Len(Rem_2_Removal_Workscope) > 500 Then
                MsgBox ("Calculation Source : Rem_2_Removal_Workscope  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                Rem_2_Removal_Workscope = Replace(Rem_2_Removal_Workscope, "'", "''")
                Rem_2_Removal_Workscope = Application.WorksheetFunction.Clean(Replace(Rem_2_Removal_Workscope, Chr(10), " "))
            End If
            
            Rem_2_Date = CS2wb(i, 87)
            If Len(Rem_2_Date) > 100 Then
                MsgBox ("Calculation Source : Rem_2_Date  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                Rem_2_Date = Replace(Rem_2_Date, "'", "''")
            End If

            '====================================================
            
            Critical_Program = CS2wb(i, 93)
            If Len(Critical_Program) > 4000 Then
                MsgBox ("Calculation Source : Critical_Program  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                Critical_Program = Replace(Critical_Program, "'", "''")
                Critical_Program = Application.WorksheetFunction.Clean(Replace(Critical_Program, Chr(10), " "))
            End If
            
            Program_Removal_Date = CS2wb(i, 94)
            If Len(Program_Removal_Date) > 100 Then
                MsgBox ("Calculation Source : Program_Removal_Date  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                Program_Removal_Date = Replace(Program_Removal_Date, "'", "''")
            End If
            
            Program_Removal_WTW_TAT = CS2wb(i, 95)
            If Len(Program_Removal_WTW_TAT) > 100 Then
                MsgBox ("Calculation Source : Program_Removal_WTW_TAT  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                Program_Removal_WTW_TAT = Replace(Program_Removal_WTW_TAT, "'", "''")
            End If
            
            Program_Removal_Workscope = CS2wb(i, 96)
            If Len(Program_Removal_Workscope) > 100 Then
                MsgBox ("Calculation Source : Program_Removal_Workscope  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                Program_Removal_Workscope = Replace(Program_Removal_Workscope, "'", "''")
            End If
            
            '=======================================================


            RFI_Date_For_Lease_Engines_Unser_Spares = CS2wb(i, 100)
            If Len(RFI_Date_For_Lease_Engines_Unser_Spares) > 100 Then
                MsgBox ("Calculation Source : RFI_Date_For_Lease_Engines_Unser_Spares  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                RFI_Date_For_Lease_Engines_Unser_Spares = Replace(RFI_Date_For_Lease_Engines_Unser_Spares, "'", "''")
            End If
            
            Retirement_Date_For_Lease_Owned_Engines = CS2wb(i, 101)
            If Len(Retirement_Date_For_Lease_Owned_Engines) > 100 Then
                MsgBox ("Calculation Source : Retirement_Date_For_Lease_Owned_Engines  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                Retirement_Date_For_Lease_Owned_Engines = Replace(Retirement_Date_For_Lease_Owned_Engines, "'", "''")
            End If
            
            AC_Retirement = CS2wb(i, 102)
            If Len(AC_Retirement) > 100 Then
                MsgBox ("Calculation Source : AC_Retirement  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                AC_Retirement = Replace(AC_Retirement, "'", "''")
            End If
            '=====================================================
            
            
            SELECTED_REMOVAL_DATE = CS2wb(i, 106)
            If Len(SELECTED_REMOVAL_DATE) > 100 Then
                MsgBox ("Calculation source : SELECTED_REMOVAL_DATE is exceeding limit")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                SELECTED_REMOVAL_DATE = Replace(SELECTED_REMOVAL_DATE, "'", "''")
            End If
            
            SELECTED_REMOVAL_REASON = CS2wb(i, 107)
            If Len(SELECTED_REMOVAL_REASON) > 4000 Then
                MsgBox ("Calculation Source : SELECTED_REMOVAL_REASON  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                SELECTED_REMOVAL_REASON = Replace(SELECTED_REMOVAL_REASON, "'", "''")
                SELECTED_REMOVAL_REASON = Application.WorksheetFunction.Clean(Replace(SELECTED_REMOVAL_REASON, Chr(10), " "))
            End If
            
            SELECTED_WTW_TAT = CS2wb(i, 108)
            If Len(SELECTED_WTW_TAT) > 500 Then
                MsgBox ("Calculation Source : SELECTED_WTW_TAT  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                SELECTED_WTW_TAT = Replace(SELECTED_WTW_TAT, "'", "''")
            End If
            
            CALCULATED_RETURN_TO_SERVICE_DATE = CS2wb(i, 109)
            If Len(CALCULATED_RETURN_TO_SERVICE_DATE) > 100 Then
                MsgBox ("Calculation Source : CALCULATED_RETURN_TO_SERVICE_DATE  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                CALCULATED_RETURN_TO_SERVICE_DATE = Replace(CALCULATED_RETURN_TO_SERVICE_DATE, "'", "''")
            End If
            
            SELECTED_REMOVAL_WORKSCOPE = CS2wb(i, 110)
            If Len(SELECTED_REMOVAL_WORKSCOPE) > 500 Then
                MsgBox ("Calculation Source : SELECTED_REMOVAL_WORKSCOPE  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                SELECTED_REMOVAL_WORKSCOPE = Replace(SELECTED_REMOVAL_WORKSCOPE, "'", "''")
            End If
            
            OVERRIDE_DATE = CS2wb(i, 111)
            If Len(OVERRIDE_DATE) > 100 Then
                MsgBox ("Calculation Source : OVERRIDE_DATE  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                OVERRIDE_DATE = Replace(OVERRIDE_DATE, "'", "''")
            End If
            
            REMOVAL_ETSI = CS2wb(i, 112)
            If Len(REMOVAL_ETSI) > 500 Then
                MsgBox ("Calculation Source : REMOVAL_ETSI  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                REMOVAL_ETSI = Replace(REMOVAL_ETSI, "'", "''")
                REMOVAL_ETSI = Application.WorksheetFunction.Clean(Replace(REMOVAL_ETSI, Chr(10), " "))
            End If
            
            REMOVAL_ECSI = CS2wb(i, 113)
            If Len(REMOVAL_ECSI) > 500 Then
                MsgBox ("Calculation Source : REMOVAL_ECSI  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                REMOVAL_ECSI = Replace(REMOVAL_ECSI, "'", "''")
                REMOVAL_ECSI = Application.WorksheetFunction.Clean(Replace(REMOVAL_ECSI, Chr(10), " "))
            End If
            
            REMOVAL_ETSN = CS2wb(i, 114)
            If Len(REMOVAL_ETSN) > 500 Then
                MsgBox ("Calculation Source : REMOVAL_ETSN  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                REMOVAL_ETSN = Replace(REMOVAL_ETSN, "'", "''")
                REMOVAL_ETSN = Application.WorksheetFunction.Clean(Replace(REMOVAL_ETSN, Chr(10), " "))
            End If
            
            REMOVAL_ECSN = CS2wb(i, 115)
            If Len(REMOVAL_ECSN) > 500 Then
                MsgBox ("Calculation Source : REMOVAL_ECSN  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                REMOVAL_ECSN = Replace(REMOVAL_ECSN, "'", "''")
                REMOVAL_ECSN = Application.WorksheetFunction.Clean(Replace(REMOVAL_ECSN, Chr(10), " "))
            End If
            
            REMOVAL_ETSSV = CS2wb(i, 116)
            If Len(REMOVAL_ETSSV) > 500 Then
                MsgBox ("Calculation Source : REMOVAL_ETSSV  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                REMOVAL_ETSSV = Replace(REMOVAL_ETSSV, "'", "''")
                REMOVAL_ETSSV = Application.WorksheetFunction.Clean(Replace(REMOVAL_ETSSV, Chr(10), " "))
            End If
            
            REMOVAL_ECSSV = CS2wb(i, 117)
            If Len(REMOVAL_ECSSV) > 500 Then
                MsgBox ("Calculation Source : REMOVAL_ECSSV  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                REMOVAL_ECSSV = Replace(REMOVAL_ECSSV, "'", "''")
                REMOVAL_ECSSV = Application.WorksheetFunction.Clean(Replace(REMOVAL_ECSSV, Chr(10), " "))
            End If
            
            REMOVAL_TFPR = CS2wb(i, 118)
            If Len(REMOVAL_TFPR) > 500 Then
                MsgBox ("Calculation Source : REMOVAL_TFPR  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                REMOVAL_TFPR = Replace(REMOVAL_TFPR, "'", "''")
                REMOVAL_TFPR = Application.WorksheetFunction.Clean(Replace(REMOVAL_TFPR, Chr(10), " "))
            End If
            
            REMOVAL_CFPR = CS2wb(i, 119)
            If Len(REMOVAL_CFPR) > 500 Then
                MsgBox ("Calculation Source : REMOVAL_CFPR  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                REMOVAL_CFPR = Replace(REMOVAL_CFPR, "'", "''")
                REMOVAL_CFPR = Application.WorksheetFunction.Clean(Replace(REMOVAL_CFPR, Chr(10), " "))
            End If
            
            SV_COUNT_AT_REMOVAL = CS2wb(i, 120)
            If Len(SV_COUNT_AT_REMOVAL) > 500 Then
                MsgBox ("Calculation Source : SV_COUNT_AT_REMOVAL  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                SV_COUNT_AT_REMOVAL = Replace(SV_COUNT_AT_REMOVAL, "'", "''")
            End If
            
            REPLACING_ENGINE = CS2wb(i, 121)
            If Len(REPLACING_ENGINE) > 500 Then
                MsgBox ("Calculation Source : REPLACING_ENGINE  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                REPLACING_ENGINE = Replace(REPLACING_ENGINE, "'", "''")
            End If
            
            '-=====================================================================

            MIN_CYCLE_LIMITER = CS2wb(i, 126)
            If Len(MIN_CYCLE_LIMITER) > 100 Then
                MsgBox ("Calculation Source : MIN_CYCLE_LIMITER  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                MIN_CYCLE_LIMITER = Replace(MIN_CYCLE_LIMITER, "'", "''")
            End If
            
            MIN_CYCLE_WORKSCOPE = CS2wb(i, 127)
            If Len(MIN_CYCLE_WORKSCOPE) > 100 Then
                MsgBox ("Calculation Source : MIN_CYCLE_WORKSCOPE  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                MIN_CYCLE_WORKSCOPE = Replace(MIN_CYCLE_WORKSCOPE, "'", "''")
            End If
            
            MIN_CYCLE_TAT = CS2wb(i, 128)
            If Len(MIN_CYCLE_TAT) > 100 Then
                MsgBox ("Calculation Source : MIN_CYCLE_TAT  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                MIN_CYCLE_TAT = Replace(MIN_CYCLE_TAT, "'", "''")
            End If
            
            MIN_CYCLES = CS2wb(i, 129)
            If Len(MIN_CYCLES) > 100 Then
                MsgBox ("Calculation Source : MIN_CYCLES  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                MIN_CYCLES = Replace(MIN_CYCLES, "'", "''")
            End If
            
            MIN_HOUR_LIMITER = CS2wb(i, 130)
            If Len(MIN_HOUR_LIMITER) > 100 Then
                MsgBox ("Calculation Source : MIN_HOUR_LIMITER  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                MIN_HOUR_LIMITER = Replace(MIN_HOUR_LIMITER, "'", "''")
            End If
            
            MIN_HOUR_WORKSCOPE = CS2wb(i, 131)
            If Len(MIN_HOUR_WORKSCOPE) > 100 Then
                MsgBox ("Calculation Source : MIN_HOUR_WORKSCOPE  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                MIN_HOUR_WORKSCOPE = Replace(MIN_HOUR_WORKSCOPE, "'", "''")
            End If
            
            MIN_HOUR_TAT = CS2wb(i, 132)
            If Len(MIN_HOUR_TAT) > 100 Then
                MsgBox ("Calculation Source : MIN_HOUR_TAT  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                MIN_HOUR_TAT = Replace(MIN_HOUR_TAT, "'", "''")
            End If
            
            MIN_HOURS = CS2wb(i, 133)
            If Len(MIN_HOURS) > 100 Then
                MsgBox ("Calculation Source : MIN_HOURS  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                MIN_HOURS = Replace(MIN_HOURS, "'", "''")
            End If
            
            MIN_DAY_LIMITER = CS2wb(i, 134)
            If Len(MIN_DAY_LIMITER) > 100 Then
                MsgBox ("Calculation Source : MIN_DAY_LIMITER  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                MIN_DAY_LIMITER = Replace(MIN_DAY_LIMITER, "'", "''")
            End If
            
            MIN_DAY_WORKSCOPE = CS2wb(i, 135)
            If Len(MIN_DAY_WORKSCOPE) > 100 Then
                MsgBox ("Calculation Source : MIN_DAY_WORKSCOPE  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                MIN_DAY_WORKSCOPE = Replace(MIN_DAY_WORKSCOPE, "'", "''")
            End If
            
            MIN_DAY_TAT = CS2wb(i, 136)
            If Len(MIN_DAY_TAT) > 100 Then
                MsgBox ("Calculation Source : MIN_DAY_TAT  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                MIN_DAY_TAT = Replace(MIN_DAY_TAT, "'", "''")
            End If
            
            MIN_DAYS = CS2wb(i, 137)
            If Len(MIN_DAYS) > 100 Then
                MsgBox ("Calculation Source : MIN_DAYS  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                MIN_DAYS = Replace(MIN_DAYS, "'", "''")
            End If
            
            '======================================================================
            
            
            LIMITER_BASIS = CS2wb(i, 138)
            If Len(LIMITER_BASIS) > 100 Then
                MsgBox ("Calculation Source : LIMITER_BASIS  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                LIMITER_BASIS = Replace(LIMITER_BASIS, "'", "''")
            End If
            
            LIMITER_VALUE = CS2wb(i, 139)
            If Len(LIMITER_VALUE) > 100 Then
                MsgBox ("Calculation Source : LIMITER_VALUE  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                LIMITER_VALUE = Replace(LIMITER_VALUE, "'", "''")
            End If
            
            LIMITER_TAT = CS2wb(i, 140)
            If Len(LIMITER_TAT) > 100 Then
                MsgBox ("Calculation Source : LIMITER_TAT  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                LIMITER_TAT = Replace(LIMITER_TAT, "'", "''")
            End If
            
            LIMITER_WORKSCOPE = CS2wb(i, 141)
            If Len(LIMITER_WORKSCOPE) > 100 Then
                MsgBox ("Calculation Source : LIMITER_WORKSCOPE  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                LIMITER_WORKSCOPE = Replace(LIMITER_WORKSCOPE, "'", "''")
            End If
            
            SECOND_LIFE_INSTALL_DATE = CS2wb(i, 142)
            If Len(SECOND_LIFE_INSTALL_DATE) > 100 Then
                MsgBox ("Calculation Source : SECOND_LIFE_INSTALL_DATE  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                SECOND_LIFE_INSTALL_DATE = Replace(SECOND_LIFE_INSTALL_DATE, "'", "''")
            End If
            
            SECOND_LIFE_TAIL_AND_POS = CS2wb(i, 143)
            If Len(SECOND_LIFE_TAIL_AND_POS) > 100 Then
                MsgBox ("Calculation Source : SECOND_LIFE_TAIL_AND_POS  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                SECOND_LIFE_TAIL_AND_POS = Replace(SECOND_LIFE_TAIL_AND_POS, "'", "''")
            End If
            
            SECOND_LIFE_UTILIZATION_HOURS = CS2wb(i, 144)
            If Len(SECOND_LIFE_UTILIZATION_HOURS) > 100 Then
                MsgBox ("Calculation Source : SECOND_LIFE_UTILIZATION_HOURS  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                SECOND_LIFE_UTILIZATION_HOURS = Replace(SECOND_LIFE_UTILIZATION_HOURS, "'", "''")
            End If
            
            
            SECOND_LIFE_UTILIZATION_CYCLES = CS2wb(i, 145)
            If Len(SECOND_LIFE_UTILIZATION_CYCLES) > 100 Then
               MsgBox ("Calculation Source : SECOND_LIFE_UTILIZATION_CYCLES is exceeding limit")
               CalculationSrc2_WriteBack = False
               Exit Function
             Else
                SECOND_LIFE_UTILIZATION_CYCLES = Replace(SECOND_LIFE_UTILIZATION_CYCLES, "'", "''")
             End If
            
            SECOND_LIFE_REMOVAL_REASON = CS2wb(i, 146)
            If Len(SECOND_LIFE_REMOVAL_REASON) > 4000 Then
                MsgBox ("Calculation Source : SECOND_LIFE_REMOVAL_REASON  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                SECOND_LIFE_REMOVAL_REASON = Replace(SECOND_LIFE_REMOVAL_REASON, "'", "''")
                SECOND_LIFE_REMOVAL_REASON = Application.WorksheetFunction.Clean(Replace(SECOND_LIFE_REMOVAL_REASON, Chr(10), " "))
            End If
            
            SECOND_LIFE_REMOVAL_DATE = CS2wb(i, 147)
            If Len(SECOND_LIFE_REMOVAL_DATE) > 100 Then
                MsgBox ("Calculation Source : SECOND_LIFE_REMOVAL_DATE  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                SECOND_LIFE_REMOVAL_DATE = Replace(SECOND_LIFE_REMOVAL_DATE, "'", "''")
            End If
            
            SECOND_LIFE_TAT = CS2wb(i, 148)
            If Len(SECOND_LIFE_TAT) > 100 Then
                MsgBox ("Calculation Source : SECOND_LIFE_TAT  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                SECOND_LIFE_TAT = Replace(SECOND_LIFE_TAT, "'", "''")
            End If
            
            SECOND_LIFE_RFI_DATE = CS2wb(i, 149)
            If Len(SECOND_LIFE_RFI_DATE) > 100 Then
                MsgBox ("Calculation Source : SECOND_LIFE_RFI_DATE  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                SECOND_LIFE_RFI_DATE = Replace(SECOND_LIFE_RFI_DATE, "'", "''")
            End If
            
            SECOND_LIFE_WORKSCOPE = CS2wb(i, 150)
            If Len(SECOND_LIFE_WORKSCOPE) > 100 Then
                MsgBox ("Calculation Source : SECOND_LIFE_WORKSCOPE  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                SECOND_LIFE_WORKSCOPE = Replace(SECOND_LIFE_WORKSCOPE, "'", "''")
            End If
            
            SECOND_LIFE_ETSI = CS2wb(i, 151)
            If Len(SECOND_LIFE_ETSI) > 100 Then
                MsgBox ("Calculation Source : SECOND_LIFE_ETSI  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                SECOND_LIFE_ETSI = Replace(SECOND_LIFE_ETSI, "'", "''")
            End If
            
            SECOND_LIFE_ECSI = CS2wb(i, 152)
            If Len(SECOND_LIFE_ECSI) > 100 Then
                MsgBox ("Calculation Source : SECOND_LIFE_ECSI  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                SECOND_LIFE_ECSI = Replace(SECOND_LIFE_ECSI, "'", "''")
            End If
            
            SECOND_LIFE_ETSN = CS2wb(i, 153)
            If Len(SECOND_LIFE_ETSN) > 100 Then
                MsgBox ("Calculation Source : SECOND_LIFE_ETSN  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                SECOND_LIFE_ETSN = Replace(SECOND_LIFE_ETSN, "'", "''")
            End If
            
            SECOND_LIFE_ECSN = CS2wb(i, 154)
            If Len(SECOND_LIFE_ECSN) > 100 Then
                MsgBox ("Calculation Source : SECOND_LIFE_ECSN  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                SECOND_LIFE_ECSN = Replace(SECOND_LIFE_ECSN, "'", "''")
            End If
            
            SECOND_LIFE_ETSSV = CS2wb(i, 155)
            If Len(SECOND_LIFE_ETSSV) > 100 Then
                MsgBox ("Calculation Source : SECOND_LIFE_ETSSV  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                SECOND_LIFE_ETSSV = Replace(SECOND_LIFE_ETSSV, "'", "''")
            End If
            
            SECOND_LIFE_ECSSV = CS2wb(i, 156)
            If Len(SECOND_LIFE_ECSSV) > 100 Then
                MsgBox ("Calculation Source : SECOND_LIFE_ECSSV  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                SECOND_LIFE_ECSSV = Replace(SECOND_LIFE_ECSSV, "'", "''")
            End If
            
            SECOND_LIFE_TFPR = CS2wb(i, 157)
            If Len(SECOND_LIFE_TFPR) > 100 Then
                MsgBox ("Calculation Source : SECOND_LIFE_TFPR  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                SECOND_LIFE_TFPR = Replace(SECOND_LIFE_TFPR, "'", "''")
            End If
            
            SECOND_LIFE_CFPR = CS2wb(i, 158)
            If Len(SECOND_LIFE_CFPR) > 100 Then
                MsgBox ("Calculation Source : SECOND_LIFE_CFPR  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                SECOND_LIFE_CFPR = Replace(SECOND_LIFE_CFPR, "'", "''")
            End If
            
            SECOND_LIFE_SV_COUNT = CS2wb(i, 159)
            If Len(SECOND_LIFE_SV_COUNT) > 100 Then
                MsgBox ("Calculation Source : SECOND_LIFE_SV_COUNT  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                SECOND_LIFE_SV_COUNT = Replace(SECOND_LIFE_SV_COUNT, "'", "''")
            End If
            
            '================================================================
                       
            TOTAL_GROUND_TIME = CS2wb(i, 162)
            If Len(TOTAL_GROUND_TIME) > 100 Then
                MsgBox ("Calculation Source : TOTAL_GROUND_TIME  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                TOTAL_GROUND_TIME = Replace(TOTAL_GROUND_TIME, "'", "''")
            End If
            
            FP_QUALITY = CS2wb(i, 165)
            If FP_QUALITY <> "" And IsNumeric(FP_QUALITY) = False Then
                MsgBox ("Calculation Source : FP_QUALITY is not valid number.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                FP_QUALITY = Replace(FP_QUALITY, "'", "''")
            End If
            
            ALERTS = CS2wb(i, 166)
            If Len(ALERTS) > 100 Then
                MsgBox ("Calculation Source : ALERTS  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                ALERTS = Replace(ALERTS, "'", "''")
            End If
                       
           
            TOTAL_MPD = CS2wb(i, 168)
            If Len(TOTAL_MPD) > 100 Then
                MsgBox ("Calculation Source : TOTAL_MPD  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                TOTAL_MPD = Replace(TOTAL_MPD, "'", "''")
            End If
            
            TOTAL_WW = CS2wb(i, 169)
            If Len(TOTAL_WW) > 100 Then
                MsgBox ("Calculation Source : TOTAL_WW  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                TOTAL_WW = Replace(TOTAL_WW, "'", "''")
            End If
            
            TOTAL_CEOD = CS2wb(i, 170)
            If Len(TOTAL_CEOD) > 100 Then
                MsgBox ("Calculation Source : TOTAL_CEOD  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                TOTAL_CEOD = Replace(TOTAL_CEOD, "'", "''")
            End If
            
            TOTAL_CNR = CS2wb(i, 171)
            If Len(TOTAL_CNR) > 100 Then
                MsgBox ("Calculation Source : TOTAL_CNR  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                TOTAL_CNR = Replace(TOTAL_CNR, "'", "''")
            End If
            
            TOTAL_PROG = CS2wb(i, 172)
            If Len(TOTAL_PROG) > 100 Then
                MsgBox ("Calculation Source : TOTAL_PROG  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                TOTAL_PROG = Replace(TOTAL_PROG, "'", "''")
            End If
            
            TOTAL_REM = CS2wb(i, 173)
            If Len(TOTAL_REM) > 100 Then
                MsgBox ("Calculation Source : TOTAL_REM  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                TOTAL_REM = Replace(TOTAL_REM, "'", "''")
            End If
            
            TOTAL_MAINTENANCE_BURDEN = CS2wb(i, 174)
            If Len(TOTAL_MAINTENANCE_BURDEN) > 100 Then
                MsgBox ("Calculation Source : TOTAL_MAINTENANCE_BURDEN  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                TOTAL_MAINTENANCE_BURDEN = Replace(TOTAL_MAINTENANCE_BURDEN, "'", "''")
            End If
            
            '===========================================================================
        
            FM_CYCLES = ""
            FM_REMOVAL_DATE = ""
            FM_REASON = ""
            FM_REASON_PROBABILITY = ""
            FM_TAT = ""
            FM_RFI_DATE = ""
            FM_WORKSCOPE = ""
            FM_MIN_LLP = ""
            BYPASS_FLEET_MODEL = ""
        
            ORIGINAL_REMOVAL_DATE = CS2wb(i, 104)
            If Len(ORIGINAL_REMOVAL_DATE) > 100 Then
                MsgBox ("Calculation Source : ORIGINAL_REMOVAL_DATE  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                ORIGINAL_REMOVAL_DATE = Replace(ORIGINAL_REMOVAL_DATE, "'", "''")
            End If
            
            OPTIMIZER_DATE = CS2wb(i, 105)
            If Len(OPTIMIZER_DATE) > 100 Then
                MsgBox ("Calculation Source : OPTIMIZER_DATE  is exceeding field limit.")
                CalculationSrc2_WriteBack = False
                Exit Function
            Else
                OPTIMIZER_DATE = Replace(OPTIMIZER_DATE, "'", "''")
            End If
        
            sqlCmd = "INSERT INTO  [dbo].[WB_CALCULATION_SRC_2] (  [ID],[Engine_Serial_Number],[Engine_Status],[Comments],[Override_AC_Tail_and_Position],[Selected_AC_Tail_and_Position],[AC_Tail],[Manual_Entry_value_Hours],[Selected_Utilization_Hours],[Utilization_selection_modifier],[Manual_Entry_value_Cycles],"
            sqlCmd = sqlCmd & "  [Selected_Utilization_Cycles],[Engine_Series],[FPR_tag],[Util_Date],[ETSN],[ECSN],[ETSSV],[ECSSV],[TFPR],[CFPR],"
            sqlCmd = sqlCmd & "   [ETSI],[ECSI],[ATSN],[ACSN],[SV_Count],[Flight_Leg],[Previous_SV_Date],[Previous_SV_Reason],[Previous_SV_WS],[LLP_Valid_Date],"
            sqlCmd = sqlCmd & "   [LLP_To_Go],[ECSN_at_Valid_Date],[Lowest_LLP_Limiter_at_Valid_Date],[LLP_After_first_Removal],[LLP_Removal_Date],[LLP_TAT],[LLP_Removal_Workscope],[EGT_Valid_Date],[Last_EGT_Margin_Value],[EGT_Det_Selection_Modifier],"
            sqlCmd = sqlCmd & "   [Removal_Limiter],[Manual_Entry_value],[Slectd_Dteriortn_Rate],[Det_Rate_per_1000_FH],[Det_Rate_per_1000_FC],[MXCON_Ignore],[MXCON_rate],[MXCON_Date],[EGT_Removal_Date],[EGT_TAT],"
            sqlCmd = sqlCmd & "   [EGT_Removal_Workscope],[TO_DERATE],[CL_DERATE],[Removal_Name_1],[Rem_1_WTW_TAT],[Removal_Basis],[Removal_Limiter_Hours_Cycles],[Removal_Limiter1],[Rem_1_Removal_Workscope],[Rem_1_Date],"
            sqlCmd = sqlCmd & "    [Removal_Name_2],[Start_Date1],[Basis],[Interval],[Repeat_Count],[Rem_2_WTW_TAT],[Rem_2_Removal_Workscope],[Rem_2_Date],[Critical_Program],[Program_Removal_Date],"
            sqlCmd = sqlCmd & "     [Program_Removal_WTW_TAT],[Program_Removal_Workscope],[RFI_Date_For_Lease_Engines_Unser_Spares],[Retirement_Date_For_Lease_Owned_Engines],[AC_Retirement],[SELECTED_REMOVAL_DATE],[SELECTED_REMOVAL_REASON],[SELECTED_WTW_TAT    ],[CALCULATED_RETURN_TO_SERVICE_DATE    ],[SELECTED_REMOVAL_WORKSCOPE ],"
            sqlCmd = sqlCmd & "   [OVERRIDE_DATE    ],[REMOVAL_ETSI    ],[REMOVAL_ECSI    ],[REMOVAL_ETSN    ],[REMOVAL_ECSN    ],[REMOVAL_ETSSV    ],[REMOVAL_ECSSV    ],[REMOVAL_TFPR    ],[REMOVAL_CFPR    ],[SV_COUNT_AT_REMOVAL    ],"
            sqlCmd = sqlCmd & "    [REPLACING_ENGINE    ],[MIN_CYCLE_LIMITER      ],[MIN_CYCLE_WORKSCOPE      ],[MIN_CYCLE_TAT      ],[MIN_CYCLES      ],[MIN_HOUR_LIMITER      ],[MIN_HOUR_WORKSCOPE      ],[MIN_HOUR_TAT      ],[MIN_HOURS      ],[MIN_DAY_LIMITER      ],"
            sqlCmd = sqlCmd & "   [MIN_DAY_WORKSCOPE      ],[MIN_DAY_TAT       ],[MIN_DAYS      ],[LIMITER_BASIS      ],[LIMITER_VALUE      ],[LIMITER_TAT      ],[LIMITER_WORKSCOPE      ],[SECOND_LIFE_INSTALL_DATE     ],[SECOND_LIFE_TAIL_AND_POS      ],[SECOND_LIFE_UTILIZATION_HOURS      ],"
            sqlCmd = sqlCmd & "  [SECOND_LIFE_UTILIZATION_CYCLES ],[SECOND_LIFE_REMOVAL_REASON ],[SECOND_LIFE_REMOVAL_DATE],[SECOND_LIFE_TAT ],[SECOND_LIFE_RFI_DATE    ],[SECOND_LIFE_WORKSCOPE      ],[SECOND_LIFE_ETSI      ],[SECOND_LIFE_ECSI      ],[SECOND_LIFE_ETSN      ],[SECOND_LIFE_ECSN      ],"
            sqlCmd = sqlCmd & "   [SECOND_LIFE_ETSSV      ],[SECOND_LIFE_ECSSV      ],[SECOND_LIFE_TFPR      ],[SECOND_LIFE_CFPR      ],[SECOND_LIFE_SV_COUNT      ],[TOTAL_MAINTENANCE_BURDEN      ],[TOTAL_GROUND_TIME      ],[TOTAL_MPD      ],[ALERTS      ],"
            sqlCmd = sqlCmd & "   [TPP_ID    ],[ENGINE_MODEL       ],[AIRLINE_SHORT_NAME     ] ,[SSO_ID],[FP_QUALITY],[FM_CYCLES],[FM_REMOVAL_DATE],[FM_REASON],[FM_REASON_PROBABILITY],[FM_TAT],[FM_RFI_DATE],[FM_WORKSCOPE],[FM_MIN_LLP],[BYPASS_FLEET_MODEL] , [ORIGINAL_REMOVAL_DATE], [OPTIMIZER_DATE],"
            sqlCmd = sqlCmd & "   [TOTAL_WW],[TOTAL_CEOD],[TOTAL_CNR] ,[TOTAL_PROG],[TOTAL_REM])"
            sqlCmd = sqlCmd & " VALUES( '" & HeaderID & "','" & Engine_Serial_Number & "','" & Engine_Status & "','" & Comments & "','" & Override_AC_Tail_and_Position & "','" & Selected_AC_Tail_and_Position & "','" & AC_Tail & "','" & Manual_Entry_value_Hours & "','" & Selected_Utilization_Hours & "','" & Utilization_selection_modifier & "','" & Manual_Entry_value_Cycles & "',"
            sqlCmd = sqlCmd & "  '" & Selected_Utilization_Cycles & "','" & ENGINE_SERIES & "','" & FPR_tag & "','" & Util_Date & "','" & ETSN & "','" & ECSN & "','" & ETSSV & "','" & ECSSV & "','" & TFPR & "','" & CFPR & "',"
            sqlCmd = sqlCmd & "   '" & ETSI & "','" & ECSI & "','" & ATSN & "','" & ACSN & "','" & SV_Count & "','" & FLIGHT_LEG & "','" & Previous_SV_Date & "','" & Previous_SV_Reason & "','" & Previous_SV_WS & "','" & LLP_Valid_Date & "',"
            sqlCmd = sqlCmd & "   '" & LLP_To_Go & "','" & ECSN_at_Valid_Date & "','" & Lowest_LLP_Limiter_at_Valid_Date & "','" & LLP_After_first_Removal & "','" & LLP_Removal_Date & "','" & LLP_TAT & "','" & LLP_Removal_Workscope & "','" & EGT_Valid_Date & "','" & Last_EGT_Margin_Value & "','" & EGT_Det_Selection_Modifier & "',"
            sqlCmd = sqlCmd & "   '" & Removal_Limiter & "','" & Manual_Entry_value & "','" & Slectd_Dteriortn_Rate & "','" & Det_Rate_per_1000_FH & "','" & Det_Rate_per_1000_FC & "','" & MXCON_Ignore & "','" & MXCON_rate & "','" & MXCON_Date & "','" & EGT_Removal_Date & "','" & EGT_TAT & "',"
            sqlCmd = sqlCmd & "   '" & EGT_Removal_Workscope & "','" & TO_DERATE & "','" & CL_DERATE & "','" & Removal_Name_1 & "','" & Rem_1_WTW_TAT & "','" & Removal_Basis & "','" & Removal_Limiter_Hours_Cycles & "','" & Removal_Limiter1 & "','" & Rem_1_Removal_Workscope & "','" & Rem_1_Date & "',"
            sqlCmd = sqlCmd & "    '" & Removal_Name_2 & "','" & Start_Date1 & "','" & BASIS & "','" & Interval & "','" & Repeat_Count & "','" & Rem_2_WTW_TAT & "','" & Rem_2_Removal_Workscope & "','" & Rem_2_Date & "','" & Critical_Program & "','" & Program_Removal_Date & "',"
            sqlCmd = sqlCmd & "     '" & Program_Removal_WTW_TAT & "','" & Program_Removal_Workscope & "','" & RFI_Date_For_Lease_Engines_Unser_Spares & "','" & Retirement_Date_For_Lease_Owned_Engines & "','" & AC_Retirement & "','" & SELECTED_REMOVAL_DATE & "','" & SELECTED_REMOVAL_REASON & "','" & SELECTED_WTW_TAT & "','" & CALCULATED_RETURN_TO_SERVICE_DATE & "','" & SELECTED_REMOVAL_WORKSCOPE & "',"
            sqlCmd = sqlCmd & "   '" & OVERRIDE_DATE & "','" & REMOVAL_ETSI & "','" & REMOVAL_ECSI & "','" & REMOVAL_ETSN & "','" & REMOVAL_ECSN & "','" & REMOVAL_ETSSV & "','" & REMOVAL_ECSSV & "','" & REMOVAL_TFPR & "','" & REMOVAL_CFPR & "','" & SV_COUNT_AT_REMOVAL & "',"
            sqlCmd = sqlCmd & "    '" & REPLACING_ENGINE & "','" & MIN_CYCLE_LIMITER & "','" & MIN_CYCLE_WORKSCOPE & "','" & MIN_CYCLE_TAT & "','" & MIN_CYCLES & "','" & MIN_HOUR_LIMITER & "','" & MIN_HOUR_WORKSCOPE & "','" & MIN_HOUR_TAT & "','" & MIN_HOURS & "','" & MIN_DAY_LIMITER & "',"
            sqlCmd = sqlCmd & "   '" & MIN_DAY_WORKSCOPE & "','" & MIN_DAY_TAT & "','" & MIN_DAYS & "','" & LIMITER_BASIS & "','" & LIMITER_VALUE & "','" & LIMITER_TAT & "','" & LIMITER_WORKSCOPE & "','" & SECOND_LIFE_INSTALL_DATE & "','" & SECOND_LIFE_TAIL_AND_POS & "','" & SECOND_LIFE_UTILIZATION_HOURS & "',"
            sqlCmd = sqlCmd & "  '" & SECOND_LIFE_UTILIZATION_CYCLES & "','" & SECOND_LIFE_REMOVAL_REASON & "','" & SECOND_LIFE_REMOVAL_DATE & "','" & SECOND_LIFE_TAT & "','" & SECOND_LIFE_RFI_DATE & "','" & SECOND_LIFE_WORKSCOPE & "','" & SECOND_LIFE_ETSI & "','" & SECOND_LIFE_ECSI & "','" & SECOND_LIFE_ETSN & "','" & SECOND_LIFE_ECSN & "',"
            sqlCmd = sqlCmd & "   '" & SECOND_LIFE_ETSSV & "','" & SECOND_LIFE_ECSSV & "','" & SECOND_LIFE_TFPR & "','" & SECOND_LIFE_CFPR & "','" & SECOND_LIFE_SV_COUNT & "','" & TOTAL_MAINTENANCE_BURDEN & "','" & TOTAL_GROUND_TIME & "','" & TOTAL_MPD & "','" & ALERTS & "',"
            sqlCmd = sqlCmd & "   '" & TPPID & "','" & Engine_Model & "','" & Airline_SHORT_NAME & "' , '" & SSO_ID & "', '" & FP_QUALITY & "', '" & FM_CYCLES & "', '" & FM_REMOVAL_DATE & "', '" & FM_REASON & "', '" & FM_REASON_PROBABILITY & "', '" & FM_TAT & "', '" & FM_RFI_DATE & "', '" & FM_WORKSCOPE & "', '" & FM_MIN_LLP & "', '" & BYPASS_FLEET_MODEL & "' , '" & ORIGINAL_REMOVAL_DATE & "' , '" & OPTIMIZER_DATE & "',"
            sqlCmd = sqlCmd & "   '" & TOTAL_WW & "','" & TOTAL_CEOD & "','" & TOTAL_CNR & "' , '" & TOTAL_PROG & "', '" & TOTAL_REM & "')"
                    
                    
            conn.Execute sqlCmd
            i = i + 1

        Loop
        Erase CS2wb
        
    End If
    Exit Function
    
errorhandler:
    ErrorFlag = True
    ErrorDesc = ErrorDesc & "Calculation Source - " & Err.Description & vbNewLine
End Function

Function SUPPDATA6_WRITEBACK(HeaderID As String, TPPID As Integer, Engine_Model As String, Airline_SHORT_NAME As String, SSO_ID As String) As Boolean
    
    '==================================
    '   Code by TCS & Asko Soimakallio
    '   Last updated: 05/28/2015
    '==================================
    
    On Error GoTo errorhandler:
    
    SUPPDATA6_WRITEBACK = True
    
    Dim sqlCmd As String
    ReadConnectionXML
    OpenSQLConnection
    
    Sheets("Supporting Data").Activate
    sqlCmd = " DELETE FROM  WB_SUPP_DATA_T6 WHERE TPP_ID = '" & TPPID & "';"
    conn.Execute sqlCmd
   
  
   AC_BASED = Sheets("Supporting Data").Cells(14, 70)
    If Len(AC_BASED) > 100 Then
        MsgBox ("Supporting Data : AC_BASED  is exceeding field limit.")
        SUPPDATA6_WRITEBACK = False
        Exit Function
    Else
        AC_BASED = Replace(AC_BASED, "'", "''")
    End If
    
   ENGINE_BASED_SINCE_INSTALLATION = Sheets("Supporting Data").Cells(15, 70)
    If Len(ENGINE_BASED_SINCE_INSTALLATION) > 100 Then
     MsgBox ("Supporting Data : ENGINE_BASED_SINCE_INSTALLATION  is exceeding field limit.")
     SUPPDATA6_WRITEBACK = False
     Exit Function
    Else
     ENGINE_BASED_SINCE_INSTALLATION = Replace(ENGINE_BASED_SINCE_INSTALLATION, "'", "''")
    End If


   FLEET_AVERAGE_SINCE_INSTALLATION = Sheets("Supporting Data").Cells(16, 70)
    If Len(FLEET_AVERAGE_SINCE_INSTALLATION) > 100 Then
        MsgBox ("Supporting Data : FLEET_AVERAGE_SINCE_INSTALLATION  is exceeding field limit.")
        SUPPDATA6_WRITEBACK = False
        Exit Function
    Else
        FLEET_AVERAGE_SINCE_INSTALLATION = Replace(FLEET_AVERAGE_SINCE_INSTALLATION, "'", "''")
    End If


   FLEET_AVERAGE_LAST_12M = Sheets("Supporting Data").Cells(17, 70)
   If Len(FLEET_AVERAGE_LAST_12M) > 100 Then
        MsgBox ("Supporting Data : FLEET_AVERAGE_LAST_12M  is exceeding field limit.")
        SUPPDATA6_WRITEBACK = False
        Exit Function
    Else
        FLEET_AVERAGE_LAST_12M = Replace(FLEET_AVERAGE_LAST_12M, "'", "''")
    End If
    
   FLEET_MANUAL_ENTRY = Sheets("Supporting Data").Cells(18, 70)
    If Len(FLEET_MANUAL_ENTRY) > 100 Then
        MsgBox ("Supporting Data : FLEET_MANUAL_ENTRY  is exceeding field limit.")
        SUPPDATA6_WRITEBACK = False
        Exit Function
    Else
        FLEET_MANUAL_ENTRY = Replace(FLEET_MANUAL_ENTRY, "'", "''")
        FLEET_MANUAL_ENTRY = Application.WorksheetFunction.Clean(Replace(FLEET_MANUAL_ENTRY, Chr(10), " "))
    End If
    

   Index = 1
  
   sqlCmd = " INSERT INTO [dbo].[WB_SUPP_DATA_T6]([ID],[AC_BASED],[ENGINE_BASED_SINCE_INSTALLATION],[FLEET_AVERAGE_SINCE_INSTALLATION],[FLEET_AVERAGE_LAST_12M],[FLEET_MANUAL_ENTRY],[Index],[ENGINE_MODEL],[AIRLINE_SHORT_NAME],[TPP_ID],[SSO_ID])"
   sqlCmd = sqlCmd & " VALUES('" & HeaderID & "','" & AC_BASED & "','" & ENGINE_BASED_SINCE_INSTALLATION & "','" & FLEET_AVERAGE_SINCE_INSTALLATION & "','" & FLEET_AVERAGE_LAST_12M & "','" & FLEET_MANUAL_ENTRY & "','" & Index & "','" & Engine_Model & "','" & Airline_SHORT_NAME & "','" & TPPID & "', '" & SSO_ID & "') "
   conn.Execute sqlCmd
 
    SELECTED_DEFAULT_WORKSCOPE = Sheets("Supporting Data").Cells(17, 72)
    If Len(SELECTED_DEFAULT_WORKSCOPE) > 100 Then
        MsgBox ("Supporting Data : SELECTED_DEFAULT_WORKSCOPE  is exceeding field limit.")
        SUPPDATA6_WRITEBACK = False
        Exit Function
    Else
        SELECTED_DEFAULT_WORKSCOPE = Replace(SELECTED_DEFAULT_WORKSCOPE, "'", "''")
    End If
     
    FLEET_UTILIZATION_RATE_BASIS = Sheets("Supporting Data").Cells(12, 71)
    If Len(FLEET_UTILIZATION_RATE_BASIS) > 100 Then
        MsgBox ("Supporting Data : FLEET_UTILIZATION_RATE_BASIS  is exceeding field limit.")
        SUPPDATA6_WRITEBACK = False
        Exit Function
    Else
        FLEET_UTILIZATION_RATE_BASIS = Replace(FLEET_UTILIZATION_RATE_BASIS, "'", "''")
    End If
    
    AC_BASED = Sheets("Supporting Data").Cells(14, 71)
    If Len(AC_BASED) > 100 Then
        MsgBox ("Supporting Data : AC_BASED  is exceeding field limit.")
        SUPPDATA6_WRITEBACK = False
        Exit Function
    Else
        AC_BASED = Replace(AC_BASED, "'", "''")
    End If
    
    ENGINE_BASED_SINCE_INSTALLATION = Sheets("Supporting Data").Cells(15, 71)
    If Len(ENGINE_BASED_SINCE_INSTALLATION) > 100 Then
        MsgBox ("Supporting Data : ENGINE_BASED_SINCE_INSTALLATION  is exceeding field limit.")
        SUPPDATA6_WRITEBACK = False
        Exit Function
    Else
        ENGINE_BASED_SINCE_INSTALLATION = Replace(ENGINE_BASED_SINCE_INSTALLATION, "'", "''")
    End If
    
    FLEET_AVERAGE_SINCE_INSTALLATION = Sheets("Supporting Data").Cells(16, 71)
    If Len(FLEET_AVERAGE_SINCE_INSTALLATION) > 100 Then
        MsgBox ("Supporting Data : FLEET_AVERAGE_SINCE_INSTALLATION  is exceeding field limit.")
        SUPPDATA6_WRITEBACK = False
        Exit Function
    Else
        FLEET_AVERAGE_SINCE_INSTALLATION = Replace(FLEET_AVERAGE_SINCE_INSTALLATION, "'", "''")
    End If
    
    FLEET_AVERAGE_LAST_12M = Sheets("Supporting Data").Cells(17, 71)
    If Len(FLEET_AVERAGE_LAST_12M) > 100 Then
        MsgBox ("Supporting Data : FLEET_AVERAGE_LAST_12M  is exceeding field limit.")
        SUPPDATA6_WRITEBACK = False
        Exit Function
    Else
        FLEET_AVERAGE_LAST_12M = Replace(FLEET_AVERAGE_LAST_12M, "'", "''")
    End If
    
    FLEET_MANUAL_ENTRY = Sheets("Supporting Data").Cells(18, 71)
    If Len(FLEET_MANUAL_ENTRY) > 100 Then
        MsgBox ("Supporting Data : FLEET_MANUAL_ENTRY  is exceeding field limit.")
        SUPPDATA6_WRITEBACK = False
        Exit Function
    Else
        FLEET_MANUAL_ENTRY = Replace(FLEET_MANUAL_ENTRY, "'", "''")
    End If
    
    Index = 2

   sqlCmd = " INSERT INTO [dbo].[WB_SUPP_DATA_T6]([ID],[FLEET_UTILIZATION_RATE_BASIS],[AC_BASED],[ENGINE_BASED_SINCE_INSTALLATION],[FLEET_AVERAGE_SINCE_INSTALLATION],[FLEET_AVERAGE_LAST_12M],[FLEET_MANUAL_ENTRY],[SELECTED_DEFAULT_WORKSCOPE],[Index],[ENGINE_MODEL],[AIRLINE_SHORT_NAME],[TPP_ID],[SSO_ID])"
   sqlCmd = sqlCmd & " VALUES('" & HeaderID & "','" & FLEET_UTILIZATION_RATE_BASIS & "','" & AC_BASED & "','" & ENGINE_BASED_SINCE_INSTALLATION & "','" & FLEET_AVERAGE_SINCE_INSTALLATION & "','" & FLEET_AVERAGE_LAST_12M & "','" & FLEET_MANUAL_ENTRY & "','" & SELECTED_DEFAULT_WORKSCOPE & "','" & Index & "','" & Engine_Model & "','" & Airline_SHORT_NAME & "','" & TPPID & "', '" & SSO_ID & "') "
   conn.Execute sqlCmd

    Exit Function
    
errorhandler:
    'MsgBox ("Error while publishing data (Supporting Data 6)" & ":  " & Err.Description)
    ErrorFlag = True
    ErrorDesc = ErrorDesc & "Supporting Data - " & Err.Description & vbNewLine
End Function


Function SUPPDATA12_WRITEBACK(HeaderID As String, TPPID As Integer, Engine_Model As String, Airline_SHORT_NAME As String, SSO_ID As String) As Boolean

    On Error GoTo errorhandler:
    
    SUPPDATA12_WRITEBACK = True
    
    Dim sqlCmd As String
    ReadConnectionXML
    OpenSQLConnection

    S1 = "Supporting Data"
    Sheets(S1).Activate
    i = 31
    
    'Truncate table
    sqlCmd = " DELETE FROM  WB_SUPP_DATA_T12 WHERE TPP_ID = '" & TPPID & "';"
    conn.Execute sqlCmd
    
    Do Until i > 57
    
    If (i = 31 Or i = 32 Or i = 33 Or i = 34 Or i = 35 Or i = 36) Then
        TYPES = "PAST 12M-TOTAL"
    ElseIf i = 37 Or i = 38 Or i = 39 Or i = 40 Or i = 41 Or i = 42 Then
        TYPES = "PAST 12M-BASIC"
    ElseIf i = 43 Or i = 44 Or i = 45 Or i = 46 Or i = 47 Or i = 48 Then
        TYPES = "YTD-TOTAL"
    ElseIf i = 49 Or i = 50 Or i = 51 Or i = 52 Or i = 53 Or i = 54 Then
        TYPES = "YTD-BASIC"
    ElseIf i = 55 Or i = 56 Or i = 57 Then
        TYPE1S = "NEXT 12M"
    End If
    
    SHOP_VISITS = Sheets(S1).Cells(i, 13)
    If Len(SHOP_VISITS) > 100 Then
        MsgBox ("Supporting Data : SHOP_VISITS  is exceeding field limit.")
        SUPPDATA12_WRITEBACK = False
        Exit Function
    Else
        SHOP_VISITS = Replace(SHOP_VISITS, "'", "''")
    End If
        
    PERF_OVERHAUL_SHOP_VISITS = Sheets(S1).Cells(i, 14)
    If Len(PERF_OVERHAUL_SHOP_VISITS) > 100 Then
        MsgBox ("Supporting Data : PERF_OVERHAUL_SHOP_VISITS  is exceeding field limit.")
        SUPPDATA12_WRITEBACK = False
        Exit Function
    Else
        PERF_OVERHAUL_SHOP_VISITS = Replace(PERF_OVERHAUL_SHOP_VISITS, "'", "''")
    End If
    
    QUICKTURNS = Sheets(S1).Cells(i, 15)
    If Len(QUICKTURNS) > 100 Then
        MsgBox ("Supporting Data : QUICKTURNS  is exceeding field limit.")
        SUPPDATA12_WRITEBACK = False
        Exit Function
    Else
        QUICKTURNS = Replace(QUICKTURNS, "'", "''")
    End If
    
    TOTAL_REMOVAL = Sheets(S1).Cells(i, 16)
    If Len(TOTAL_REMOVAL) > 100 Then
        MsgBox ("Supporting Data : TOTAL_REMOVAL  is exceeding field limit.")
        SUPPDATA12_WRITEBACK = False
        Exit Function
    Else
        TOTAL_REMOVAL = Replace(TOTAL_REMOVAL, "'", "''")
    End If
    
    SUB_TYPES = Sheets(S1).Cells(i, 12)
    If Len(SUB_TYPES) > 100 Then
        MsgBox ("Supporting Data : SUB_TYPES  is exceeding field limit.")
        SUPPDATA12_WRITEBACK = False
        Exit Function
    Else
        SUB_TYPES = Replace(SUB_TYPES, "'", "''")
    End If
    
   
    sqlCmd = " INSERT INTO [dbo].[WB_SUPP_DATA_T12]([ID],[TYPES],[SHOP_VISITS] ,[PERF_OVERHAUL_SHOP_VISITS] ,[QUICKTURNS]  ,[TOTAL_REMOVAL],[ENGINE_MODEL] ,[AIRLINE_SHORT_NAME],[TPP_ID],[SSO_ID],[SUB_TYPES])"
    sqlCmd = sqlCmd & " VALUES( '" & HeaderID & "','" & TYPES & "','" & SHOP_VISITS & "','" & PERF_OVERHAUL_SHOP_VISITS & "','" & QUICKTURNS & "','" & TOTAL_REMOVAL & "','" & Engine_Model & "','" & Airline_SHORT_NAME & "','" & TPPID & "', '" & SSO_ID & "','" & SUB_TYPES & "') "
    conn.Execute sqlCmd
     i = i + 1
 
    Loop
    Exit Function
   
errorhandler:
   'MsgBox ("Error while publishing data (Supporting Data 12)" & ":  " & Err.Description)
   ErrorFlag = True
   ErrorDesc = ErrorDesc & "Supporting Data - " & Err.Description & vbNewLine
End Function

Function SUPPDATA13_WRITEBACK(HeaderID As String, TPPID As Integer, Engine_Model As String, Airline_SHORT_NAME As String, SSO_ID As String) As Boolean

    On Error GoTo errorhandler:
    
    SUPPDATA13_WRITEBACK = True
    
    ReadConnectionXML
    OpenSQLConnection
    S1 = "Supporting Data"

    
    'This is for Top
    Sheets(S1).Activate
    sqlCmd = " DELETE FROM WB_SUPP_DATA_T13 WHERE TPP_ID = '" & TPPID & "';"
    conn.Execute sqlCmd
    
    DATE_FROM = Sheets(S1).Cells(12, 12)
    If DATE_FROM <> "" And IsDate(DATE_FROM) = False Then
        MsgBox ("Supporting Data : DATE_FROM  is not valid.")
        SUPPDATA13_WRITEBACK = False
        Exit Function
    End If
        
    DATE_TO = Sheets(S1).Cells(12, 13)
    If DATE_TO <> "" And IsDate(DATE_TO) = False Then
        MsgBox ("Supporting Data : DATE_TO  is not valid.")
        SUPPDATA13_WRITEBACK = False
        Exit Function
    End If
    
    AIRLINE1 = Sheets(S1).Cells(15, 12)
    If Len(AIRLINE1) > 100 Then
        MsgBox ("Supporting Data : AIRLINE1  is exceeding field limit.")
        SUPPDATA13_WRITEBACK = False
        Exit Function
    Else
        AIRLINE1 = Replace(AIRLINE1, "'", "''")
    End If
    AIRLINE2 = Sheets(S1).Cells(16, 12)
    If Len(AIRLINE2) > 100 Then
        MsgBox ("Supporting Data : AIRLINE2  is exceeding field limit.")
        SUPPDATA13_WRITEBACK = False
        Exit Function
    Else
        AIRLINE2 = Replace(AIRLINE2, "'", "''")
    End If
    
    AIRLINE3 = Sheets(S1).Cells(17, 12)
    If Len(AIRLINE3) > 100 Then
        MsgBox ("Supporting Data : AIRLINE3  is exceeding field limit.")
        SUPPDATA13_WRITEBACK = False
        Exit Function
    Else
        AIRLINE3 = Replace(AIRLINE3, "'", "''")
    End If
    
    AIRLINE4 = Sheets(S1).Cells(18, 12)
    If Len(AIRLINE4) > 100 Then
        MsgBox ("Supporting Data : AIRLINE4  is exceeding field limit.")
        SUPPDATA13_WRITEBACK = False
        Exit Function
    Else
        AIRLINE4 = Replace(AIRLINE4, "'", "''")
    End If
    
    AIRLINE5 = Sheets(S1).Cells(19, 12)
    If Len(AIRLINE5) > 100 Then
        MsgBox ("Supporting Data : AIRLINE5  is exceeding field limit.")
        SUPPDATA13_WRITEBACK = False
        Exit Function
    Else
        AIRLINE5 = Replace(AIRLINE5, "'", "''")
    End If
    
    
    sqlCmd = " INSERT INTO [dbo].[WB_SUPP_DATA_T13]([ID],[DATE_FROM],[DATE_TO],[AIRLINE1],[AIRLINE2],[AIRLINE3],[AIRLINE4]           ,[AIRLINE5],[TPP_ID] ,[ENGINE_MODEL],[AIRLINE_SHORT_NAME],[SSO_ID])"
    sqlCmd = sqlCmd & " VALUES('" & HeaderID & "','" & DATE_FROM & "', '" & DATE_TO & "','" & AIRLINE1 & "','" & AIRLINE2 & "','" & AIRLINE3 & "','" & AIRLINE4 & "','" & AIRLINE5 & "','" & TPPID & "','" & Engine_Model & "','" & Airline_SHORT_NAME & "', '" & SSO_ID & "') "
    conn.Execute sqlCmd
    
    Exit Function
    
errorhandler:
    'MsgBox ("Error while publishing data (Supporting Data 13)" & ":  " & Err.Description)
    ErrorFlag = True
    ErrorDesc = ErrorDesc & "Supporting Data - " & Err.Description & vbNewLine
End Function

Function SUPPDATA9_WRITEBACK(HeaderID As String, TPPID As Integer, Engine_Model As String, Airline_SHORT_NAME As String, SSO_ID As String) As Boolean

    On Error GoTo errorhandler:
    
    SUPPDATA9_WRITEBACK = True

    ReadConnectionXML
    OpenSQLConnection
    
    S1 = "Supporting Data"

    Sheets(S1).Activate
    i = 45
    'Truncate table
    sqlCmd = " DELETE FROM WB_SUPP_DATA_T9 WHERE TPP_ID = '" & TPPID & "';"
    conn.Execute sqlCmd
    
    Do Until i > 56
    
       CALCULATION_MODE = Sheets(S1).Cells(i, 69)
       If CALCULATION_MODE <> "" And IsNumeric(CALCULATION_MODE) = False Then
            MsgBox ("Supporting Data : CALCULATION_MODE  is not valid number.")
            SUPPDATA9_WRITEBACK = False
            Exit Function
        Else
            CALCULATION_MODE = Round(CALCULATION_MODE)
        End If
        
       
       EGT_DET_RATE = Sheets(S1).Cells(i, 70)
       If Len(EGT_DET_RATE) > 100 Then
            MsgBox ("Supporting Data : EGT_DET_RATE  is exceeding field limit.")
            SUPPDATA9_WRITEBACK = False
            Exit Function
        Else
            EGT_DET_RATE = Replace(EGT_DET_RATE, "'", "''")
        End If
    
       VALUES = Sheets(S1).Cells(i, 71)
        If Len(VALUES) > 100 Then
            MsgBox ("Supporting Data : VALUES  is exceeding field limit.")
            SUPPDATA9_WRITEBACK = False
            Exit Function
        Else
            VALUES = Replace(VALUES, "'", "''")
        End If
        
       
       sqlCmd = " INSERT INTO [dbo].[WB_SUPP_DATA_T9]([ID],[CALCULATION_MODE],[EGT_DET_RATE],[VALUES],[TPP_ID] ,[ENGINE_MODEL],[AIRLINE_SHORT_NAME],[SSO_ID])"
       sqlCmd = sqlCmd & " VALUES('" & HeaderID & "','" & CALCULATION_MODE & "', '" & EGT_DET_RATE & "','" & VALUES & "','" & TPPID & "','" & Engine_Model & "','" & Airline_SHORT_NAME & "', '" & SSO_ID & "') "
       conn.Execute sqlCmd
       i = i + 1
    Loop
    
    Exit Function
    
errorhandler:
    'MsgBox ("Error while publishing data (Supporting Data 9)" & ":  " & Err.Description)
    ErrorFlag = True
    ErrorDesc = ErrorDesc & "Supporting Data - " & Err.Description & vbNewLine
End Function

Function SUPPDATA8_WRITEBACK(HeaderID As String, TPPID As Integer, Engine_Model As String, Airline_SHORT_NAME As String, SSO_ID As String) As Boolean

    On Error GoTo errorhandler:
    
    SUPPDATA8_WRITEBACK = True

    S1 = "Supporting Data"

 
    Sheets(S1).Activate
      
    'Truncate table
    sqlCmd = " DELETE FROM WB_SUPP_DATA_T8 WHERE TPP_ID = '" & TPPID & "';"
    conn.Execute sqlCmd
    
 
    CSN_LIMIT = Sheets(S1).Cells(22, 74)
    If Len(CSN_LIMIT) > 100 Then
        MsgBox ("Supporting Data : CSN_LIMIT  is exceeding field limit.")
        SUPPDATA8_WRITEBACK = False
        Exit Function
    Else
        CSN_LIMIT = Replace(CSN_LIMIT, "'", "''")
    End If
    
    CSSV_LIMIT = Sheets(S1).Cells(23, 74)
    If Len(CSSV_LIMIT) > 100 Then
        MsgBox ("Supporting Data : CSSV_LIMIT  is exceeding field limit.")
        SUPPDATA8_WRITEBACK = False
        Exit Function
    Else
        CSSV_LIMIT = Replace(CSSV_LIMIT, "'", "''")
    End If
    
    CSFPR_LIMIT = Sheets(S1).Cells(24, 74)
    If Len(CSFPR_LIMIT) > 100 Then
        MsgBox ("Supporting Data : CSFPR_LIMIT  is exceeding field limit.")
        SUPPDATA8_WRITEBACK = False
        Exit Function
    Else
        CSFPR_LIMIT = Replace(CSFPR_LIMIT, "'", "''")
    End If
    
    DATE_LIMIT = Sheets(S1).Cells(25, 74)
    If Len(DATE_LIMIT) > 100 Then
        MsgBox ("Supporting Data : DATE_LIMIT  is exceeding field limit.")
        SUPPDATA8_WRITEBACK = False
        Exit Function
    Else
        DATE_LIMIT = Replace(DATE_LIMIT, "'", "''")
    End If
    
    TSN_LIMIT = Sheets(S1).Cells(26, 74)
    If Len(TSN_LIMIT) > 100 Then
        MsgBox ("Supporting Data : TSN_LIMIT  is exceeding field limit.")
        SUPPDATA8_WRITEBACK = False
        Exit Function
    Else
        TSN_LIMIT = Replace(TSN_LIMIT, "'", "''")
    End If
    
    TSSV_LIMIT = Sheets(S1).Cells(27, 74)
    If Len(TSSV_LIMIT) > 100 Then
        MsgBox ("Supporting Data : TSSV_LIMIT  is exceeding field limit.")
        SUPPDATA8_WRITEBACK = False
        Exit Function
    Else
        TSSV_LIMIT = Replace(TSSV_LIMIT, "'", "''")
    End If
    
    TSFPR_LIMIT = Sheets(S1).Cells(28, 74)
    If Len(TSFPR_LIMIT) > 100 Then
        MsgBox ("Supporting Data : TSFPR_LIMIT  is exceeding field limit.")
        SUPPDATA8_WRITEBACK = False
        Exit Function
    Else
        TSFPR_LIMIT = Replace(TSFPR_LIMIT, "'", "''")
    End If
    
    
    CSN_TSN_TAT = Sheets(S1).Cells(30, 73)
    If Len(CSN_TSN_TAT) > 100 Then
        MsgBox ("Supporting Data : CSN_TSN_TAT  is exceeding field limit.")
        SUPPDATA8_WRITEBACK = False
        Exit Function
    Else
        CSN_TSN_TAT = Replace(CSN_TSN_TAT, "'", "''")
    End If
    
    NEW_BASIS = Sheets(S1).Cells(30, 74)
    If Len(NEW_BASIS) > 100 Then
        MsgBox ("Supporting Data : NEW_BASIS  is exceeding field limit.")
        SUPPDATA8_WRITEBACK = False
        Exit Function
    Else
        NEW_BASIS = Replace(NEW_BASIS, "'", "''")
    End If
    
    CSSV_TSSV_CSFPR_TSFPR_TAT = Sheets(S1).Cells(32, 73)
    If Len(CSSV_TSSV_CSFPR_TSFPR_TAT) > 100 Then
        MsgBox ("Supporting Data : CSSV_TSSV_CSFPR_TSFPR_TAT  is exceeding field limit.")
        SUPPDATA8_WRITEBACK = False
        Exit Function
    Else
        CSSV_TSSV_CSFPR_TSFPR_TAT = Replace(CSSV_TSSV_CSFPR_TSFPR_TAT, "'", "''")
    End If
    
    RESTORED_BASIS = Sheets(S1).Cells(32, 74)
    If Len(RESTORED_BASIS) > 100 Then
        MsgBox ("Supporting Data : RESTORED_BASIS  is exceeding field limit.")
        SUPPDATA8_WRITEBACK = False
        Exit Function
    Else
        RESTORED_BASIS = Replace(RESTORED_BASIS, "'", "''")
    End If
    
    CSSV_TSSV_CSFPR_TSFPR_TAT_1 = Sheets(S1).Cells(32, 73)
    If Len(CSSV_TSSV_CSFPR_TSFPR_TAT_1) > 100 Then
        MsgBox ("Supporting Data : CSSV_TSSV_CSFPR_TSFPR_TAT_1  is exceeding field limit.")
        SUPPDATA8_WRITEBACK = False
        Exit Function
    Else
        CSSV_TSSV_CSFPR_TSFPR_TAT_1 = Replace(CSSV_TSSV_CSFPR_TSFPR_TAT_1, "'", "''")
    End If
    
    CSSV_TSSV_CSFPR_TSFPR_TAT_2 = Sheets(S1).Cells(34, 73)
    If Len(CSSV_TSSV_CSFPR_TSFPR_TAT_2) > 100 Then
        MsgBox ("Supporting Data : CSSV_TSSV_CSFPR_TSFPR_TAT_2  is exceeding field limit.")
        SUPPDATA8_WRITEBACK = False
        Exit Function
    Else
        CSSV_TSSV_CSFPR_TSFPR_TAT_2 = Replace(CSSV_TSSV_CSFPR_TSFPR_TAT_2, "'", "''")
    End If
    
    QT_BASIS = Sheets(S1).Cells(34, 74)
    If Len(QT_BASIS) > 100 Then
        MsgBox ("Supporting Data : QT_BASIS  is exceeding field limit.")
        SUPPDATA8_WRITEBACK = False
        Exit Function
    Else
        QT_BASIS = Replace(QT_BASIS, "'", "''")
    End If
    
    FP_QUALITY = Sheets(S1).Cells(30, 72)
    If FP_QUALITY <> "" And IsNumeric(FP_QUALITY) = False Then
        MsgBox ("Supporting Data : FP_QUALITY is not valid number.")
        SUPPDATA8_WRITEBACK = False
        Exit Function
    Else
        FP_QUALITY = Replace(FP_QUALITY, "'", "''")
    End If
    
    FLEET_BYPASS = Sheets(S1).Cells(48, 74)
    If FLEET_BYPASS <> "" And IsNumeric(FLEET_BYPASS) = False Then
        MsgBox ("Supporting Data : FLEET_BYPASS is not valid number.")
        SUPPDATA8_WRITEBACK = False
        Exit Function
    Else
        FLEET_BYPASS = Replace(FLEET_BYPASS, "'", "''")
    End If
    
    sqlCmd = " INSERT INTO [dbo].[WB_SUPP_DATA_T8]([ID],[CSN_LIMIT] ,[CSSV_LIMIT],[CSFPR_LIMIT],[DATE_LIMIT],[TSN_LIMIT] ,[TSSV_LIMIT],[TSFPR_LIMIT],[CSN_TSN_TAT],[NEW_BASIS] ,[CSSV_TSSV_CSFPR_TSFPR_TAT] ,[RESTORED_BASIS],[CSSV_TSSV_CSFPR_TSFPR_TAT_1],[CSSV_TSSV_CSFPR_TSFPR_TAT_2] ,[QT_BASIS] ,[TPP_ID],[ENGINE_MODEL],[AIRLINE_SHORT_NAME],[SSO_ID],[FP_QUALITY],[FLEET_BYPASS])  "
    sqlCmd = sqlCmd & " VALUES('" & HeaderID & "','" & CSN_LIMIT & "', '" & CSSV_LIMIT & "','" & CSFPR_LIMIT & "','" & DATE_LIMIT & "','" & TSN_LIMIT & "','" & TSSV_LIMIT & "','" & TSFPR_LIMIT & "','" & CSN_TSN_TAT & "','" & NEW_BASIS & "','" & CSSV_TSSV_CSFPR_TSFPR_TAT & "','" & RESTORED_BASIS & "','" & CSSV_TSSV_CSFPR_TSFPR_TAT_1 & "','" & CSSV_TSSV_CSFPR_TSFPR_TAT_2 & "','" & QT_BASIS & "','" & TPPID & "','" & Engine_Model & "','" & Airline_SHORT_NAME & "', '" & SSO_ID & "', '" & FP_QUALITY & "', '" & FLEET_BYPASS & "') "
        
    conn.Execute sqlCmd
     
    Exit Function
    
errorhandler:
    'MsgBox ("Error while publishing data (Supporting Data 8)" & ":  " & Err.Description)
    ErrorFlag = True
    ErrorDesc = ErrorDesc & "Supporting Data - " & Err.Description & vbNewLine
End Function

Function SUPPDATA7_WRITEBACK(HeaderID As String, TPPID As Integer, Engine_Model As String, Airline_SHORT_NAME As String, SSO_ID As String) As Boolean

    On Error GoTo errorhandler:
    
    SUPPDATA7_WRITEBACK = True
    
    S1 = "Supporting Data"

    'This is for Top
    Sheets(S1).Activate
      
    'Truncate table
    sqlCmd = " DELETE FROM  WB_SUPP_DATA_T7 WHERE TPP_ID = '" & TPPID & "';"
    conn.Execute sqlCmd
    
    EGT_TAT = Sheets(S1).Cells(21, 71)
    If Len(EGT_TAT) > 100 Then
        MsgBox ("Supporting Data : EGT_TAT  is exceeding field limit.")
        SUPPDATA7_WRITEBACK = False
        Exit Function
    Else
        EGT_TAT = Replace(EGT_TAT, "'", "''")
    End If
    
    LLP_TAT = Sheets(S1).Cells(22, 71)
    If Len(LLP_TAT) > 100 Then
        MsgBox ("Supporting Data : LLP_TAT  is exceeding field limit.")
        SUPPDATA7_WRITEBACK = False
        Exit Function
    Else
        LLP_TAT = Replace(LLP_TAT, "'", "''")
    End If
    
    EGTHDM_REMOVAL = Sheets(S1).Cells(25, 71)
    If Len(EGTHDM_REMOVAL) > 100 Then
        MsgBox ("Supporting Data : EGTHDM_REMOVAL  is exceeding field limit.")
        SUPPDATA7_WRITEBACK = False
        Exit Function
    Else
        EGTHDM_REMOVAL = Replace(EGTHDM_REMOVAL, "'", "''")
    End If
    
    UER_RATE = Sheets(S1).Cells(27, 71)
    If Len(UER_RATE) > 100 Then
        MsgBox ("Supporting Data : UER_RATE  is exceeding field limit.")
        SUPPDATA7_WRITEBACK = False
        Exit Function
    Else
        UER_RATE = Replace(UER_RATE, "'", "''")
    End If
    
    UER_ON_OFF = Sheets(S1).Cells(27, 72)
    If Len(UER_ON_OFF) > 100 Then
        MsgBox ("Supporting Data : UER_ON_OFF  is exceeding field limit.")
        SUPPDATA7_WRITEBACK = False
        Exit Function
    Else
        UER_ON_OFF = Replace(UER_ON_OFF, "'", "''")
    End If
    
   
    sqlCmd = " INSERT INTO [dbo].[WB_SUPP_DATA_T7]([ID],[EGT_TAT],[LLP_TAT],[EGTHDM_REMOVAL],[UER_RATE],[UER_ON_OFF]    ,[TPP_ID]           ,[ENGINE_MODEL]           ,[AIRLINE_SHORT_NAME],[SSO_ID])"
    sqlCmd = sqlCmd & " VALUES('" & HeaderID & "','" & EGT_TAT & "', '" & LLP_TAT & "','" & EGTHDM_REMOVAL & "','" & UER_RATE & "','" & UER_ON_OFF & "','" & TPPID & "','" & Engine_Model & "','" & Airline_SHORT_NAME & "', '" & SSO_ID & "') "
    conn.Execute sqlCmd
    
    Exit Function
    
errorhandler:
    'MsgBox ("Error while publishing data (Supporting Data 7)" & ":  " & Err.Description)
    ErrorFlag = True
    ErrorDesc = ErrorDesc & "Supporting Data - " & Err.Description & vbNewLine
End Function

Function SUPPDATA5_WRITEBACK(HeaderID As String, TPPID As Integer, Engine_Model As String, Airline_SHORT_NAME As String, SSO_ID As String) As Boolean

    On Error GoTo errorhandler:
    
    SUPPDATA5_WRITEBACK = True

    S1 = "Supporting Data"
  

    Sheets(S1).Activate
     
    'Truncate table
    sqlCmd = " DELETE FROM WB_SUPP_DATA_T5 WHERE TPP_ID = '" & TPPID & "';"
    conn.Execute sqlCmd
    
    AC_TYPE = Sheets(S1).Cells(3, 71)
    If Len(AC_TYPE) > 100 Then
        MsgBox ("Supporting Data : AC_TYPE  is exceeding field limit.")
        SUPPDATA5_WRITEBACK = False
        Exit Function
    Else
        AC_TYPE = Replace(AC_TYPE, "'", "''")
    End If
        
    
    ENGINES_PER_AC = Sheets(S1).Cells(4, 71)
    If Len(ENGINES_PER_AC) > 100 Then
        MsgBox ("Supporting Data : ENGINES_PER_AC  is exceeding field limit.")
        SUPPDATA5_WRITEBACK = False
        Exit Function
    Else
        ENGINES_PER_AC = Replace(ENGINES_PER_AC, "'", "''")
    End If
    
    AC_COUNT = Sheets(S1).Cells(5, 71)
    If Len(AC_COUNT) > 100 Then
        MsgBox ("Supporting Data : AC_COUNT  is exceeding field limit.")
        SUPPDATA5_WRITEBACK = False
        Exit Function
    Else
        AC_COUNT = Replace(AC_COUNT, "'", "''")
    End If
    
    ENGINE_MODEL1 = Sheets(S1).Cells(6, 71)
    If Len(ENGINE_MODEL1) > 100 Then
        MsgBox ("Supporting Data : ENGINE_MODEL1  is exceeding field limit.")
        SUPPDATA5_WRITEBACK = False
        Exit Function
    Else
        ENGINE_MODEL1 = Replace(ENGINE_MODEL1, "'", "''")
    End If
    
    SPARES_ALERT_LEVEL = Sheets(S1).Cells(7, 71)
    If Len(SPARES_ALERT_LEVEL) > 100 Then
        MsgBox ("Supporting Data : SPARES_ALERT_LEVEL  is exceeding field limit.")
        SUPPDATA5_WRITEBACK = False
        Exit Function
    Else
        SPARES_ALERT_LEVEL = Replace(SPARES_ALERT_LEVEL, "'", "''")
    End If
    
    FULL_SPARES_COUNT = Sheets(S1).Cells(8, 71)
    If Len(FULL_SPARES_COUNT) > 100 Then
        MsgBox ("Supporting Data : FULL_SPARES_COUNT  is exceeding field limit.")
        SUPPDATA5_WRITEBACK = False
        Exit Function
    Else
        FULL_SPARES_COUNT = Replace(FULL_SPARES_COUNT, "'", "''")
    End If

    
    sqlCmd = " INSERT INTO [dbo].[WB_SUPP_DATA_T5]([ID],[AC_TYPE] ,[ENGINES_PER_AC]           ,[AC_COUNT]  ,[ENGINE_MODEL1]         ,[SPARES_ALERT_LEVEL]           ,[FULL_SPARES_COUNT]                    ,[TPP_ID]           ,[ENGINE_MODEL]           ,[AIRLINE_SHORT_NAME],[SSO_ID])"
    sqlCmd = sqlCmd & " VALUES('" & HeaderID & "','" & AC_TYPE & "', '" & ENGINES_PER_AC & "','" & AC_COUNT & "','" & ENGINE_MODEL1 & "','" & SPARES_ALERT_LEVEL & "','" & FULL_SPARES_COUNT & "','" & TPPID & "','" & Engine_Model & "','" & Airline_SHORT_NAME & "', '" & SSO_ID & "') "
    conn.Execute sqlCmd
    
    Exit Function
    
errorhandler:
    'MsgBox ("Error while publishing data (Supporting Data 5)" & ":  " & Err.Description)
    ErrorFlag = True
    ErrorDesc = ErrorDesc & "Supporting Data - " & Err.Description & vbNewLine
End Function

Function SUPPDATA4_WRITEBACK(HeaderID As String, TPPID As Integer, Engine_Model As String, Airline_SHORT_NAME As String, SSO_ID As String) As Boolean

    On Error GoTo errorhandler:
    
    SUPPDATA4_WRITEBACK = True
    
    Dim sqlCmd As String
    ReadConnectionXML
    OpenSQLConnection

    S1 = "Supporting Data"

    Sheets(S1).Activate
     
    i = 13
    
    'Truncate table
    sqlCmd = " DELETE FROM WB_SUPP_DATA_T4 WHERE TPP_ID = '" & TPPID & "';"
    conn.Execute sqlCmd
    
     Do Until i > 18
        
        CATEGORY = Sheets(S1).Cells(i, 16)
        If Len(CATEGORY) > 100 Then
            MsgBox ("Supporting Data : CATEGORY  is exceeding field limit.")
            SUPPDATA4_WRITEBACK = False
            Exit Function
        Else
            CATEGORY = Replace(CATEGORY, "'", "''")
        End If
        
        SELECTED_QTY = Sheets(S1).Cells(i, 17)
        If Len(SELECTED_QTY) > 100 Then
            MsgBox ("Supporting Data : SELECTED_QTY  is exceeding field limit.")
            SUPPDATA4_WRITEBACK = False
            Exit Function
        Else
            SELECTED_QTY = Replace(SELECTED_QTY, "'", "''")
        End If
        
        SELECTED_RATE = Sheets(S1).Cells(i, 18)
        If Len(SELECTED_RATE) > 100 Then
            MsgBox ("Supporting Data : SELECTED_RATE  is exceeding field limit.")
            SUPPDATA4_WRITEBACK = False
            Exit Function
        Else
            SELECTED_RATE = Replace(SELECTED_RATE, "'", "''")
        End If
        
        
        BASIS = Sheets(S1).Cells(i, 19)
        If Len(BASIS) > 150 Then
            MsgBox ("Supporting Data : BASIS  is exceeding field limit.")
            SUPPDATA4_WRITEBACK = False
            Exit Function
        Else
            BASIS = Replace(BASIS, "'", "''")
        End If
        
        RAT_CHOICE_QTY = Sheets(S1).Cells(i, 20)
        If Len(RAT_CHOICE_QTY) > 100 Then
            MsgBox ("Supporting Data : RAT_CHOICE_QTY  is exceeding field limit.")
            SUPPDATA4_WRITEBACK = False
            Exit Function
        Else
            RAT_CHOICE_QTY = Replace(RAT_CHOICE_QTY, "'", "''")
        End If
        
        RATIONALE = Sheets(S1).Cells(i, 21)
        
        If Len(RATIONALE) > 4000 Then
            MsgBox ("Supporting Data : RATIONALE  is exceeding field limit.")
            SUPPDATA4_WRITEBACK = False
            Exit Function
        Else
            RATIONALE = Replace(RATIONALE, "'", "''")
            RATIONALE = Application.WorksheetFunction.Clean(Replace(RATIONALE, Chr(10), " "))
        End If
        
        FLEET_EVENTS_TOTAL = Sheets(S1).Cells(i, 22)
        If Len(FLEET_EVENTS_TOTAL) > 100 Then
            MsgBox ("Supporting Data : FLEET_EVENTS_TOTAL  is exceeding field limit.")
            SUPPDATA4_WRITEBACK = False
            Exit Function
        Else
            FLEET_EVENTS_TOTAL = Replace(FLEET_EVENTS_TOTAL, "'", "''")
        End If
        
        FLEET_EVENTS_BASIC = Sheets(S1).Cells(i, 23)
        If Len(FLEET_EVENTS_BASIC) > 100 Then
            MsgBox ("Supporting Data : FLEET_EVENTS_BASIC  is exceeding field limit.")
            SUPPDATA4_WRITEBACK = False
            Exit Function
        Else
            FLEET_EVENTS_BASIC = Replace(FLEET_EVENTS_BASIC, "'", "''")
        End If
        
        LAST_SAVED = Sheets(S1).Cells(i, 24)
        If Len(LAST_SAVED) > 100 Then
            MsgBox ("Supporting Data : LAST_SAVED  is exceeding field limit.")
            SUPPDATA4_WRITEBACK = False
            Exit Function
        Else
            LAST_SAVED = Replace(LAST_SAVED, "'", "''")
        End If
        
    
        sqlCmd = " INSERT INTO [dbo].[WB_SUPP_DATA_T4]([ID],[CATEGORY],[SELECTED_QTY],[SELECTED_RATE] ,[BASIS]           ,[RAT_CHOICE_QTY]           ,[RATIONALE]           ,[FLEET_EVENTS_TOTAL]           ,[FLEET_EVENTS_BASIC]           ,[TPP_ID]           ,[ENGINE_MODEL]           ,[AIRLINE_SHORT_NAME],[LAST_SAVED],[SSO_ID])"
        sqlCmd = sqlCmd & " VALUES('" & HeaderID & "', '" & CATEGORY & "','" & SELECTED_QTY & "','" & SELECTED_RATE & "','" & BASIS & "','" & RAT_CHOICE_QTY & "','" & RATIONALE & "','" & FLEET_EVENTS_TOTAL & "','" & FLEET_EVENTS_BASIC & "','" & TPPID & "','" & Engine_Model & "','" & Airline_SHORT_NAME & "','" & LAST_SAVED & "', '" & SSO_ID & "') "
        conn.Execute sqlCmd
        
        i = i + 1

    Loop
    
    Exit Function
    
errorhandler:
    'MsgBox ("Error while publishing data (Supporting Data 4)" & ":  " & Err.Description)
    ErrorFlag = True
    ErrorDesc = ErrorDesc & "Supporting Data - " & Err.Description & vbNewLine
End Function



Function SUPPDATA2_WRITEBACK(HeaderID As String, TPPID As Integer, Engine_Model As String, Airline_SHORT_NAME As String, SSO_ID As String) As Boolean

    On Error GoTo errorhandler:

    SUPPDATA2_WRITEBACK = True
    S1 = "Supporting Data"
    
    ReadConnectionXML
    OpenSQLConnection
   
    Sheets(S1).Activate
   
    i = 43
    
    'Truncate table
    sqlCmd = " DELETE FROM WB_SUPP_DATA_T2 WHERE TPP_ID = '" & TPPID & "';"
    conn.Execute sqlCmd
    
    Do Until i > 50
    
        EVENT_TYPE = Sheets(S1).Cells(i, 8)
        If Len(EVENT_TYPE) > 100 Then
            MsgBox ("Supporting Data : EVENT_TYPE  is exceeding field limit.")
            SUPPDATA2_WRITEBACK = False
            Exit Function
        Else
            EVENT_TYPE = Replace(EVENT_TYPE, "'", "''")
        End If
    
        ALERT_YELLOW = Sheets(S1).Cells(i, 9)
        If Len(ALERT_YELLOW) > 100 Then
            MsgBox ("Supporting Data : ALERT_YELLOW  is exceeding field limit.")
            SUPPDATA2_WRITEBACK = False
            Exit Function
        Else
            ALERT_YELLOW = Replace(ALERT_YELLOW, "'", "''")
        End If
        
        ALERT_RED = Sheets(S1).Cells(i, 10)
        If Len(ALERT_RED) > 100 Then
            MsgBox ("Supporting Data : ALERT_RED  is exceeding field limit.")
            SUPPDATA2_WRITEBACK = False
            Exit Function
        Else
            ALERT_RED = Replace(ALERT_RED, "'", "''")
        End If
        
    
        sqlCmd = " INSERT INTO [dbo].[WB_SUPP_DATA_T2]([ID],[EVENT_TYPE],[ALERT_YELLOW],[ALERT_RED],[TPP_ID] ,[ENGINE_MODEL] ,[AIRLINE_SHORT_NAME],[SSO_ID])"
        sqlCmd = sqlCmd & " VALUES('" & HeaderID & "','" & EVENT_TYPE & "', '" & ALERT_YELLOW & "','" & ALERT_RED & "','" & TPPID & "','" & Engine_Model & "','" & Airline_SHORT_NAME & "', '" & SSO_ID & "') "
        conn.Execute sqlCmd
        
        i = i + 1
    Loop
    
    Exit Function
    
errorhandler:
    'MsgBox ("Error while publishing data (Supporting Data 2)" & ":  " & Err.Description)
     ErrorFlag = True
     ErrorDesc = ErrorDesc & "Supporting Data - " & Err.Description & vbNewLine
End Function


Function SUPPDATA1_WRITEBACK(HeaderID As String, TPPID As Integer, Engine_Model As String, Airline_SHORT_NAME As String, SSO_ID As String) As Boolean

    On Error GoTo errorhandler:
    
    SUPPDATA1_WRITEBACK = True
    
    ReadConnectionXML
    OpenSQLConnection
    
    S1 = "Supporting Data"

 
    Sheets(S1).Activate
    
    'Truncate table
    sqlCmd = " DELETE FROM WB_SUPP_DATA_T1 WHERE TPP_ID = '" & TPPID & "';"
    conn.Execute sqlCmd
    Dim Version As String
    
    Version = Sheets(S1).Cells(19, 3)
    If Len(Version) > 100 Then
        MsgBox ("Supporting Data : VERSION  is exceeding field limit.")
        SUPPDATA1_WRITEBACK = False
        Exit Function
    Else
        Version = Replace(Version, "'", "''")
    End If
    
    REVISION = Sheets(S1).Cells(19, 5)
    If Len(REVISION) > 100 Then
        MsgBox ("Supporting Data : REVISION  is exceeding field limit.")
        SUPPDATA1_WRITEBACK = False
        Exit Function
    Else
        REVISION = Replace(REVISION, "'", "''")
    End If
    
    
    sqlCmd = " INSERT INTO [dbo].[WB_SUPP_DATA_T1]([ID],[VERSION] ,[REVISION],[TPP_ID]  ,[ENGINE_MODEL] ,[AIRLINE_SHORT_NAME],[SSO_ID])"
    sqlCmd = sqlCmd & " VALUES( '" & HeaderID & "','" & Version & "','" & REVISION & "','" & TPPID & "','" & Engine_Model & "','" & Airline_SHORT_NAME & "', '" & SSO_ID & "') "
    conn.Execute sqlCmd
      
    Exit Function
    
errorhandler:
    'MsgBox ("Error while publishing data (Supporting Data 1)" & ":  " & Err.Description)
    ErrorFlag = True
    ErrorDesc = ErrorDesc & "Supporting Data - " & Err.Description & vbNewLine
End Function

Function SUPPDATA3_WRITEBACK(HeaderID As String, TPPID As Integer, Engine_Model As String, Airline_SHORT_NAME As String, SSO_ID As String) As Boolean

    On Error GoTo errorhandler:
    
    SUPPDATA3_WRITEBACK = True
    
    Dim sqlCmd As String
    ReadConnectionXML
    OpenSQLConnection
    
    S1 = "Supporting Data"

    Sheets(S1).Activate
    
    'Truncate table
    sqlCmd = " DELETE FROM WB_SUPP_DATA_T3 WHERE TPP_ID = '" & TPPID & "';"
    conn.Execute sqlCmd
    
    TYPE1 = "Hours"
    MONTHLY_UTILIZATION = Sheets(S1).Cells(28, 8)
    If Len(MONTHLY_UTILIZATION) > 100 Then
        MsgBox ("Supporting Data : MONTHLY_UTILIZATION  is exceeding field limit.")
        SUPPDATA3_WRITEBACK = False
        Exit Function
    Else
        MONTHLY_UTILIZATION = Replace(MONTHLY_UTILIZATION, "'", "''")
    End If
    
    DAILY_UTILIZATION = Sheets(S1).Cells(28, 9)
    If Len(DAILY_UTILIZATION) > 100 Then
        MsgBox ("Supporting Data : DAILY_UTILIZATION  is exceeding field limit.")
        SUPPDATA3_WRITEBACK = False
        Exit Function
    Else
        DAILY_UTILIZATION = Replace(DAILY_UTILIZATION, "'", "''")
    End If
    
    YEARLY_UTILIZATION = Sheets(S1).Cells(28, 10)
    If Len(YEARLY_UTILIZATION) > 100 Then
        MsgBox ("Supporting Data : YEARLY_UTILIZATION  is exceeding field limit.")
        SUPPDATA3_WRITEBACK = False
        Exit Function
    Else
        YEARLY_UTILIZATION = Replace(YEARLY_UTILIZATION, "'", "''")
    End If
    
    FLIGHT_LEG = Sheets(S1).Cells(31, 8)
    If Len(FLIGHT_LEG) > 100 Then
        MsgBox ("Supporting Data : FLIGHT_LEG  is exceeding field limit.")
        SUPPDATA3_WRITEBACK = False
        Exit Function
    Else
        FLIGHT_LEG = Replace(FLIGHT_LEG, "'", "''")
    End If
    
    FLEET_LEADER = Sheets(S1).Cells(34, 8)
    If Len(FLEET_LEADER) > 100 Then
        MsgBox ("Supporting Data : FLEET_LEADER  is exceeding field limit.")
        SUPPDATA3_WRITEBACK = False
        Exit Function
    Else
        FLEET_LEADER = Replace(FLEET_LEADER, "'", "''")
    End If
    
    RESTORED = Sheets(S1).Cells(34, 9)
    If Len(RESTORED) > 100 Then
        MsgBox ("Supporting Data : RESTORED  is exceeding field limit.")
        SUPPDATA3_WRITEBACK = False
        Exit Function
    Else
        RESTORED = Replace(RESTORED, "'", "''")
    End If
    
    
    sqlCmd = " INSERT INTO [dbo].[WB_SUPP_DATA_T3]([ID],[TYPE],[MONTHLY_UTILIZATION] ,[DAILY_UTILIZATION],[YEARLY_UTILIZATION],[FLIGHT_LEG],[FLEET_LEADER],[RESTORED],[TPP_ID]  ,[ENGINE_MODEL] ,[AIRLINE_SHORT_NAME],[SSO_ID])"
    sqlCmd = sqlCmd & " VALUES( '" & HeaderID & "','" & TYPE1 & "','" & MONTHLY_UTILIZATION & "','" & DAILY_UTILIZATION & "','" & YEARLY_UTILIZATION & "','" & FLIGHT_LEG & "','" & FLEET_LEADER & "','" & RESTORED & "','" & TPPID & "','" & Engine_Model & "','" & Airline_SHORT_NAME & "', '" & SSO_ID & "') "
    conn.Execute sqlCmd
      
    TYPE1 = "Cycles"
    MONTHLY_UTILIZATION = Sheets(S1).Cells(29, 8)
    If Len(MONTHLY_UTILIZATION) > 100 Then
        MsgBox ("Supporting Data : MONTHLY_UTILIZATION  is exceeding field limit.")
        SUPPDATA3_WRITEBACK = False
        Exit Function
    Else
        MONTHLY_UTILIZATION = Replace(MONTHLY_UTILIZATION, "'", "''")
    End If
    
    DAILY_UTILIZATION = Sheets(S1).Cells(29, 9)
    If Len(DAILY_UTILIZATION) > 100 Then
        MsgBox ("Supporting Data : DAILY_UTILIZATION  is exceeding field limit.")
        SUPPDATA3_WRITEBACK = False
        Exit Function
    Else
        DAILY_UTILIZATION = Replace(DAILY_UTILIZATION, "'", "''")
    End If
    
    YEARLY_UTILIZATION = Sheets(S1).Cells(29, 10)
    If Len(YEARLY_UTILIZATION) > 100 Then
        MsgBox ("Supporting Data : YEARLY_UTILIZATION  is exceeding field limit.")
        SUPPDATA3_WRITEBACK = False
        Exit Function
    Else
        YEARLY_UTILIZATION = Replace(YEARLY_UTILIZATION, "'", "''")
    End If
    
    
    FLEET_LEADER = Sheets(S1).Cells(35, 8)
    If Len(FLEET_LEADER) > 100 Then
        MsgBox ("Supporting Data : FLEET_LEADER  is exceeding field limit.")
        SUPPDATA3_WRITEBACK = False
        Exit Function
    Else
        FLEET_LEADER = Replace(FLEET_LEADER, "'", "''")
    End If
    
    RESTORED = Sheets(S1).Cells(35, 9)
    If Len(RESTORED) > 100 Then
        MsgBox ("Supporting Data : RESTORED  is exceeding field limit.")
        SUPPDATA3_WRITEBACK = False
        Exit Function
    Else
        RESTORED = Replace(RESTORED, "'", "''")
    End If
    
    
    sqlCmd = " INSERT INTO [dbo].[WB_SUPP_DATA_T3]([ID],[TYPE],[MONTHLY_UTILIZATION] ,[DAILY_UTILIZATION],[YEARLY_UTILIZATION],[FLIGHT_LEG],[FLEET_LEADER],[RESTORED],[TPP_ID]  ,[ENGINE_MODEL] ,[AIRLINE_SHORT_NAME],[SSO_ID])"
    sqlCmd = sqlCmd & " VALUES( '" & HeaderID & "','" & TYPE1 & "','" & MONTHLY_UTILIZATION & "','" & DAILY_UTILIZATION & "','" & YEARLY_UTILIZATION & "','" & FLIGHT_LEG & "','" & FLEET_LEADER & "','" & RESTORED & "','" & TPPID & "','" & Engine_Model & "','" & Airline_SHORT_NAME & "', '" & SSO_ID & "') "
    conn.Execute sqlCmd
    
    Exit Function
    
errorhandler:
    'MsgBox ("Error while publishing data (Supporting Data 3)" & ":  " & Err.Description)
    ErrorFlag = True
    ErrorDesc = ErrorDesc & "Supporting Data - " & Err.Description & vbNewLine
End Function

Function SUPPDATA10_WRITEBACK(HeaderID As String, TPPID As Integer, Engine_Model As String, Airline_SHORT_NAME As String, SSO_ID As String) As Boolean

    On Error GoTo errorhandler:
    
    SUPPDATA10_WRITEBACK = True
    
    Dim sqlCmd As String
    ReadConnectionXML
    OpenSQLConnection
    
    S1 = "Supporting Data"
    
    Sheets(S1).Activate
    
    
    'Truncate table
    sqlCmd = " DELETE FROM WB_SUPP_DATA_T10 WHERE TPP_ID = '" & TPPID & "';"
    conn.Execute sqlCmd
   
    FLEET_12M_FH = Sheets(S1).Cells(20, 16)
    If Len(FLEET_12M_FH) > 100 Then
        MsgBox ("Supporting Data : FLEET_12M_FH  is exceeding field limit.")
        SUPPDATA10_WRITEBACK = False
        Exit Function
    Else
        FLEET_12M_FH = Replace(FLEET_12M_FH, "'", "''")
    End If
    
    FLEET_12M_DEP = Sheets(S1).Cells(21, 16)
    If Len(FLEET_12M_DEP) > 100 Then
        MsgBox ("Supporting Data : FLEET_12M_DEP  is exceeding field limit.")
        SUPPDATA10_WRITEBACK = False
        Exit Function
    Else
        FLEET_12M_DEP = Replace(FLEET_12M_DEP, "'", "''")
    End If
    
    AIRLINE_12M_FH = Sheets(S1).Cells(22, 16)
    If Len(AIRLINE_12M_FH) > 100 Then
        MsgBox ("Supporting Data : AIRLINE_12M_FH  is exceeding field limit.")
        SUPPDATA10_WRITEBACK = False
        Exit Function
    Else
        AIRLINE_12M_FH = Replace(AIRLINE_12M_FH, "'", "''")
    End If
    
    AIRLINE_12M_DEP = Sheets(S1).Cells(23, 16)
    If Len(AIRLINE_12M_DEP) > 100 Then
        MsgBox ("Supporting Data : AIRLINE_12M_DEP  is exceeding field limit.")
        SUPPDATA10_WRITEBACK = False
        Exit Function
    Else
        AIRLINE_12M_DEP = Replace(AIRLINE_12M_DEP, "'", "''")
    End If
    
    FIRST_RUN = Sheets(S1).Cells(26, 16)
    If Len(FIRST_RUN) > 100 Then
        MsgBox ("Supporting Data : FIRST_RUN  is exceeding field limit.")
        SUPPDATA10_WRITEBACK = False
        Exit Function
    Else
        FIRST_RUN = Replace(FIRST_RUN, "'", "''")
    End If
    
    RESTORED = Sheets(S1).Cells(27, 16)
    If Len(RESTORED) > 100 Then
        MsgBox ("Supporting Data : RESTORED  is exceeding field limit.")
        SUPPDATA10_WRITEBACK = False
        Exit Function
    Else
        RESTORED = Replace(RESTORED, "'", "''")
    End If
    
    
    sqlCmd = " INSERT INTO [dbo].[WB_SUPP_DATA_T10]([ID],[FLEET_12M_FH] ,[FLEET_12M_DEP],[AIRLINE_12M_FH],[AIRLINE_12M_DEP],[FIRST_RUN],[RESTORED],[TPP_ID]  ,[ENGINE_MODEL] ,[AIRLINE_SHORT_NAME],[SSO_ID])"
    sqlCmd = sqlCmd & " VALUES('" & HeaderID & "', '" & FLEET_12M_FH & "','" & FLEET_12M_DEP & "','" & AIRLINE_12M_FH & "','" & AIRLINE_12M_DEP & "','" & FIRST_RUN & "','" & RESTORED & "','" & TPPID & "','" & Engine_Model & "','" & Airline_SHORT_NAME & "', '" & SSO_ID & "') "
    conn.Execute sqlCmd
    i = i + 1
    
    Exit Function
    
errorhandler:
    'MsgBox ("Error while publishing data (Supporting Data 10)" & ":  " & Err.Description)
    ErrorFlag = True
    ErrorDesc = ErrorDesc & "Supporting Data - " & Err.Description & vbNewLine
    
End Function

Function SUPPDATA11_WRITEBACK(HeaderID As String, TPPID As Integer, Engine_Model As String, Airline_SHORT_NAME As String, SSO_ID As String) As Boolean

    '=========================
    ' Last updated: 9/10/2020
    '=========================
    
    On Error GoTo errorhandler:
    
    SUPPDATA11_WRITEBACK = True
    
    Dim sqlCmd As String
    ReadConnectionXML
    OpenSQLConnection
    
    S1 = "Supporting Data"

    Sheets(S1).Activate
    
   
    'Truncate table
    sqlCmd = " DELETE FROM WB_SUPP_DATA_T11 WHERE TPP_ID = '" & TPPID & "';"
    conn.Execute sqlCmd
    
    ' MB indicator from the page
    MB_INDICATOR = Sheets(S1).Cells(17, 41).Value
    If Len(MB_INDICATOR) > 100 Then
        MsgBox ("Supporting Data : MB_INDICATOR  is exceeding field limit.")
        SUPPDATA11_WRITEBACK = False
        Exit Function
    Else
        MB_INDICATOR = Replace(MB_INDICATOR, "'", "''")
    End If
    
    ' Totals
    AVERAGE_TOTAL_FOR_FLEET = Sheets(S1).Cells(18, 41).Value
    If Len(AVERAGE_TOTAL_FOR_FLEET) > 100 Then
        MsgBox ("Supporting Data : AVERAGE_TOTAL_FOR_FLEET  is exceeding field limit.")
        SUPPDATA11_WRITEBACK = False
        Exit Function
    Else
        AVERAGE_TOTAL_FOR_FLEET = Replace(AVERAGE_TOTAL_FOR_FLEET, "'", "''")
    End If
    
    'Programs
    AVERAGE_FLEET_PROGRAMS_FOR_FLEET = Sheets(S1).Cells(19, 41).Value
    If Len(AVERAGE_FLEET_PROGRAMS_FOR_FLEET) > 100 Then
        MsgBox ("Supporting Data : AVERAGE_FLEET_PROGRAMS_FOR_FLEET  is exceeding field limit.")
        SUPPDATA11_WRITEBACK = False
        Exit Function
    Else
        AVERAGE_FLEET_PROGRAMS_FOR_FLEET = Replace(AVERAGE_FLEET_PROGRAMS_FOR_FLEET, "'", "''")
    End If
    
    'Removals
    Removals = Sheets(S1).Cells(20, 41).Value
    If Len(Removals) > 100 Then
        MsgBox ("Supporting Data : REMOVALS  is exceeding field limit.")
        SUPPDATA11_WRITEBACK = False
        Exit Function
    Else
        Removals = Replace(Removals, "'", "''")
    End If
    
    'UAR
    UARS = Sheets(S1).Cells(21, 41).Value
    If Len(UARS) > 100 Then
        MsgBox ("Supporting Data : UARS  is exceeding field limit.")
        SUPPDATA11_WRITEBACK = False
        Exit Function
    Else
        UARS = Replace(UARS, "'", "''")
    End If
    
    'Water Wash
    WATERWASH = Sheets(S1).Cells(22, 42).Value
    If Len(WATERWASH) > 100 Then
        MsgBox ("Supporting Data : WATERWASH  is exceeding field limit.")
        SUPPDATA11_WRITEBACK = False
        Exit Function
    Else
        WATERWASH = Replace(WATERWASH, "'", "''")
    End If
    
    'CEOD
    CEOD = Sheets(S1).Cells(23, 42).Value
    If Len(CEOD) > 100 Then
        MsgBox ("Supporting Data : CEOD  is exceeding field limit.")
        SUPPDATA11_WRITEBACK = False
        Exit Function
    Else
        CEOD = Replace(CEOD, "'", "''")
    End If
    
    'CNR
    CNR = Sheets(S1).Cells(24, 42).Value
    If Len(CNR) > 100 Then
        MsgBox ("Supporting Data : CNR  is exceeding field limit.")
        SUPPDATA11_WRITEBACK = False
        Exit Function
    Else
        CNR = Replace(CNR, "'", "''")
    End If
    
    ' MPD
    AVERAGE_MPD_FOR_FLEET = Sheets(S1).Cells(25, 41).Value
    If Len(AVERAGE_MPD_FOR_FLEET) > 100 Then
        MsgBox ("Supporting Data : AVERAGE_MPD_FOR_FLEET  is exceeding field limit.")
        SUPPDATA11_WRITEBACK = False
        Exit Function
    Else
        AVERAGE_MPD_FOR_FLEET = Replace(AVERAGE_MPD_FOR_FLEET, "'", "''")
    End If

    sqlCmd = " INSERT INTO [dbo].[WB_SUPP_DATA_T11]([ID],[AVERAGE_MPD_FOR_FLEET] ,[AVERAGE_FLEET_PROGRAMS_FOR_FLEET],[AVERAGE_TOTAL_FOR_FLEET],[MB_INDICATOR],[TPP_ID]  ,[ENGINE_MODEL] ,[AIRLINE_SHORT_NAME],[SSO_ID],[REMOVALS],[UARS],[WATERWASH],[CEOD],[CNR])"
    sqlCmd = sqlCmd & " VALUES( '" & HeaderID & "','" & AVERAGE_MPD_FOR_FLEET & "','" & AVERAGE_FLEET_PROGRAMS_FOR_FLEET & "','" & AVERAGE_TOTAL_FOR_FLEET & "','" & MB_INDICATOR & "','" & TPPID & "','" & Engine_Model & "','" & Airline_SHORT_NAME & "','" & SSO_ID & "','" & Removals & "','" & UARS & "','" & WATERWASH & "','" & CEOD & "','" & CNR & "') "
    conn.Execute sqlCmd
   
  
    Exit Function
    
errorhandler:
    'MsgBox ("Error while publishing data (Supporting Data 11)" & ":  " & Err.Description)
    ErrorFlag = True
    ErrorDesc = ErrorDesc & "Supporting Data - " & Err.Description & vbNewLine
End Function


Function SUPPDATA16_WRITEBACK(HeaderID As String, TPPID As Integer, Engine_Model As String, Airline_SHORT_NAME As String, SSO_ID As String) As Boolean

    On Error GoTo errorhandler:
    
    SUPPDATA16_WRITEBACK = True
    
    S1 = "Supporting Data"
    Dim sqlCmd As String
    ReadConnectionXML
    OpenSQLConnection
    
    Sheets(S1).Activate
    
    RC = Sheets(S1).Cells(Rows.Count, 128).End(xlUp).Row
    If RC > 4 Then
        'LastCell = RC
        i = 5
        'Truncate table
        sqlCmd = " DELETE FROM WB_SUPP_DATA_T16 WHERE TPP_ID = '" & TPPID & "';"
        conn.Execute sqlCmd
        
        UER_TAT = Sheets(S1).Cells(2, 129)
        If Len(UER_TAT) > 100 Then
            MsgBox ("Supporting Data : UER_TAT  is exceeding field limit.")
            SUPPDATA16_WRITEBACK = False
            Exit Function
        Else
            UER_TAT = Replace(UER_TAT, "'", "''")
        End If
    
        SPACING = Sheets(S1).Cells(3, 129)
        If Len(SPACING) > 100 Then
            MsgBox ("Supporting Data : SPACING  is exceeding field limit.")
            SUPPDATA16_WRITEBACK = False
            Exit Function
        Else
            SPACING = Replace(SPACING, "'", "''")
        End If
        
        Do Until i > RC
        
        
        RATE_BASED_UER_DATE = Sheets(S1).Cells(i, 128)
        If Len(RATE_BASED_UER_DATE) > 1000 Then
            MsgBox ("Supporting Data : RATE_BASED_UER_DATE  is exceeding field limit.")
            SUPPDATA16_WRITEBACK = False
            Exit Function
        Else
            RATE_BASED_UER_DATE = Replace(RATE_BASED_UER_DATE, "'", "''")
        End If
 
        
        RATE_BASED_UER_RFI_DATE = Sheets(S1).Cells(i, 129)
        If Len(RATE_BASED_UER_RFI_DATE) > 1000 Then
            MsgBox ("Supporting Data : RATE_BASED_UER_RFI_DATE  is exceeding field limit.")
            SUPPDATA16_WRITEBACK = False
            Exit Function
        Else
            RATE_BASED_UER_RFI_DATE = Replace(RATE_BASED_UER_RFI_DATE, "'", "''")
        End If
        
        
        SECOND_LIFE_ANALYSIS = Sheets(S1).Cells(4, 117)
        If Len(SECOND_LIFE_ANALYSIS) > 100 Then
            MsgBox ("Supporting Data : SECOND_LIFE_ANALYSIS  is exceeding field limit.")
            SUPPDATA16_WRITEBACK = False
            Exit Function
        Else
            SECOND_LIFE_ANALYSIS = Replace(SECOND_LIFE_ANALYSIS, "'", "''")
        End If
        
        sqlCmd = " INSERT INTO [dbo].[WB_SUPP_DATA_T16]([ID],[UER_TAT],[SPACING],[RATE_BASED_UER_DATE],[RATE_BASED_UER_RFI_DATE],[TPP_ID]  ,[ENGINE_MODEL] ,[AIRLINE_SHORT_NAME],[SSO_ID],[SECOND_LIFE_ANALYSIS])"
        sqlCmd = sqlCmd & " VALUES( '" & HeaderID & "','" & UER_TAT & "','" & SPACING & "','" & RATE_BASED_UER_DATE & "','" & RATE_BASED_UER_RFI_DATE & "','" & TPPID & "','" & Engine_Model & "','" & Airline_SHORT_NAME & "', '" & SSO_ID & "', '" & SECOND_LIFE_ANALYSIS & "') "
        conn.Execute sqlCmd
        
        i = i + 1
        Loop
    End If
    
    Exit Function
    
errorhandler:
    'MsgBox ("Error while publishing data (Supporting Data 16)" & ":  " & Err.Description)
    ErrorFlag = True
    ErrorDesc = ErrorDesc & "Supporting Data - " & Err.Description & vbNewLine
End Function

Function SUPPDATA17_WRITEBACK(HeaderID As String, TPPID As Integer, Engine_Model As String, Airline_SHORT_NAME As String, SSO_ID As String) As Boolean

    On Error GoTo errorhandler:
    
    SUPPDATA17_WRITEBACK = True
    
    Dim sqlCmd As String
    ReadConnectionXML
    OpenSQLConnection
    
    S1 = "Supporting Data"
    
    Sheets(S1).Activate
    Dim i As Integer
     i = 20

    'Truncate table
    sqlCmd = " DELETE FROM WB_SUPP_DATA_T17 WHERE TPP_ID = '" & TPPID & "';"
    conn.Execute sqlCmd
   
    Do Until i > 25
    
    TOTAL_COUNT = Sheets(S1).Cells(i, 19)
    If Len(TOTAL_COUNT) > 100 Then
        MsgBox ("Supporting Data : TOTAL_COUNT  is exceeding field limit.")
        SUPPDATA17_WRITEBACK = False
        Exit Function
    Else
        TOTAL_COUNT = Replace(TOTAL_COUNT, "'", "''")
    End If
        
    TOTAL_RATE = Sheets(S1).Cells(i, 20)
    If Len(TOTAL_RATE) > 100 Then
        MsgBox ("Supporting Data : TOTAL_RATE  is exceeding field limit.")
        SUPPDATA17_WRITEBACK = False
        Exit Function
    Else
        TOTAL_RATE = Replace(TOTAL_RATE, "'", "''")
    End If


    BASIC_COUNT = Sheets(S1).Cells(i, 21)
    If Len(BASIC_COUNT) > 100 Then
        MsgBox ("Supporting Data : BASIC_COUNT  is exceeding field limit.")
        SUPPDATA17_WRITEBACK = False
        Exit Function
    Else
        BASIC_COUNT = Replace(BASIC_COUNT, "'", "''")
    End If
    
    BASIC_RATE = Sheets(S1).Cells(i, 22)
    If Len(BASIC_RATE) > 100 Then
        MsgBox ("Supporting Data : BASIC_RATE  is exceeding field limit.")
        SUPPDATA17_WRITEBACK = False
        Exit Function
    Else
        BASIC_RATE = Replace(BASIC_RATE, "'", "''")
    End If
    
    FLEET_RATE_TOTAL = Sheets(S1).Cells(i, 23)
    If Len(FLEET_RATE_TOTAL) > 100 Then
        MsgBox ("Supporting Data : FLEET_RATE_TOTAL  is exceeding field limit.")
        SUPPDATA17_WRITEBACK = False
        Exit Function
    Else
        FLEET_RATE_TOTAL = Replace(FLEET_RATE_TOTAL, "'", "''")
    End If
    
    FLEET_RATE_BASIC = Sheets(S1).Cells(i, 24)
    If Len(FLEET_RATE_BASIC) > 100 Then
        MsgBox ("Supporting Data : FLEET_RATE_BASIC  is exceeding field limit.")
        SUPPDATA17_WRITEBACK = False
        Exit Function
    Else
        FLEET_RATE_BASIC = Replace(FLEET_RATE_BASIC, "'", "''")
    End If
    
    EVENT_TYPE = Sheets(S1).Cells(i, 18)
    If Len(EVENT_TYPE) > 100 Then
        MsgBox ("Supporting Data : EVENT_TYPE  is exceeding field limit.")
        SUPPDATA17_WRITEBACK = False
        Exit Function
    Else
        EVENT_TYPE = Replace(EVENT_TYPE, "'", "''")
    End If
    
    

    
    sqlCmd = " INSERT INTO [dbo].[WB_SUPP_DATA_T17]([ID],[TOTAL_COUNT] ,[TOTAL_RATE],[BASIC_COUNT],[BASIC_RATE],[FLEET_RATE_TOTAL],[FLEET_RATE_BASIC],[TPP_ID]  ,[ENGINE_MODEL] ,[AIRLINE_SHORT_NAME],[SSO_ID],[EVENT_TYPE])"
    sqlCmd = sqlCmd & " VALUES( '" & HeaderID & "','" & TOTAL_COUNT & "','" & TOTAL_RATE & "','" & BASIC_COUNT & "','" & BASIC_RATE & "','" & FLEET_RATE_TOTAL & "','" & FLEET_RATE_BASIC & "','" & TPPID & "','" & Engine_Model & "','" & Airline_SHORT_NAME & "', '" & SSO_ID & "', '" & EVENT_TYPE & "') "
    conn.Execute sqlCmd
      i = i + 1
    
   Loop
   Exit Function
errorhandler:
    'MsgBox ("Error while publishing data (Supporting Data 17)" & ":  " & Err.Description)
    ErrorFlag = True
    ErrorDesc = ErrorDesc & "Supporting Data - " & Err.Description & vbNewLine
End Function



Function FleetProgramData_WriteBack(HeaderID As String, TPPID As Integer, Engine_Model As String, Airline_SHORT_NAME As String, SSO_ID As String) As Boolean
 
    ' ================================
    ' Last updated: 9/14/2020
    ' Code by: TCS & Asko Soimakallio
    '=================================
 
    On Error GoTo errorhandler:
    
    ReadConnectionXML
    OpenSQLConnection
    
    FleetProgramData_WriteBack = True
    S1 = "Fleet Program Data"
    
    Sheets(S1).Activate
    RC = Sheets(S1).Cells(Rows.Count, 4).End(xlUp).Row
    CC = Sheets(S1).Cells(10, Columns.Count).End(xlToLeft).Column
    
    If RC > 10 Then
        
        Dim FPDwb
        FPDwb = Sheets(S1).Range(Sheets(S1).Cells(1, 1), Sheets(S1).Cells(RC, CC)).Value
        
        i = 11
       
        'Truncate table
        sqlCmd = " DELETE FROM WB_FLEET_PROGRAMS_DATA_T WHERE TPP_ID = '" & TPPID & "';"
        conn.Execute sqlCmd
        
    
        Do Until i > RC
            PROGRAM_NAME = FPDwb(i, 4)
            If Len(PROGRAM_NAME) > 500 Then
                MsgBox ("Fleet Program Data : PROGRAM_NAME  is exceeding field limit.")
                FleetProgramData_WriteBack = False
                Exit Function
            Else
                PROGRAM_NAME = Replace(PROGRAM_NAME, "'", "''")
                PROGRAM_NAME = Application.WorksheetFunction.Clean(Replace(PROGRAM_NAME, Chr(10), " "))
            End If
            
            PROGRAM_TRACKING = FPDwb(i, 5)
            If Len(PROGRAM_TRACKING) > 100 Then
                MsgBox ("Fleet Program Data : PROGRAM_TRACKING  is exceeding field limit.")
                FleetProgramData_WriteBack = False
                Exit Function
            Else
                PROGRAM_TRACKING = Replace(PROGRAM_TRACKING, "'", "''")
            End If
            
            ACTIVATE_PROGRAM = FPDwb(i, 6)
            If Len(ACTIVATE_PROGRAM) > 100 Then
                MsgBox ("Fleet Program Data : ACTIVATE_PROGRAM  is exceeding field limit.")
                FleetProgramData_WriteBack = False
                Exit Function
            Else
                ACTIVATE_PROGRAM = Replace(ACTIVATE_PROGRAM, "'", "''")
            End If
            
            DATA_SOURCE = FPDwb(i, 7)
            If Len(DATA_SOURCE) > 100 Then
                MsgBox ("Fleet Program Data : DATA_SOURCE  is exceeding field limit.")
                FleetProgramData_WriteBack = False
                Exit Function
            Else
                DATA_SOURCE = Replace(DATA_SOURCE, "'", "''")
            End If
            
            PROGRAM_TYPE = FPDwb(i, 10)
            If Len(PROGRAM_TYPE) > 100 Then
                MsgBox ("Fleet Program Data : PROGRAM_TYPE  is exceeding field limit.")
                FleetProgramData_WriteBack = False
                Exit Function
            Else
                PROGRAM_TYPE = Replace(PROGRAM_TYPE, "'", "''")
            End If
            
            SB_NUMBER = FPDwb(i, 11)
            If Len(SB_NUMBER) > 100 Then
                MsgBox ("Fleet Program Data : SB_NUMBER  is exceeding field limit.")
                FleetProgramData_WriteBack = False
                Exit Function
            Else
                SB_NUMBER = Replace(SB_NUMBER, "'", "''")
            End If
            
            ROLL_UP = FPDwb(i, 12)
            If Len(ROLL_UP) > 100 Then
                MsgBox ("Fleet Program Data : ROLL_UP  is exceeding field limit.")
                FleetProgramData_WriteBack = False
                Exit Function
            Else
                ROLL_UP = Replace(ROLL_UP, "'", "''")
            End If
            
            CI_NUMBER = FPDwb(i, 13)
            If Len(CI_NUMBER) > 100 Then
                MsgBox ("Fleet Program Data : CI_NUMBER  is exceeding field limit.")
                FleetProgramData_WriteBack = False
                Exit Function
            Else
                CI_NUMBER = Replace(CI_NUMBER, "'", "''")
            End If
            
            ROLL_UP_1 = FPDwb(i, 14)
            If Len(ROLL_UP_1) > 100 Then
                MsgBox ("Fleet Program Data : ROLL_UP_1  is exceeding field limit.")
                FleetProgramData_WriteBack = False
                Exit Function
            Else
                ROLL_UP_1 = Replace(ROLL_UP_1, "'", "''")
            End If
            
            AD_NUMBER = FPDwb(i, 15)
            If Len(AD_NUMBER) > 100 Then
                MsgBox ("Fleet Program Data : AD_NUMBER  is exceeding field limit.")
                FleetProgramData_WriteBack = False
                Exit Function
            Else
                AD_NUMBER = Replace(AD_NUMBER, "'", "''")
            End If
            
            ROLL_UP_2 = FPDwb(i, 16)
            If Len(ROLL_UP_2) > 100 Then
                MsgBox ("Fleet Program Data : ROLL_UP_2  is exceeding field limit.")
                FleetProgramData_WriteBack = False
                Exit Function
            Else
                ROLL_UP_2 = Replace(ROLL_UP_2, "'", "''")
            End If
            
            ACTION_TYPE = FPDwb(i, 17)
            If Len(ACTION_TYPE) > 100 Then
                MsgBox ("Fleet Program Data : ACTION_TYPE  is exceeding field limit.")
                FleetProgramData_WriteBack = False
                Exit Function
            Else
                ACTION_TYPE = Replace(ACTION_TYPE, "'", "''")
            End If
            
            ACTION_METHOD = FPDwb(i, 18)
            If Len(ACTION_METHOD) > 100 Then
                MsgBox ("Fleet Program Data : ACTION_METHOD  is exceeding field limit.")
                FleetProgramData_WriteBack = False
                Exit Function
            Else
                ACTION_METHOD = Replace(ACTION_METHOD, "'", "''")
            End If
            
            INSPECTION_PROGRAM = FPDwb(i, 19)
            If Len(INSPECTION_PROGRAM) > 100 Then
                MsgBox ("Fleet Program Data : INSPECTION_PROGRAM  is exceeding field limit.")
                FleetProgramData_WriteBack = False
                Exit Function
            Else
                INSPECTION_PROGRAM = Replace(INSPECTION_PROGRAM, "'", "''")
            End If
            
            START_DATE = FPDwb(i, 23)
            START_DATE = Replace(START_DATE, "'", "''")
           
            TARGET_END_DATE = FPDwb(i, 24)
            TARGET_END_DATE = Replace(TARGET_END_DATE, "'", "''")
           
            
            PRIMARY_BASIS = FPDwb(i, 25)
            If Len(PRIMARY_BASIS) > 100 Then
                MsgBox ("Fleet Program Data : PRIMARY_BASIS  is exceeding field limit.")
                FleetProgramData_WriteBack = False
                Exit Function
            Else
                PRIMARY_BASIS = Replace(PRIMARY_BASIS, "'", "''")
            End If
            
            PRIMARY_INITIAL_THRESHOLD = FPDwb(i, 26)
            If Len(PRIMARY_INITIAL_THRESHOLD) > 100 Then
                MsgBox ("Fleet Program Data : PRIMARY_INITIAL_THRESHOLD  is exceeding field limit.")
                FleetProgramData_WriteBack = False
                Exit Function
            Else
                PRIMARY_INITIAL_THRESHOLD = Replace(PRIMARY_INITIAL_THRESHOLD, "'", "''")
            End If
            
            PRIMARY_REPETITIVE_THRESHOLD = FPDwb(i, 27)
            If Len(PRIMARY_REPETITIVE_THRESHOLD) > 100 Then
                MsgBox ("Fleet Program Data : PRIMARY_REPETITIVE_THRESHOLD  is exceeding field limit.")
                FleetProgramData_WriteBack = False
                Exit Function
            Else
                PRIMARY_REPETITIVE_THRESHOLD = Replace(PRIMARY_REPETITIVE_THRESHOLD, "'", "''")
            End If
            
            SECONDARY_BASIS = FPDwb(i, 28)
            If Len(SECONDARY_BASIS) > 100 Then
                MsgBox ("Fleet Program Data : SECONDARY_BASIS  is exceeding field limit.")
                FleetProgramData_WriteBack = False
                Exit Function
            Else
                SECONDARY_BASIS = Replace(SECONDARY_BASIS, "'", "''")
            End If
            
            SECONDARY_INITIAL_THRESHOLD = FPDwb(i, 29)
            If Len(SECONDARY_INITIAL_THRESHOLD) > 100 Then
                MsgBox ("Fleet Program Data : SECONDARY_INITIAL_THRESHOLD  is exceeding field limit.")
                FleetProgramData_WriteBack = False
                Exit Function
            Else
                SECONDARY_INITIAL_THRESHOLD = Replace(SECONDARY_INITIAL_THRESHOLD, "'", "''")
            End If
            
            SECONDARY_REPETITIVE_THRESHOLD = FPDwb(i, 30)
            If Len(SECONDARY_REPETITIVE_THRESHOLD) > 100 Then
                MsgBox ("Fleet Program Data : SECONDARY_REPETITIVE_THRESHOLD  is exceeding field limit.")
                FleetProgramData_WriteBack = False
                Exit Function
            Else
                SECONDARY_REPETITIVE_THRESHOLD = Replace(SECONDARY_REPETITIVE_THRESHOLD, "'", "''")
            End If
            
            
            LABOR_HOURS = FPDwb(i, 34)
            If LABOR_HOURS <> "" And IsNumeric(LABOR_HOURS) = False Then
                MsgBox ("Fleet Program Data : LABOR_HOURS  is not valid number.")
                FleetProgramData_WriteBack = False
                Exit Function
            End If
            
            
            GROUND_TIME_HRS = FPDwb(i, 35)
            If GROUND_TIME_HRS <> "" And IsNumeric(GROUND_TIME_HRS) = False Then
                MsgBox ("Fleet Program Data : GROUND_TIME_HRS  is not valid number.")
                FleetProgramData_WriteBack = False
                Exit Function
            End If
            
            Fallout_rate = FPDwb(i, 36)
            If Fallout_rate <> "" And IsNumeric(Fallout_rate) = False Then
                MsgBox ("Fleet Program Data : Fallout_rate  is not valid number.")
                FleetProgramData_WriteBack = False
                Exit Function
            End If
            
            FALLOUT_LABOR_HOURS = FPDwb(i, 37)
            If FALLOUT_LABOR_HOURS <> "" And IsNumeric(FALLOUT_LABOR_HOURS) = False Then
                MsgBox ("Fleet Program Data : FALLOUT_LABOR_HOURS  is not valid number.")
                FleetProgramData_WriteBack = False
                Exit Function
            End If
            
            FALLOUT_GROUND_TIME_HRS = FPDwb(i, 38)
            If FALLOUT_GROUND_TIME_HRS <> "" And IsNumeric(FALLOUT_GROUND_TIME_HRS) = False Then
                MsgBox ("Fleet Program Data : FALLOUT_GROUND_TIME_HRS  is not valid number.")
                FleetProgramData_WriteBack = False
                Exit Function
            End If
            
            REMOVAL_WORKSCOPE = FPDwb(i, 42)
            If Len(REMOVAL_WORKSCOPE) > 100 Then
                MsgBox ("Fleet Program Data : REMOVAL_WORKSCOPE  is exceeding field limit.")
                FleetProgramData_WriteBack = False
                Exit Function
            Else
                REMOVAL_WORKSCOPE = Replace(REMOVAL_WORKSCOPE, "'", "''")
            End If
    
            WING_TO_WING_TAT = FPDwb(i, 43)
            If WING_TO_WING_TAT <> "" And IsNumeric(WING_TO_WING_TAT) = False Then
                MsgBox ("Fleet Program Data : WING_TO_WING_TAT  is not valid number.")
                FleetProgramData_WriteBack = False
                Exit Function
            End If
            
            LABOR_HOURS_1 = FPDwb(i, 44)
            If LABOR_HOURS_1 <> "" And IsNumeric(LABOR_HOURS_1) = False Then
                MsgBox ("Fleet Program Data : LABOR_HOURS  is not valid number.")
                FleetProgramData_WriteBack = False
                Exit Function
            End If
            
            GROUND_TIME_HRS_1 = FPDwb(i, 45)
            If GROUND_TIME_HRS_1 <> "" And IsNumeric(GROUND_TIME_HRS_1) = False Then
                MsgBox ("Fleet Program Data : GROUND_TIME_HRS  is not valid number.")
                FleetProgramData_WriteBack = False
                Exit Function
            End If
            
            WEIBULL_GENERATES_DATES = FPDwb(i, 48)
            If Len(WEIBULL_GENERATES_DATES) > 100 Then
                MsgBox ("Fleet Program Data : WEIBULL_GENERATES_DATES  is exceeding field limit.")
                FleetProgramData_WriteBack = False
                Exit Function
            Else
                WEIBULL_GENERATES_DATES = Replace(WEIBULL_GENERATES_DATES, "'", "''")
            End If
            
            BETA = FPDwb(i, 49)
            If Len(BETA) > 100 Then
                MsgBox ("Fleet Program Data : BETA  is exceeding field limit.")
                FleetProgramData_WriteBack = False
                Exit Function
            Else
                BETA = Replace(BETA, "'", "''")
            End If
            
            ETA = FPDwb(i, 50)
            If Len(ETA) > 100 Then
                MsgBox ("Fleet Program Data : ETA  is exceeding field limit.")
                FleetProgramData_WriteBack = False
                Exit Function
            Else
                BETA = Replace(ETA, "'", "''")
            End If
            
            PERCENTAGE = FPDwb(i, 51)
            If PERCENTAGE <> "" And IsNumeric(PERCENTAGE) = False Then
                MsgBox ("Fleet Program Data : PERCENTAGE  is not valid number.")
                FleetProgramData_WriteBack = False
                Exit Function
            End If
            
            EDITABLE = FPDwb(i, 52)
            If Len(EDITABLE) > 100 Then
                MsgBox ("Fleet Program Data : EDITABLE  is exceeding field limit.")
                FleetProgramData_WriteBack = False
                Exit Function
            Else
                EDITABLE = Replace(EDITABLE, "'", "''")
            End If
            
            Hidden_N = FPDwb(i, 53)
            If Len(Hidden_N) > 100 Then
                MsgBox ("Fleet Program Data : Hidden  is exceeding field limit.")
                FleetProgramData_WriteBack = False
                Exit Function
            Else
                Hidden_N = Replace(Hidden_N, "'", "''")
            End If
            
            FLEET_ROLL_UP = FPDwb(i, 54)
            If Len(FLEET_ROLL_UP) > 100 Then
                MsgBox ("Fleet Program Data : FLEET_ROLL_UP  is exceeding field limit.")
                FleetProgramData_WriteBack = False
                Exit Function
            Else
                FLEET_ROLL_UP = Replace(FLEET_ROLL_UP, "'", "''")
            End If
            
            MONTHS = FPDwb(i, 55)
            If Len(MONTHS) > 100 Then
                MsgBox ("Fleet Program Data : MONTHS  is exceeding field limit.")
                FleetProgramData_WriteBack = False
                Exit Function
            Else
                MONTHS = Replace(MONTHS, "'", "''")
            End If
            
            LOCK_INPUTS = FPDwb(i, 57)
            If Len(LOCK_INPUTS) > 100 Then
                MsgBox ("Fleet Program Data : LOCK_INPUTS  is exceeding field limit.")
                FleetProgramData_WriteBack = False
                Exit Function
            Else
                LOCK_INPUTS = Replace(LOCK_INPUTS, "'", "''")
            End If
            
            
            IFSD = FPDwb(i, 59)
            If Len(IFSD) > 100 Then
                MsgBox ("Fleet Program Data : IFSD  is exceeding field limit.")
                FleetProgramData_WriteBack = False
                Exit Function
            Else
                IFSD = Replace(IFSD, "'", "''")
            End If
            
            TOA = FPDwb(i, 60)
            If Len(TOA) > 100 Then
                MsgBox ("Fleet Program Data : TOA  is exceeding field limit.")
                FleetProgramData_WriteBack = False
                Exit Function
            Else
                TOA = Replace(TOA, "'", "''")
            End If
            
            INTE = FPDwb(i, 61)
            If Len(INTE) > 100 Then
                MsgBox ("Fleet Program Data : INTE  is exceeding field limit.")
                FleetProgramData_WriteBack = False
                Exit Function
            Else
                INTE = Replace(INTE, "'", "''")
            End If
            
            Se = FPDwb(i, 62)
            If Len(Se) > 100 Then
                MsgBox ("Fleet Program Data : SE  is exceeding field limit.")
                FleetProgramData_WriteBack = False
                Exit Function
            Else
                Se = Replace(Se, "'", "''")
            End If
            
            DELAY_AOG = FPDwb(i, 63)
            If Len(Se) > 100 Then
                MsgBox ("Fleet Program Data : SE  is exceeding field limit.")
                FleetProgramData_WriteBack = False
                Exit Function
            Else
                Se = Replace(Se, "'", "''")
            End If
            
            CANCELLATION = FPDwb(i, 64)
            If Len(CANCELLATION) > 100 Then
                MsgBox ("Fleet Program Data : CANCELLATION  is exceeding field limit.")
                FleetProgramData_WriteBack = False
                Exit Function
            Else
                CANCELLATION = Replace(CANCELLATION, "'", "''")
            End If
            
            Removal = FPDwb(i, 65)
            If Len(Removal) > 100 Then
                MsgBox ("Fleet Program Data : REMOVAL  is exceeding field limit.")
                FleetProgramData_WriteBack = False
                Exit Function
            Else
                Removal = Replace(Removal, "'", "''")
            End If
            
            MB = FPDwb(i, 66)
            If Len(MB) > 100 Then
                MsgBox ("Fleet Program Data : MB  is exceeding field limit.")
                FleetProgramData_WriteBack = False
                Exit Function
            Else
                MB = Replace(MB, "'", "''")
            End If
            
            UGT = FPDwb(i, 67)
            If Len(UGT) > 100 Then
                MsgBox ("Fleet Program Data : UGT  is exceeding field limit.")
                FleetProgramData_WriteBack = False
                Exit Function
            Else
                UGT = Replace(UGT, "'", "''")
            End If
            
            TIME_CYCLES_THRESHOLD = FPDwb(i, 71)
            If Len(TIME_CYCLES_THRESHOLD) > 100 Then
                MsgBox ("Fleet Program Data : TIME_CYCLES_THRESHOLD  is exceeding field limit.")
                FleetProgramData_WriteBack = False
                Exit Function
            Else
                TIME_CYCLES_THRESHOLD = Replace(TIME_CYCLES_THRESHOLD, "'", "''")
            End If
            
            Weibull_N = FPDwb(i, 72)
            If Len(Weibull_N) > 100 Then
                MsgBox ("Fleet Program Data : Weibull  is exceeding field limit.")
                FleetProgramData_WriteBack = False
                Exit Function
            Else
                Weibull_N = Replace(Weibull_N, "'", "''")
            End If
            
            DISCRETE = FPDwb(i, 73)
            If Len(DISCRETE) > 100 Then
                MsgBox ("Fleet Program Data : DISCRETE  is exceeding field limit.")
                FleetProgramData_WriteBack = False
                Exit Function
            Else
                DISCRETE = Replace(DISCRETE, "'", "''")
            End If
            
            PARAMETRIC = FPDwb(i, 74)
            If Len(PARAMETRIC) > 100 Then
                MsgBox ("Fleet Program Data : PARAMETRIC  is exceeding field limit.")
                FleetProgramData_WriteBack = False
                Exit Function
            Else
                PARAMETRIC = Replace(PARAMETRIC, "'", "''")
            End If
            
            RANDOM = FPDwb(i, 75)
            If Len(RANDOM) > 100 Then
                MsgBox ("Fleet Program Data : RANDOM  is exceeding field limit.")
                FleetProgramData_WriteBack = False
                Exit Function
            Else
                RANDOM = Replace(RANDOM, "'", "''")
            End If
            
            MANUAL = FPDwb(i, 76)
            If Len(MANUAL) > 100 Then
                MsgBox ("Fleet Program Data : MANUAL  is exceeding field limit.")
                FleetProgramData_WriteBack = False
                Exit Function
            Else
                MANUAL = Replace(MANUAL, "'", "''")
            End If
            
            PARAMETER_A = FPDwb(i, 80)
            If Len(PARAMETER_A) > 100 Then
                MsgBox ("Fleet Program Data : PARAMETER_A  is exceeding field limit.")
                FleetProgramData_WriteBack = False
                Exit Function
            Else
                PARAMETER_A = Replace(PARAMETER_A, "'", "''")
            End If
            
            PARAMETER_B = FPDwb(i, 81)
            If Len(PARAMETER_B) > 100 Then
                MsgBox ("Fleet Program Data : PARAMETER_B  is exceeding field limit.")
                FleetProgramData_WriteBack = False
                Exit Function
            Else
                PARAMETER_B = Replace(PARAMETER_B, "'", "''")
            End If
            
            Formula_N = FPDwb(i, 82)
            If Len(Formula_N) > 100 Then
                MsgBox ("Fleet Program Data : Formula  is exceeding field limit.")
                FleetProgramData_WriteBack = False
                Exit Function
            Else
                Formula_N = Replace(Formula_N, "'", "''")
            End If
            
            MANUAL_VALUE = FPDwb(i, 86)
            If Len(MANUAL_VALUE) > 100 Then
                MsgBox ("Fleet Program Data : MANUAL_VALUE  is exceeding field limit.")
                FleetProgramData_WriteBack = False
                Exit Function
            Else
                MANUAL_VALUE = Replace(MANUAL_VALUE, "'", "''")
            End If
            
            SCORE_VALUE = FPDwb(i, 90)
            If Len(SCORE_VALUE) > 100 Then
                MsgBox ("Fleet Program Data : SCORE_VALUE  is exceeding field limit.")
                FleetProgramData_WriteBack = False
                Exit Function
            Else
                SCORE_VALUE = Replace(SCORE_VALUE, "'", "''")
            End If
            
            PROGRAM_INSTRCTNS = FPDwb(i, 92)
            If Len(PROGRAM_INSTRCTNS) > 4000 Then
                MsgBox ("Fleet Program Data : PROGRAM_INSTRCTNS  is exceeding field limit.")
                FleetProgramData_WriteBack = False
                Exit Function
            Else
                PROGRAM_INSTRCTNS = Replace(PROGRAM_INSTRCTNS, "'", "''")
                PROGRAM_INSTRCTNS = Application.WorksheetFunction.Clean(Replace(PROGRAM_INSTRCTNS, Chr(10), " "))
            End If
            
            Program_status = FPDwb(i, 103)
            If Len(Program_status) > 100 Then
                MsgBox ("Fleet Program Data : Program_status  is exceeding field limit.")
                FleetProgramData_WriteBack = False
                Exit Function
            Else
                Program_status = Replace(Program_status, "'", "''")
            End If
            
            TARGET_START_DATE = FPDwb(i, 104)
            If Len(TARGET_START_DATE) > 100 Then
                MsgBox ("Fleet Program Data : TARGET_START_DATE  is exceeding field limit.")
                FleetProgramData_WriteBack = False
                Exit Function
            Else
                TARGET_START_DATE = Replace(TARGET_START_DATE, "'", "''")
            End If
            
            BARRIERS_TO_COMPLETION = FPDwb(i, 105)
            If Len(BARRIERS_TO_COMPLETION) > 100 Then
                MsgBox ("Fleet Program Data : BARRIERS_TO_COMPLETION  is exceeding field limit.")
                FleetProgramData_WriteBack = False
                Exit Function
            Else
                BARRIERS_TO_COMPLETION = Replace(BARRIERS_TO_COMPLETION, "'", "''")
            End If
            
            
            TARGET_DATE = FPDwb(i, 106)
            If Len(TARGET_DATE) > 100 Then
                MsgBox ("Fleet Program Data : TARGET_DATE  is exceeding field limit.")
                FleetProgramData_WriteBack = False
                Exit Function
            Else
                TARGET_DATE = Replace(TARGET_DATE, "'", "''")
            End If
            
            
            STATUS_COMMENTS = FPDwb(i, 107)
            If Len(STATUS_COMMENTS) > 4000 Then
                MsgBox ("Fleet Program Data : STATUS_COMMENTS  is exceeding field limit.")
                FleetProgramData_WriteBack = False
                Exit Function
            Else
                STATUS_COMMENTS = Replace(STATUS_COMMENTS, "'", "''")
                STATUS_COMMENTS = Application.WorksheetFunction.Clean(Replace(STATUS_COMMENTS, Chr(10), " "))
            End If
            
            ANALYTIC_TYPE = FPDwb(i, 93)
            If Len(ANALYTIC_TYPE) > 1000 Then
                MsgBox ("Fleet Program Data : ANALYTIC_TYPE  is exceeding field limit.")
                FleetProgramData_WriteBack = False
                Exit Function
            Else
                ANALYTIC_TYPE = Replace(ANALYTIC_TYPE, "'", "''")
                ANALYTIC_TYPE = Application.WorksheetFunction.Clean(Replace(ANALYTIC_TYPE, Chr(10), " "))
            End If
            
            ANALYTIC_NAME = FPDwb(i, 94)
            If Len(ANALYTIC_NAME) > 1000 Then
                MsgBox ("Fleet Program Data : ANALYTIC_NAME  is exceeding field limit.")
                FleetProgramData_WriteBack = False
                Exit Function
            Else
                ANALYTIC_NAME = Replace(ANALYTIC_NAME, "'", "''")
                ANALYTIC_NAME = Application.WorksheetFunction.Clean(Replace(ANALYTIC_NAME, Chr(10), " "))
            End If
            
            DRM_DELTA = FPDwb(i, 95)
            If DRM_DELTA <> "" And IsNumeric(DRM_DELTA) = False Then
                MsgBox ("Fleet Program Data : DRM_DELTA  is not valid number.")
                FleetProgramData_WriteBack = False
                Exit Function
            Else
                DRM_DELTA = Replace(DRM_DELTA, "'", "''")
            End If
            
            CDM_DELTA = FPDwb(i, 96)
            If CDM_DELTA <> "" And IsNumeric(CDM_DELTA) = False Then
                MsgBox ("Fleet Program Data : CDM_DELTA  is not valid number.")
                FleetProgramData_WriteBack = False
                Exit Function
            Else
                CDM_DELTA = Replace(CDM_DELTA, "'", "''")
            End If
            
            ANALYTIC_TH = FPDwb(i, 97)
            If ANALYTIC_TH <> "" And IsNumeric(ANALYTIC_TH) = False Then
                MsgBox ("Fleet Program Data : ANALYTIC_TH  is not valid number.")
                FleetProgramData_WriteBack = False
                Exit Function
            Else
                ANALYTIC_TH = Replace(ANALYTIC_TH, "'", "''")
            End If
            
            PART_NUMBER = FPDwb(i, 98)
            If Len(PART_NUMBER) > 4000 Then
                MsgBox ("Fleet Program Data : PART_NUMBER  is exceeding field limit.")
                FleetProgramData_WriteBack = False
                Exit Function
            Else
                PART_NUMBER = Replace(PART_NUMBER, "'", "''")
                PART_NUMBER = Application.WorksheetFunction.Clean(Replace(PART_NUMBER, Chr(10), " "))
            End If
            
            Module_N = FPDwb(i, 100)
            If Len(Module_N) > 4000 Then
                MsgBox ("Fleet Program Data : MODULE  is exceeding field limit.")
                FleetProgramData_WriteBack = False
                Exit Function
            Else
                Module = Replace(Module_N, "'", "''")
                Module = Application.WorksheetFunction.Clean(Replace(Module_N, Chr(10), " "))
            End If
            
            
            sqlCmd = "INSERT INTO [dbo].[WB_FLEET_PROGRAMS_DATA_T]([ID],[PROGRAM_NAME]           ,[PROGRAM_TRACKING]           ,[ACTIVATE_PROGRAM]           ,[DATA_SOURCE]           ,[PROGRAM_TYPE]           ,[SB_NUMBER]           ,[ROLL_UP]           ,[CI_NUMBER]           ,[ROLL_UP_1]           ,[AD_NUMBER]           ,[ROLL_UP_2]           ,[ACTION_TYPE]           ,[ACTION_METHOD]           ,[INSPECTION_PROGRAM]           ,[START_DATE]           ,[TARGET_END_DATE]"
            sqlCmd = sqlCmd & " ,[PRIMARY_BASIS] , [PRIMARY_INITIAL_THRESHOLD], [PRIMARY_REPETITIVE_THRESHOLD], [SECONDARY_BASIS], [SECONDARY_INITIAL_THRESHOLD], [SECONDARY_REPETITIVE_THRESHOLD], [LABOR_HOURS], [GROUND_TIME_HRS], [FALLOUT_RATE], [FALLOUT_LABOR_HOURS], [FALLOUT_GROUND_TIME_HRS], [REMOVAL_WORKSCOPE], [WING_TO_WING_TAT], [LABOR_HOURS_1]"
            sqlCmd = sqlCmd & "     ,[GROUND_TIME_HRS_1] , [WEIBULL_GENERATES_DATES], [BETA], [ETA]"
            sqlCmd = sqlCmd & "     , [PERCENTAGE] , [EDITABLE], [Hidden], [FLEET_ROLL_UP], [MONTHS], [LOCK_INPUTS], [IFSD], [TOA], [Int], [SE], [DELAY_AOG], [CANCELLATION]"
            sqlCmd = sqlCmd & "   , [REMOVAL] , [MB], [UGT], [TIME_CYCLES_THRESHOLD], [Weibull], [DISCRETE], [PARAMETRIC], [RANDOM], [MANUAL], [PARAMETER_A], [PARAMETER_B], [Formula], [MANUAL_VALUE], [SCORE_VALUE]"
            sqlCmd = sqlCmd & "    ,[PROGRAM_INSTRCTNS],[PROGRAM_STATUS]           ,[TARGET_START_DATE]           ,[BARRIERS_TO_COMPLETION]           ,[TARGET_DATE]           ,[STATUS_COMMENTS]           ,[TPP_ID] ,[ENGINE_MODEL]           ,[AIRLINE_SHORT_NAME],[SSO_ID],[ANALYTIC_NAME],[DRM_DELTA],[CDM_DELTA], [PART_NUMBER],[MODULE],[ANALYTIC_TYPE],[ANALYTIC_TH])"
    
            sqlCmd = sqlCmd & " VALUES('" & HeaderID & "','" & PROGRAM_NAME & "', '" & PROGRAM_TRACKING & "','" & ACTIVATE_PROGRAM & "','" & DATA_SOURCE & "','" & PROGRAM_TYPE & "','" & SB_NUMBER & "','" & ROLL_UP & "','" & CI_NUMBER & "','" & ROLL_UP_1 & "','" & AD_NUMBER & "','" & ROLL_UP_2 & "','" & ACTION_TYPE & "','" & ACTION_METHOD & "','" & INSPECTION_PROGRAM & "','" & START_DATE & "','" & TARGET_END_DATE & "','" & PRIMARY_BASIS & "','" & PRIMARY_INITIAL_THRESHOLD & "','" & PRIMARY_REPETITIVE_THRESHOLD & "','" & SECONDARY_BASIS & "','" & SECONDARY_INITIAL_THRESHOLD & "','" & SECONDARY_REPETITIVE_THRESHOLD & "','" & LABOR_HOURS & "','" & GROUND_TIME_HRS & "','" & Fallout_rate & "','" & FALLOUT_LABOR_HOURS & "','" & FALLOUT_GROUND_TIME_HRS & "',"
            sqlCmd = sqlCmd & "'" & REMOVAL_WORKSCOPE & "','" & WING_TO_WING_TAT & "','" & LABOR_HOURS_1 & "','" & GROUND_TIME_HRS_1d & "','" & WEIBULL_GENERATES_DATES & "','" & BETA & "','" & ETA & "','" & PERCENTAGE & "','" & EDITABLE & "','" & Hidden_N & "','" & FLEET_ROLL_UP & "','" & MONTHS & "'"
            sqlCmd = sqlCmd & ",'" & LOCK_INPUTS & "','" & IFSD & "','" & TOA & "','" & INTE & "','" & Se & "','" & DELAY_AOG & "','" & CANCELLATION & "','" & Removal & "','" & MB & "','" & UGT & "','" & TIME_CYCLES_THRESHOLD & "','" & Weibull_N & "','" & DISCRETE & "','" & PARAMETRIC & "','" & RANDOM & "','" & MANUAL & "','" & PARAMETER_A & "','" & PARAMETER_B & "','" & Formula_N & "','" & MANUAL_VALUE & "','" & SCORE_VALUE & "','" & PROGRAM_INSTRCTNS & "','" & Program_status & "','" & TARGET_START_DATE & "','" & BARRIERS_TO_COMPLETION & "','" & TARGET_DATE & "','" & STATUS_COMMENTS & "','" & TPPID & "','" & Engine_Model & "','" & Airline_SHORT_NAME & "', '" & SSO_ID & "', '" & ANALYTIC_NAME & "', '" & DRM_DELTA & "', '" & CDM_DELTA & "' , '" & PART_NUMBER & "' , '" & Module_N & "' , '" & ANALYTIC_TYPE & "' , '" & ANALYTIC_TH & "') "
         
            conn.Execute sqlCmd
            i = i + 1
    
        Loop
        
        Erase FPDwb
    End If
    Exit Function
    
errorhandler:
    
    ErrorFlag = True
    ErrorDesc = ErrorDesc & "Fleet Program Data - " & Err.Description & vbNewLine
    
End Function

Function CalculationSrc1_Writeback(HeaderID As String, TPPID As Integer, Engine_Model As String, Airline_SHORT_NAME As String, SSO_ID As String) As Boolean
    
    On Error GoTo errorhandler:
    
    CalculationSrc1_Writeback = True
    Dim sqlCmd As String
    S1 = "Calculation Source"
    
    ReadConnectionXML
    OpenSQLConnection
        
    CalculationSrc1_Writeback = True
    
    'Truncate Table
    sqlCmd = " DELETE FROM WB_CALCULATION_SRC_1 WHERE TPP_ID = '" & TPPID & "';"
    conn.Execute sqlCmd
    
    Valid_Date = Sheets(S1).Cells(2, 2)
    If Len(Valid_Date) > 100 Then
        MsgBox ("Calculation Source : Valid_Date  is exceeding field limit.")
        CalculationSrc1_Writeback = False
        Exit Function
    Else
        Valid_Date = Replace(Valid_Date, "'", "''")
    End If
    
    Engine_Details_Last_Updated = Sheets(S1).Cells(3, 2)
    If Len(Engine_Details_Last_Updated) > 100 Then
        MsgBox ("Calculation Source : Engine_Details_Last_Updated  is exceeding field limit.")
        CalculationSrc1_Writeback = False
        Exit Function
    Else
        Engine_Details_Last_Updated = Replace(Engine_Details_Last_Updated, "'", "''")
    End If
    
    Removal_Summary_Last_Updated = Sheets(S1).Cells(4, 2)
    If Len(Removal_Summary_Last_Updated) > 100 Then
        MsgBox ("Calculation Source : Removal_Summary_Last_Updated  is exceeding field limit.")
        CalculationSrc1_Writeback = False
        Exit Function
    Else
        Removal_Summary_Last_Updated = Replace(Removal_Summary_Last_Updated, "'", "''")
    End If
    
    Weekly_View_Last_Updated = Sheets(S1).Cells(5, 2)
    If Len(Weekly_View_Last_Updated) > 100 Then
        MsgBox ("Calculation Source : Weekly_View_Last_Updated  is exceeding field limit.")
        CalculationSrc1_Writeback = False
        Exit Function
    Else
        Weekly_View_Last_Updated = Replace(Weekly_View_Last_Updated, "'", "''")
    End If
    
    Monthly_View_Last_Updated = Sheets(S1).Cells(6, 2)
    If Len(Monthly_View_Last_Updated) > 100 Then
        MsgBox ("Calculation Source : Monthly_View_Last_Updated  is exceeding field limit.")
        CalculationSrc1_Writeback = False
        Exit Function
    Else
        Monthly_View_Last_Updated = Replace(Monthly_View_Last_Updated, "'", "''")
    End If
    
    UERs_last_Updated = Sheets(S1).Cells(7, 2)
    If Len(UERs_last_Updated) > 100 Then
        MsgBox ("Calculation Source : UERs_Last_Updated  is exceeding field limit.")
        CalculationSrc1_Writeback = False
        Exit Function
    Else
        UERs_last_Updated = Replace(UERs_last_Updated, "'", "''")
    End If
    
    Valid_Date_Updated = Sheets(S1).Cells(2, 4)
    If Len(Valid_Date_Updated) > 100 Then
        MsgBox ("Calculation Source : Valid_Date_Updated  is exceeding field limit.")
        CalculationSrc1_Writeback = False
        Exit Function
    Else
        Valid_Date_Updated = Replace(Valid_Date_Updated, "'", "''")
    End If
    
    Inpection_Summary_Last_Updated = Sheets(S1).Cells(3, 4)
    If Len(Inpection_Summary_Last_Updated) > 100 Then
        MsgBox ("Calculation Source : Inpection_Summary_Last_Updated  is exceeding field limit.")
        CalculationSrc1_Writeback = False
        Exit Function
    Else
        Inpection_Summary_Last_Updated = Replace(Inpection_Summary_Last_Updated, "'", "''")
    End If
    
    Fleet_Program_Tolerance_Days = Sheets(S1).Cells(4, 4)
    If Fleet_Program_Tolerance_Days <> "" And IsNumeric(Fleet_Program_Tolerance_Days) = False Then
        MsgBox ("Calculation Source : Fleet_Program_Tolerance_Days  is not valid number.")
        CalculationSrc1_Writeback = False
        Exit Function
    End If
    
    Removal_Tolerance_Days = Sheets(S1).Cells(5, 4)
    If Removal_Tolerance_Days <> "" And IsNumeric(Removal_Tolerance_Days) = False Then
        MsgBox ("Calculation Source : Removal_Tolerance_Days  is not valid number.")
        CalculationSrc1_Writeback = False
        Exit Function
    End If
    
    AC_Tolerance_Days = 0
    Date_Range = Sheets(S1).Cells(7, 4)
    If Len(Date_Range) > 100 Then
        MsgBox ("Calculation Source : Date_Range  is exceeding field limit.")
        CalculationSrc1_Writeback = False
        Exit Function
    Else
        Date_Range = Replace(Date_Range, "'", "''")
    End If
    
    sqlCmd = "INSERT INTO [dbo].[WB_CALCULATION_SRC_1]  ( ID,Valid_Date ,  Engine_Details_Last_Updated ,Removal_Summary_Last_Updated,Weekly_View_Last_Updated,Monthly_View_Last_Updated , "
    sqlCmd = sqlCmd & " UERs_last_Updated,Valid_Date_Updated,Inpection_Summary_Last_Updated ,      Fleet_Program_Tolerance_Days,       Removal_Tolerance_Days,       AC_Tolerance_Days,       "
    sqlCmd = sqlCmd & " Date_Range,       TPP_ID,        ENGINE_MODEL,        AIRLINE_SHORT_NAME  ,SSO_ID  )  "
    
    sqlCmd = sqlCmd & " VALUES('" & HeaderID & "','" & Valid_Date & "', '" & Engine_Details_Last_Updated & "','" & Removal_Summary_Last_Updated & "','" & Weekly_View_Last_Updated & "','" & Monthly_View_Last_Updated & "','" & UERs_last_Updated & "','" & Valid_Date_Updated & "','" & Inpection_Summary_Last_Updated & "','" & Fleet_Program_Tolerance_Days & "', "
    sqlCmd = sqlCmd & " '" & Removal_Tolerance_Days & "','" & AC_Tolerance_Days & "', '" & Date_Range & "','" & TPPID & "','" & Engine_Model & "','" & Airline_SHORT_NAME & "', '" & SSO_ID & "') "
    
    conn.Execute sqlCmd
    
    Exit Function
    
errorhandler:
    
    ErrorFlag = True
    ErrorDesc = ErrorDesc & "Calculation Source - " & Err.Description & vbNewLine

End Function

Sub Get_EngMdl_PSE_Cause_Data(Optional EngineModel As String)

    ' ================================
    ' Last updated: 11/16/2020
    '=================================
    
    S1 = "Cause WS"
    Dim sqlCmd As String
    Dim RecordSet  As ADODB.RecordSet
    
    If EngineModel = "CF34-3A" Or EngineModel = "CF34-3B" Or EngineModel = "CF34-3A1" Then
        EngineModel_1 = "CF34-3"
    Else
        EngineModel_1 = EngineModel
    End If
    
    sqlCmd = " SELECT  [ENGINE_MODEL],[PSE_CAUSE_DESC],[WORKSCOPE] FROM [dbo].[TPP_ENG_MDL_PSE_CAUSE_CODE_T] WHERE ENGINE_MODEL = '" & EngineModel_1 & "'"
    
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    
    RCC = Sheets(S1).Cells(Rows.Count, 1).End(xlUp).Row
    If RCC > 1 Then
        Sheets(S1).Range(Sheets(S1).Cells(2, 1), Sheets(S1).Cells(RCC, 3)).Clear
    End If
        
    Sheets(S1).Cells(2, 1).CopyFromRecordset RecordSet
    RecordSet.Close
    
    RC = Sheets(S1).Cells(Rows.Count, 1).End(xlUp).Row
    If RC > 1 Then
        Dim Tarray
        Tarray = Sheets(S1).Range(Sheets(S1).Cells(2, 1), Sheets(S1).Cells(RC, 1)).Value
        Sheets(S1).Range(Sheets(S1).Cells(2, 1), Sheets(S1).Cells(RC, 1)).Value = Tarray
        
        Erase Tarray
    End If
        
End Sub

Public Function DummyEngineName(RCnum, ESN) As Variant

    ' ================================
    ' Last updated: 12/19/2016
    ' Code by: Asko Soimakallio
    '=================================
    
    S0 = "Supporting Data"
    S1 = "Calculation Source"

    EngineModel = Sheets(S0).Cells(6, 71).Value
    EngineSeries = Sheets(S0).Cells(10, 10).Value
    CustCode = ""
    CustA = Sheets(S0).Range(Sheets(S0).Cells(15, 13), Sheets(S0).Cells(19, 13)).Value
    
    For i = 1 To 5
        If CustCode = "" And CustA(i, 1) <> "" Then
            CustCode = CustA(i, 1)
        Else
            If CustA(i, 1) <> "" Then
                CustCode = CustCode & ";" & CustA(i, 1)
            Else
                Exit For
            End If
        End If
    Next i
    Erase CustA
    
    RC = Sheets(S1).Cells(Rows.Count, 2).End(xlUp).Row
    CC = Sheets(S1).Cells(8, Columns.Count).End(xlToLeft).Column
    If RC > 8 Then
        CSwb = Sheets(S1).Range(Sheets(S1).Cells(1, 1), Sheets(S1).Cells(RC, CC)).Value
        
        If RCnum <> "" Then
            If CSwb(RCnum, 1) = "" Then
                DummyEngineName = CSwb(RCnum, 2)
            Else
                If EngineSeries = "" Then
                    DummyEngineName = CustCode & "_" & EngineModel & "_" & CSwb(RCnum, 2)
                Else
                    DummyEngineName = CustCode & "_" & EngineModel & "_" & EngineSeries & "_" & CSwb(RCnum, 2)
                End If
            End If
        Else
            For i = 9 To UBound(CSwb)
                If CSwb(i, 2) = ESN Then
                    If CSwb(i, 1) = "" Then
                        DummyEngineName = CSwb(i, 2)
                        Exit For
                    Else
                        If EngineSeries = "" Then
                            DummyEngineName = CustCode & "_" & EngineModel & "_" & CSwb(i, 2)
                            Exit For
                        Else
                            DummyEngineName = CustCode & "_" & EngineModel & "_" & EngineSeries & "_" & CSwb(i, 2)
                            Exit For
                        End If
                    End If
                End If
            Next i
            
        End If
        Erase CSwb
    End If
        
End Function

Sub GetEng_Schedule_Data(Optional EngineSeries As String)
   
    ReadConnectionXML
    OpenSQLConnection
    
    S1 = "Engine Schedule"
    Dim sqlCmd As String
    Dim RecordSet  As ADODB.RecordSet
    
    'AirlineCode = GetShortNameOfAirline(Airline)
    If EngineSeries = "" Then
        sqlCmd = "SELECT ASSET_TYPE, ENGINE_SERIAL_NUMBER, ASSET_INTRO_DATE,LEASE_ASSET_RETURN_DATE  FROM [dbo].[TPP_ENGINE_SCHEDULE] "
    Else
        sqlCmd = "SELECT ASSET_TYPE, ENGINE_SERIAL_NUMBER, ASSET_INTRO_DATE,LEASE_ASSET_RETURN_DATE  FROM [dbo].[TPP_ENGINE_SCHEDULE] WHERE ENGINE_SERIES = '" & EngineSeries & "'  "
    End If
    
    Set RecordSet = New ADODB.RecordSet
    RecordSet.Open sqlCmd, conn
    
    Set WS = Sheets(S1)
    WS.Activate
    
    ClearCell "Engine Schedule", "A2:D2"
    
    Sheets(S1).Columns(2).NumberFormat = "@"
    Sheets(S1).Cells(2, 1).CopyFromRecordset RecordSet
    RecordSet.Close
   
    RC = Sheets(S1).Cells(Rows.Count, 1).End(xlUp).Row
    If RC > 1 Then
        Dim ScArr
        ScArr = Sheets(S1).Range(Sheets(S1).Cells(2, 1), Sheets(S1).Cells(RC, 4)).Value
        
        For i = 1 To UBound(ScArr)
            If ScArr(i, 3) <> "" Then
                ScArr(i, 3) = CDate(ScArr(i, 3))
            End If
            If ScArr(i, 4) <> "" Then
                ScArr(i, 4) = CDate(ScArr(i, 4))
            End If
        Next i
        Sheets(S1).Range(Sheets(S1).Cells(2, 2), Sheets(S1).Cells(RC, 2)).NumberFormat = "@"
        Sheets(S1).Range(Sheets(S1).Cells(2, 1), Sheets(S1).Cells(RC, 4)).Value = ScArr
        Erase ScArr
    End If
            
End Sub

